
AL-1S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000add0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800aedc  0800aedc  0000bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b304  0800b304  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b304  0800b304  0000c304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b30c  0800b30c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b30c  0800b30c  0000c30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b310  0800b310  0000c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b314  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  200001d8  0800b4ec  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015f8  0800b4ec  0000d5f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b2a  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c5c  00000000  00000000  00020d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00024988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca5  00000000  00000000  00025a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b649  00000000  00000000  0002670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dee  00000000  00000000  00041d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b05d  00000000  00000000  00058b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf8  00000000  00000000  000e3be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e87dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aec4 	.word	0x0800aec4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	0800aec4 	.word	0x0800aec4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <JQ_Send>:





void JQ_Send(uint8_t Play_num){
 800015c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800015e:	b0ab      	sub	sp, #172	@ 0xac
 8000160:	af06      	add	r7, sp, #24
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
    unsigned char cmd[6] = {0x7E, 0x04, 0x03, 0x00, 0x01, 0xEF};
 8000166:	4a27      	ldr	r2, [pc, #156]	@ (8000204 <JQ_Send+0xa8>)
 8000168:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800016c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000170:	6018      	str	r0, [r3, #0]
 8000172:	3304      	adds	r3, #4
 8000174:	8019      	strh	r1, [r3, #0]

    char buffer[128];
    snprintf(buffer, sizeof(buffer),
             "sending: %02X, %02X, %02X, %02X, %02X, %02X\r\n",
             cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5]);
 8000176:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
    snprintf(buffer, sizeof(buffer),
 800017a:	461e      	mov	r6, r3
             cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5]);
 800017c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8000180:	f897 208a 	ldrb.w	r2, [r7, #138]	@ 0x8a
 8000184:	f897 108b 	ldrb.w	r1, [r7, #139]	@ 0x8b
 8000188:	f897 008c 	ldrb.w	r0, [r7, #140]	@ 0x8c
    snprintf(buffer, sizeof(buffer),
 800018c:	4604      	mov	r4, r0
             cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5]);
 800018e:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
    snprintf(buffer, sizeof(buffer),
 8000192:	4605      	mov	r5, r0
 8000194:	f107 0008 	add.w	r0, r7, #8
 8000198:	9504      	str	r5, [sp, #16]
 800019a:	9403      	str	r4, [sp, #12]
 800019c:	9102      	str	r1, [sp, #8]
 800019e:	9201      	str	r2, [sp, #4]
 80001a0:	9300      	str	r3, [sp, #0]
 80001a2:	4633      	mov	r3, r6
 80001a4:	4a18      	ldr	r2, [pc, #96]	@ (8000208 <JQ_Send+0xac>)
 80001a6:	2180      	movs	r1, #128	@ 0x80
 80001a8:	f009 fe3c 	bl	8009e24 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80001ac:	f107 0308 	add.w	r3, r7, #8
 80001b0:	4618      	mov	r0, r3
 80001b2:	f7ff ffcb 	bl	800014c <strlen>
 80001b6:	4603      	mov	r3, r0
 80001b8:	b29a      	uxth	r2, r3
 80001ba:	f107 0108 	add.w	r1, r7, #8
 80001be:	f04f 33ff 	mov.w	r3, #4294967295
 80001c2:	4812      	ldr	r0, [pc, #72]	@ (800020c <JQ_Send+0xb0>)
 80001c4:	f004 fb51 	bl	800486a <HAL_UART_Transmit>

    for (uint8_t i = 0; i < 6; i++){
 80001c8:	2300      	movs	r3, #0
 80001ca:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80001ce:	e010      	b.n	80001f2 <JQ_Send+0x96>
    	HAL_Delay(150);
 80001d0:	2096      	movs	r0, #150	@ 0x96
 80001d2:	f001 fa55 	bl	8001680 <HAL_Delay>
        UART_Send(cmd[i]);
 80001d6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80001da:	3390      	adds	r3, #144	@ 0x90
 80001dc:	443b      	add	r3, r7
 80001de:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 f814 	bl	8000210 <UART_Send>
    for (uint8_t i = 0; i < 6; i++){
 80001e8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80001ec:	3301      	adds	r3, #1
 80001ee:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80001f2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80001f6:	2b05      	cmp	r3, #5
 80001f8:	d9ea      	bls.n	80001d0 <JQ_Send+0x74>
    }
}
 80001fa:	bf00      	nop
 80001fc:	bf00      	nop
 80001fe:	3794      	adds	r7, #148	@ 0x94
 8000200:	46bd      	mov	sp, r7
 8000202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000204:	0800af0c 	.word	0x0800af0c
 8000208:	0800aedc 	.word	0x0800aedc
 800020c:	20000258 	.word	0x20000258

08000210 <UART_Send>:

void UART_Send(unsigned char ch){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_byte;
    HAL_UART_Transmit(&huart3, &ch, strlen(ch), HAL_MAX_DELAY);
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4618      	mov	r0, r3
 800021e:	f7ff ff95 	bl	800014c <strlen>
 8000222:	4603      	mov	r3, r0
 8000224:	b29a      	uxth	r2, r3
 8000226:	1df9      	adds	r1, r7, #7
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	480f      	ldr	r0, [pc, #60]	@ (800026c <UART_Send+0x5c>)
 800022e:	f004 fb1c 	bl	800486a <HAL_UART_Transmit>
    if (HAL_UART_Receive(&huart3, &rx_byte, 1, 100) == HAL_OK) {
 8000232:	f107 010f 	add.w	r1, r7, #15
 8000236:	2364      	movs	r3, #100	@ 0x64
 8000238:	2201      	movs	r2, #1
 800023a:	480c      	ldr	r0, [pc, #48]	@ (800026c <UART_Send+0x5c>)
 800023c:	f004 fba0 	bl	8004980 <HAL_UART_Receive>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d107      	bne.n	8000256 <UART_Send+0x46>
        HAL_UART_Transmit(&huart1, (uint8_t*)"播放中\r\n",
 8000246:	f04f 33ff 	mov.w	r3, #4294967295
 800024a:	220b      	movs	r2, #11
 800024c:	4908      	ldr	r1, [pc, #32]	@ (8000270 <UART_Send+0x60>)
 800024e:	4809      	ldr	r0, [pc, #36]	@ (8000274 <UART_Send+0x64>)
 8000250:	f004 fb0b 	bl	800486a <HAL_UART_Transmit>
                          strlen("播放中\r\n"), HAL_MAX_DELAY);
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t*)"未收到响应\r\n",
                          strlen("未收到响应\r\n"), HAL_MAX_DELAY);
    }
}
 8000254:	e006      	b.n	8000264 <UART_Send+0x54>
        HAL_UART_Transmit(&huart1, (uint8_t*)"未收到响应\r\n",
 8000256:	f04f 33ff 	mov.w	r3, #4294967295
 800025a:	2211      	movs	r2, #17
 800025c:	4906      	ldr	r1, [pc, #24]	@ (8000278 <UART_Send+0x68>)
 800025e:	4805      	ldr	r0, [pc, #20]	@ (8000274 <UART_Send+0x64>)
 8000260:	f004 fb03 	bl	800486a <HAL_UART_Transmit>
}
 8000264:	bf00      	nop
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	200002a0 	.word	0x200002a0
 8000270:	0800af14 	.word	0x0800af14
 8000274:	20000258 	.word	0x20000258
 8000278:	0800af20 	.word	0x0800af20

0800027c <LD_Delayms>:




static void LD_Delayms(uint16 i)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	HAL_Delay(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f001 f9fb 	bl	8001680 <HAL_Delay>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <LD3320_delay>:

static void LD3320_delay(unsigned long uldata)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
	HAL_Delay(uldata);
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f001 f9f0 	bl	8001680 <HAL_Delay>
}
 80002a0:	bf00      	nop
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <Spi_RW_Data>:

uint8_t Spi_RW_Data(uint8_t *p, uint8_t len)
{
 80002a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002ac:	b087      	sub	sp, #28
 80002ae:	af02      	add	r7, sp, #8
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	460b      	mov	r3, r1
 80002b4:	70fb      	strb	r3, [r7, #3]
 80002b6:	466b      	mov	r3, sp
 80002b8:	461e      	mov	r6, r3
	uint8_t pdata[len];
 80002ba:	78f9      	ldrb	r1, [r7, #3]
 80002bc:	460b      	mov	r3, r1
 80002be:	3b01      	subs	r3, #1
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	b2cb      	uxtb	r3, r1
 80002c4:	2200      	movs	r2, #0
 80002c6:	4698      	mov	r8, r3
 80002c8:	4691      	mov	r9, r2
 80002ca:	f04f 0200 	mov.w	r2, #0
 80002ce:	f04f 0300 	mov.w	r3, #0
 80002d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80002d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80002da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80002de:	b2cb      	uxtb	r3, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	461c      	mov	r4, r3
 80002e4:	4615      	mov	r5, r2
 80002e6:	f04f 0200 	mov.w	r2, #0
 80002ea:	f04f 0300 	mov.w	r3, #0
 80002ee:	00eb      	lsls	r3, r5, #3
 80002f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80002f4:	00e2      	lsls	r2, r4, #3
 80002f6:	460b      	mov	r3, r1
 80002f8:	3307      	adds	r3, #7
 80002fa:	08db      	lsrs	r3, r3, #3
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	ebad 0d03 	sub.w	sp, sp, r3
 8000302:	ab02      	add	r3, sp, #8
 8000304:	3300      	adds	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
	HAL_SPI_TransmitReceive(&hspi1, p, pdata, len, 0XFFFF);
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	b29b      	uxth	r3, r3
 800030c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000310:	9200      	str	r2, [sp, #0]
 8000312:	68ba      	ldr	r2, [r7, #8]
 8000314:	6879      	ldr	r1, [r7, #4]
 8000316:	4806      	ldr	r0, [pc, #24]	@ (8000330 <Spi_RW_Data+0x88>)
 8000318:	f003 fff4 	bl	8004304 <HAL_SPI_TransmitReceive>
	return pdata[len - 1];
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	3b01      	subs	r3, #1
 8000320:	68ba      	ldr	r2, [r7, #8]
 8000322:	5cd3      	ldrb	r3, [r2, r3]
 8000324:	46b5      	mov	sp, r6
}
 8000326:	4618      	mov	r0, r3
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000330:	200001fc 	.word	0x200001fc

08000334 <LD_WriteReg>:

static void LD_WriteReg(uint8 data1, uint8 data2)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	460a      	mov	r2, r1
 800033e:	71fb      	strb	r3, [r7, #7]
 8000340:	4613      	mov	r3, r2
 8000342:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[3];
	LD_SPIS_L();
 8000344:	2200      	movs	r2, #0
 8000346:	2102      	movs	r1, #2
 8000348:	480e      	ldr	r0, [pc, #56]	@ (8000384 <LD_WriteReg+0x50>)
 800034a:	f001 fd01 	bl	8001d50 <HAL_GPIO_WritePin>

	LD_CS_L();
 800034e:	2200      	movs	r2, #0
 8000350:	2110      	movs	r1, #16
 8000352:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LD_WriteReg+0x50>)
 8000354:	f001 fcfc 	bl	8001d50 <HAL_GPIO_WritePin>
	tx[0] = 0x04;
 8000358:	2304      	movs	r3, #4
 800035a:	733b      	strb	r3, [r7, #12]
	tx[1] = data1;
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	737b      	strb	r3, [r7, #13]
	tx[2] = data2;
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	73bb      	strb	r3, [r7, #14]
	Spi_RW_Data(tx, 3);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	2103      	movs	r1, #3
 800036a:	4618      	mov	r0, r3
 800036c:	f7ff ff9c 	bl	80002a8 <Spi_RW_Data>

	LD_CS_H();
 8000370:	2201      	movs	r2, #1
 8000372:	2110      	movs	r1, #16
 8000374:	4803      	ldr	r0, [pc, #12]	@ (8000384 <LD_WriteReg+0x50>)
 8000376:	f001 fceb 	bl	8001d50 <HAL_GPIO_WritePin>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800

08000388 <LD_ReadReg>:

static uint8 LD_ReadReg(uint8 reg_add)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	uint8 i;
	uint8_t tx[3];
	LD_SPIS_L();
 8000392:	2200      	movs	r2, #0
 8000394:	2102      	movs	r1, #2
 8000396:	4810      	ldr	r0, [pc, #64]	@ (80003d8 <LD_ReadReg+0x50>)
 8000398:	f001 fcda 	bl	8001d50 <HAL_GPIO_WritePin>

	LD_CS_L();
 800039c:	2200      	movs	r2, #0
 800039e:	2110      	movs	r1, #16
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <LD_ReadReg+0x50>)
 80003a2:	f001 fcd5 	bl	8001d50 <HAL_GPIO_WritePin>

	tx[0] = 0x05;
 80003a6:	2305      	movs	r3, #5
 80003a8:	733b      	strb	r3, [r7, #12]
	tx[1] = reg_add;
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	737b      	strb	r3, [r7, #13]
	tx[2] = 0x00;
 80003ae:	2300      	movs	r3, #0
 80003b0:	73bb      	strb	r3, [r7, #14]
	i = Spi_RW_Data(tx, 3);
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	2103      	movs	r1, #3
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff75 	bl	80002a8 <Spi_RW_Data>
 80003be:	4603      	mov	r3, r0
 80003c0:	73fb      	strb	r3, [r7, #15]
	LD_CS_H();
 80003c2:	2201      	movs	r2, #1
 80003c4:	2110      	movs	r1, #16
 80003c6:	4804      	ldr	r0, [pc, #16]	@ (80003d8 <LD_ReadReg+0x50>)
 80003c8:	f001 fcc2 	bl	8001d50 <HAL_GPIO_WritePin>
	return i;
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010800 	.word	0x40010800

080003dc <LD_reset>:

static void LD_reset(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	LD_RST_H();
 80003e0:	2201      	movs	r2, #1
 80003e2:	2108      	movs	r1, #8
 80003e4:	4813      	ldr	r0, [pc, #76]	@ (8000434 <LD_reset+0x58>)
 80003e6:	f001 fcb3 	bl	8001d50 <HAL_GPIO_WritePin>
	LD3320_delay(100);
 80003ea:	2064      	movs	r0, #100	@ 0x64
 80003ec:	f7ff ff51 	bl	8000292 <LD3320_delay>
	LD_RST_L();
 80003f0:	2200      	movs	r2, #0
 80003f2:	2108      	movs	r1, #8
 80003f4:	480f      	ldr	r0, [pc, #60]	@ (8000434 <LD_reset+0x58>)
 80003f6:	f001 fcab 	bl	8001d50 <HAL_GPIO_WritePin>
	LD3320_delay(100);
 80003fa:	2064      	movs	r0, #100	@ 0x64
 80003fc:	f7ff ff49 	bl	8000292 <LD3320_delay>
	LD_RST_H();
 8000400:	2201      	movs	r2, #1
 8000402:	2108      	movs	r1, #8
 8000404:	480b      	ldr	r0, [pc, #44]	@ (8000434 <LD_reset+0x58>)
 8000406:	f001 fca3 	bl	8001d50 <HAL_GPIO_WritePin>
	LD3320_delay(100);
 800040a:	2064      	movs	r0, #100	@ 0x64
 800040c:	f7ff ff41 	bl	8000292 <LD3320_delay>
	LD_CS_L();
 8000410:	2200      	movs	r2, #0
 8000412:	2110      	movs	r1, #16
 8000414:	4807      	ldr	r0, [pc, #28]	@ (8000434 <LD_reset+0x58>)
 8000416:	f001 fc9b 	bl	8001d50 <HAL_GPIO_WritePin>
	LD3320_delay(100);
 800041a:	2064      	movs	r0, #100	@ 0x64
 800041c:	f7ff ff39 	bl	8000292 <LD3320_delay>
	LD_CS_H();
 8000420:	2201      	movs	r2, #1
 8000422:	2110      	movs	r1, #16
 8000424:	4803      	ldr	r0, [pc, #12]	@ (8000434 <LD_reset+0x58>)
 8000426:	f001 fc93 	bl	8001d50 <HAL_GPIO_WritePin>
	LD3320_delay(100);
 800042a:	2064      	movs	r0, #100	@ 0x64
 800042c:	f7ff ff31 	bl	8000292 <LD3320_delay>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40010800 	.word	0x40010800

08000438 <LD3320_main>:

///用户修改
void LD3320_main(void)
{
 8000438:	b5b0      	push	{r4, r5, r7, lr}
 800043a:	b0aa      	sub	sp, #168	@ 0xa8
 800043c:	af04      	add	r7, sp, #16
	uint8 nAsrRes = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
    uint8_t i;
	LD_reset(); //复位LD3320
 8000444:	f7ff ffca 	bl	80003dc <LD_reset>
    char *code_s[]={"1、手电筒\r\n","2、汽车\r\n","3、红色\r\n","4、绿色\r\n","5、蓝色\r\n"};
 8000448:	4bbb      	ldr	r3, [pc, #748]	@ (8000738 <LD3320_main+0x300>)
 800044a:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 800044e:	461d      	mov	r5, r3
 8000450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	682b      	ldr	r3, [r5, #0]
 8000456:	6023      	str	r3, [r4, #0]
    char buffer[128];
    snprintf(buffer, sizeof(buffer),
 8000458:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 800045c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000460:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000464:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000468:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800046c:	463c      	mov	r4, r7
 800046e:	9003      	str	r0, [sp, #12]
 8000470:	9102      	str	r1, [sp, #8]
 8000472:	9201      	str	r2, [sp, #4]
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	462b      	mov	r3, r5
 8000478:	4ab0      	ldr	r2, [pc, #704]	@ (800073c <LD3320_main+0x304>)
 800047a:	2180      	movs	r1, #128	@ 0x80
 800047c:	4620      	mov	r0, r4
 800047e:	f009 fcd1 	bl	8009e24 <sniprintf>
             "%s, %s, %s, %s, %s\r\n",
             code_s[0], code_s[1], code_s[2], code_s[3], code_s[4]);

    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000482:	463b      	mov	r3, r7
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe61 	bl	800014c <strlen>
 800048a:	4603      	mov	r3, r0
 800048c:	b29a      	uxth	r2, r3
 800048e:	4639      	mov	r1, r7
 8000490:	f04f 33ff 	mov.w	r3, #4294967295
 8000494:	48aa      	ldr	r0, [pc, #680]	@ (8000740 <LD3320_main+0x308>)
 8000496:	f004 f9e8 	bl	800486a <HAL_UART_Transmit>
    for(i=0;i<5;i++){
 800049a:	2300      	movs	r3, #0
 800049c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80004a0:	e00f      	b.n	80004c2 <LD3320_main+0x8a>
        printf("%s",code_s[i]);
 80004a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	3398      	adds	r3, #152	@ 0x98
 80004aa:	443b      	add	r3, r7
 80004ac:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80004b0:	4619      	mov	r1, r3
 80004b2:	48a4      	ldr	r0, [pc, #656]	@ (8000744 <LD3320_main+0x30c>)
 80004b4:	f009 fc46 	bl	8009d44 <iprintf>
    for(i=0;i<5;i++){
 80004b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80004bc:	3301      	adds	r3, #1
 80004be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80004c2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d9eb      	bls.n	80004a2 <LD3320_main+0x6a>
    }

	nAsrStatus = LD_ASR_NONE; //初始状态：没有在作ASR     nAsrStatus   上面有定义         #define LD_ASR_NONE					0x00	//表示没有在作ASR识别
 80004ca:	4b9f      	ldr	r3, [pc, #636]	@ (8000748 <LD3320_main+0x310>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
	LD_Delayms(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff fed3 	bl	800027c <LD_Delayms>
	while (1)
	{
		switch (nAsrStatus)
 80004d6:	4b9c      	ldr	r3, [pc, #624]	@ (8000748 <LD3320_main+0x310>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b11      	cmp	r3, #17
 80004dc:	dc2c      	bgt.n	8000538 <LD3320_main+0x100>
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f2c0 8177 	blt.w	80007d2 <LD3320_main+0x39a>
 80004e4:	2b11      	cmp	r3, #17
 80004e6:	f200 8174 	bhi.w	80007d2 <LD3320_main+0x39a>
 80004ea:	a201      	add	r2, pc, #4	@ (adr r2, 80004f0 <LD3320_main+0xb8>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000541 	.word	0x08000541
 80004f4:	080007db 	.word	0x080007db
 80004f8:	080007d3 	.word	0x080007d3
 80004fc:	080007d3 	.word	0x080007d3
 8000500:	080007d3 	.word	0x080007d3
 8000504:	080007d3 	.word	0x080007d3
 8000508:	080007d3 	.word	0x080007d3
 800050c:	080007d3 	.word	0x080007d3
 8000510:	080007d3 	.word	0x080007d3
 8000514:	080007d3 	.word	0x080007d3
 8000518:	080007d3 	.word	0x080007d3
 800051c:	080007d3 	.word	0x080007d3
 8000520:	080007d3 	.word	0x080007d3
 8000524:	080007d3 	.word	0x080007d3
 8000528:	080007d3 	.word	0x080007d3
 800052c:	080007d3 	.word	0x080007d3
 8000530:	080005f5 	.word	0x080005f5
 8000534:	080007bf 	.word	0x080007bf
 8000538:	2b31      	cmp	r3, #49	@ 0x31
 800053a:	f040 814a 	bne.w	80007d2 <LD3320_main+0x39a>
		{
		case LD_ASR_RUNING: //#define LD_ASR_RUNING				0x01	//表示LD3320正在作ASR识别中

		case LD_ASR_ERROR: //#define LD_ASR_ERROR	 			0x31	//	表示一次识别流程中LD3320芯片内部出现不正确的状态
			break;
 800053e:	e14c      	b.n	80007da <LD3320_main+0x3a2>
		case LD_ASR_NONE:				//#define LD_ASR_NONE					0x00	//表示没有在作ASR识别
			nAsrStatus = LD_ASR_RUNING; //初始状态：没有在作ASR     nAsrStatus   上面有定义         #define LD_ASR_NONE					0x00	//表示没有在作ASR识别
 8000540:	4b81      	ldr	r3, [pc, #516]	@ (8000748 <LD3320_main+0x310>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]

			if (RunASR() == 0) //启动一次ASR识别流程：ASR初始化，ASR添加关键词语，启动ASR运算
 8000546:	f000 fa6f 	bl	8000a28 <RunASR>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10c      	bne.n	800056a <LD3320_main+0x132>
			{
				nAsrStatus = LD_ASR_ERROR;
 8000550:	4b7d      	ldr	r3, [pc, #500]	@ (8000748 <LD3320_main+0x310>)
 8000552:	2231      	movs	r2, #49	@ 0x31
 8000554:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart1, (uint8_t*)"RunASR LD_ASR_ERROR\r\n",
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	2215      	movs	r2, #21
 800055c:	497b      	ldr	r1, [pc, #492]	@ (800074c <LD3320_main+0x314>)
 800055e:	4878      	ldr	r0, [pc, #480]	@ (8000740 <LD3320_main+0x308>)
 8000560:	f004 f983 	bl	800486a <HAL_UART_Transmit>
				  	                                   strlen("RunASR LD_ASR_ERROR\r\n"), HAL_MAX_DELAY);
				printf("RunASR LD_ASR_ERROR\r\n");
 8000564:	487a      	ldr	r0, [pc, #488]	@ (8000750 <LD3320_main+0x318>)
 8000566:	f009 fc55 	bl	8009e14 <puts>





	    	switch (MP3_reg){
 800056a:	4b7a      	ldr	r3, [pc, #488]	@ (8000754 <LD3320_main+0x31c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	2b04      	cmp	r3, #4
 8000572:	d830      	bhi.n	80005d6 <LD3320_main+0x19e>
 8000574:	a201      	add	r2, pc, #4	@ (adr r2, 800057c <LD3320_main+0x144>)
 8000576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800057a:	bf00      	nop
 800057c:	08000591 	.word	0x08000591
 8000580:	0800059f 	.word	0x0800059f
 8000584:	080005ad 	.word	0x080005ad
 8000588:	080005bb 	.word	0x080005bb
 800058c:	080005c9 	.word	0x080005c9
	    		  	  				case 1:
	    		  	  					JQ_Send(0x01);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff fde3 	bl	800015c <JQ_Send>
	    		  	  					MP3_reg = 0;
 8000596:	4b6f      	ldr	r3, [pc, #444]	@ (8000754 <LD3320_main+0x31c>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
	    		  	  					break;
 800059c:	e01f      	b.n	80005de <LD3320_main+0x1a6>
	    		  	  				case 2:
	    		  	  					JQ_Send(0x02);
 800059e:	2002      	movs	r0, #2
 80005a0:	f7ff fddc 	bl	800015c <JQ_Send>
	    		  	  					MP3_reg = 0;
 80005a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000754 <LD3320_main+0x31c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
	    		  	  					break;
 80005aa:	e018      	b.n	80005de <LD3320_main+0x1a6>
	    		  	  				case 3:
	    		  	  					JQ_Send(0x03);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f7ff fdd5 	bl	800015c <JQ_Send>
	    		  	  					MP3_reg = 0;
 80005b2:	4b68      	ldr	r3, [pc, #416]	@ (8000754 <LD3320_main+0x31c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
	    		  	  					break;
 80005b8:	e011      	b.n	80005de <LD3320_main+0x1a6>
	    		  	  				case 4:
	    		  	  					JQ_Send(0x04);
 80005ba:	2004      	movs	r0, #4
 80005bc:	f7ff fdce 	bl	800015c <JQ_Send>
	    		  	  					MP3_reg = 0;
 80005c0:	4b64      	ldr	r3, [pc, #400]	@ (8000754 <LD3320_main+0x31c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	    		  	  					break;
 80005c6:	e00a      	b.n	80005de <LD3320_main+0x1a6>
	    		  	  				case 5:
	    		  	  					JQ_Send(0x05);
 80005c8:	2005      	movs	r0, #5
 80005ca:	f7ff fdc7 	bl	800015c <JQ_Send>
	    		  	  					MP3_reg = 0;
 80005ce:	4b61      	ldr	r3, [pc, #388]	@ (8000754 <LD3320_main+0x31c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	    		  	  					break;
 80005d4:	e003      	b.n	80005de <LD3320_main+0x1a6>
	    		  	  				default:
	    		  	  					MP3_reg = 0;
 80005d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000754 <LD3320_main+0x31c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
	    		  	  					break;
 80005dc:	bf00      	nop





			HAL_UART_Transmit(&huart1, (uint8_t*)"开始识别\r\n",
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	220e      	movs	r2, #14
 80005e4:	495c      	ldr	r1, [pc, #368]	@ (8000758 <LD3320_main+0x320>)
 80005e6:	4856      	ldr	r0, [pc, #344]	@ (8000740 <LD3320_main+0x308>)
 80005e8:	f004 f93f 	bl	800486a <HAL_UART_Transmit>
							  	                       strlen("开始识别\r\n"), HAL_MAX_DELAY);
            printf("开始识别\r\n");
 80005ec:	485b      	ldr	r0, [pc, #364]	@ (800075c <LD3320_main+0x324>)
 80005ee:	f009 fc11 	bl	8009e14 <puts>
			break;
 80005f2:	e0f3      	b.n	80007dc <LD3320_main+0x3a4>
		case LD_ASR_FOUNDOK:
			nAsrRes = LD_GetResult(); //一次ASR识别流程结束，去取ASR识别结果
 80005f4:	f000 fa6c 	bl	8000ad0 <LD_GetResult>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
			HAL_UART_Transmit(&huart1, (uint8_t*)"识别码:%d\r\n",
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	220e      	movs	r2, #14
 8000604:	4956      	ldr	r1, [pc, #344]	@ (8000760 <LD3320_main+0x328>)
 8000606:	484e      	ldr	r0, [pc, #312]	@ (8000740 <LD3320_main+0x308>)
 8000608:	f004 f92f 	bl	800486a <HAL_UART_Transmit>
							  	                       strlen("识别码:%d\r\n"), HAL_MAX_DELAY);
			printf("识别码:%d\r\n", nAsrRes);
 800060c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000610:	4619      	mov	r1, r3
 8000612:	4853      	ldr	r0, [pc, #332]	@ (8000760 <LD3320_main+0x328>)
 8000614:	f009 fb96 	bl	8009d44 <iprintf>
			printf("%s\r\n",code_s[nAsrRes-1]);
 8000618:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800061c:	3b01      	subs	r3, #1
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	3398      	adds	r3, #152	@ 0x98
 8000622:	443b      	add	r3, r7
 8000624:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000628:	4619      	mov	r1, r3
 800062a:	484e      	ldr	r0, [pc, #312]	@ (8000764 <LD3320_main+0x32c>)
 800062c:	f009 fb8a 	bl	8009d44 <iprintf>
			switch (nAsrRes) //对结果执行相关操作,客户修改
 8000630:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000634:	3b01      	subs	r3, #1
 8000636:	2b04      	cmp	r3, #4
 8000638:	f200 80bc 	bhi.w	80007b4 <LD3320_main+0x37c>
 800063c:	a201      	add	r2, pc, #4	@ (adr r2, 8000644 <LD3320_main+0x20c>)
 800063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000642:	bf00      	nop
 8000644:	08000659 	.word	0x08000659
 8000648:	0800069b 	.word	0x0800069b
 800064c:	080006cf 	.word	0x080006cf
 8000650:	08000703 	.word	0x08000703
 8000654:	08000781 	.word	0x08000781
			{
				case CODE_1: //命令“流水灯”
					MP3_reg = 1;
 8000658:	4b3e      	ldr	r3, [pc, #248]	@ (8000754 <LD3320_main+0x31c>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)"code 1\r\n",
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	2208      	movs	r2, #8
 8000664:	4940      	ldr	r1, [pc, #256]	@ (8000768 <LD3320_main+0x330>)
 8000666:	4836      	ldr	r0, [pc, #216]	@ (8000740 <LD3320_main+0x308>)
 8000668:	f004 f8ff 	bl	800486a <HAL_UART_Transmit>
												  	                       strlen("code 1\r\n"), HAL_MAX_DELAY);
					snprintf(buffer, sizeof(buffer),
 800066c:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <LD3320_main+0x31c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4638      	mov	r0, r7
 8000672:	4a3e      	ldr	r2, [pc, #248]	@ (800076c <LD3320_main+0x334>)
 8000674:	2180      	movs	r1, #128	@ 0x80
 8000676:	f009 fbd5 	bl	8009e24 <sniprintf>
					             "MP3_reg:%d\r\n",
								 MP3_reg);
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800067a:	463b      	mov	r3, r7
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fd65 	bl	800014c <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	4639      	mov	r1, r7
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	482c      	ldr	r0, [pc, #176]	@ (8000740 <LD3320_main+0x308>)
 800068e:	f004 f8ec 	bl	800486a <HAL_UART_Transmit>
					printf("code 1\r\n");
 8000692:	4837      	ldr	r0, [pc, #220]	@ (8000770 <LD3320_main+0x338>)
 8000694:	f009 fbbe 	bl	8009e14 <puts>
			//IO1=1;
					break;
 8000698:	e08d      	b.n	80007b6 <LD3320_main+0x37e>
				case CODE_2: //命令“闪烁”
					MP3_reg = 2;
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <LD3320_main+0x31c>)
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
					snprintf(buffer, sizeof(buffer),
 80006a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <LD3320_main+0x31c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4638      	mov	r0, r7
 80006a6:	4a31      	ldr	r2, [pc, #196]	@ (800076c <LD3320_main+0x334>)
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	f009 fbbb 	bl	8009e24 <sniprintf>
					             "MP3_reg:%d\r\n",
								 MP3_reg);
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006ae:	463b      	mov	r3, r7
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd4b 	bl	800014c <strlen>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4639      	mov	r1, r7
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	481f      	ldr	r0, [pc, #124]	@ (8000740 <LD3320_main+0x308>)
 80006c2:	f004 f8d2 	bl	800486a <HAL_UART_Transmit>
					printf("code 2\r\n");
 80006c6:	482b      	ldr	r0, [pc, #172]	@ (8000774 <LD3320_main+0x33c>)
 80006c8:	f009 fba4 	bl	8009e14 <puts>
			// 	//IO1=0;x
					break;
 80006cc:	e073      	b.n	80007b6 <LD3320_main+0x37e>
				case CODE_3: //命令“按键触发”
					MP3_reg = 3;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <LD3320_main+0x31c>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	601a      	str	r2, [r3, #0]
					snprintf(buffer, sizeof(buffer),
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <LD3320_main+0x31c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4638      	mov	r0, r7
 80006da:	4a24      	ldr	r2, [pc, #144]	@ (800076c <LD3320_main+0x334>)
 80006dc:	2180      	movs	r1, #128	@ 0x80
 80006de:	f009 fba1 	bl	8009e24 <sniprintf>
					             "MP3_reg:%d\r\n",
								 MP3_reg);
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80006e2:	463b      	mov	r3, r7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd31 	bl	800014c <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4639      	mov	r1, r7
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	4812      	ldr	r0, [pc, #72]	@ (8000740 <LD3320_main+0x308>)
 80006f6:	f004 f8b8 	bl	800486a <HAL_UART_Transmit>
					printf("code 3\r\n");
 80006fa:	481f      	ldr	r0, [pc, #124]	@ (8000778 <LD3320_main+0x340>)
 80006fc:	f009 fb8a 	bl	8009e14 <puts>
					break;
 8000700:	e059      	b.n	80007b6 <LD3320_main+0x37e>
				case CODE_4: //命令“全灭”
					MP3_reg = 4;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <LD3320_main+0x31c>)
 8000704:	2204      	movs	r2, #4
 8000706:	601a      	str	r2, [r3, #0]
					snprintf(buffer, sizeof(buffer),
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <LD3320_main+0x31c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4638      	mov	r0, r7
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <LD3320_main+0x334>)
 8000710:	2180      	movs	r1, #128	@ 0x80
 8000712:	f009 fb87 	bl	8009e24 <sniprintf>
					             "MP3_reg:%d\r\n",
								 MP3_reg);
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000716:	463b      	mov	r3, r7
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd17 	bl	800014c <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	4639      	mov	r1, r7
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <LD3320_main+0x308>)
 800072a:	f004 f89e 	bl	800486a <HAL_UART_Transmit>
					printf("code 4\r\n");
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <LD3320_main+0x344>)
 8000730:	f009 fb70 	bl	8009e14 <puts>
					break;
 8000734:	e03f      	b.n	80007b6 <LD3320_main+0x37e>
 8000736:	bf00      	nop
 8000738:	0800b06c 	.word	0x0800b06c
 800073c:	0800af34 	.word	0x0800af34
 8000740:	20000258 	.word	0x20000258
 8000744:	0800af4c 	.word	0x0800af4c
 8000748:	200001f4 	.word	0x200001f4
 800074c:	0800af50 	.word	0x0800af50
 8000750:	0800af68 	.word	0x0800af68
 8000754:	200001f8 	.word	0x200001f8
 8000758:	0800af80 	.word	0x0800af80
 800075c:	0800af90 	.word	0x0800af90
 8000760:	0800afa0 	.word	0x0800afa0
 8000764:	0800afb0 	.word	0x0800afb0
 8000768:	0800afb8 	.word	0x0800afb8
 800076c:	0800afc4 	.word	0x0800afc4
 8000770:	0800afd4 	.word	0x0800afd4
 8000774:	0800afdc 	.word	0x0800afdc
 8000778:	0800afe4 	.word	0x0800afe4
 800077c:	0800afec 	.word	0x0800afec
				case CODE_5: //命令“状态”
					MP3_reg = 5;
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <LD3320_main+0x3a8>)
 8000782:	2205      	movs	r2, #5
 8000784:	601a      	str	r2, [r3, #0]
					snprintf(buffer, sizeof(buffer),
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <LD3320_main+0x3a8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4638      	mov	r0, r7
 800078c:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <LD3320_main+0x3ac>)
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	f009 fb48 	bl	8009e24 <sniprintf>
					             "MP3_reg:%d\r\n",
								 MP3_reg);
					HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fcd8 	bl	800014c <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4639      	mov	r1, r7
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	4810      	ldr	r0, [pc, #64]	@ (80007e8 <LD3320_main+0x3b0>)
 80007a8:	f004 f85f 	bl	800486a <HAL_UART_Transmit>
					printf("code 5\r\n");
 80007ac:	480f      	ldr	r0, [pc, #60]	@ (80007ec <LD3320_main+0x3b4>)
 80007ae:	f009 fb31 	bl	8009e14 <puts>
					break;
 80007b2:	e000      	b.n	80007b6 <LD3320_main+0x37e>
				default:
					break;
 80007b4:	bf00      	nop
			}
			nAsrStatus = LD_ASR_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <LD3320_main+0x3b8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			break;
 80007bc:	e00e      	b.n	80007dc <LD3320_main+0x3a4>
		case LD_ASR_FOUNDZERO:
			printf("无法识别\r\n");
 80007be:	480d      	ldr	r0, [pc, #52]	@ (80007f4 <LD3320_main+0x3bc>)
 80007c0:	f009 fb28 	bl	8009e14 <puts>
			HAL_UART_Transmit(&huart1, (uint8_t*)"无法识别\r\n",
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	220e      	movs	r2, #14
 80007ca:	490b      	ldr	r1, [pc, #44]	@ (80007f8 <LD3320_main+0x3c0>)
 80007cc:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <LD3320_main+0x3b0>)
 80007ce:	f004 f84c 	bl	800486a <HAL_UART_Transmit>
										  	                       strlen("无法识别\r\n"), HAL_MAX_DELAY);
		default:
			nAsrStatus = LD_ASR_NONE;
 80007d2:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <LD3320_main+0x3b8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
			break;
 80007d8:	e000      	b.n	80007dc <LD3320_main+0x3a4>
			break;
 80007da:	bf00      	nop
		switch (nAsrStatus)
 80007dc:	e67b      	b.n	80004d6 <LD3320_main+0x9e>
 80007de:	bf00      	nop
 80007e0:	200001f8 	.word	0x200001f8
 80007e4:	0800afc4 	.word	0x0800afc4
 80007e8:	20000258 	.word	0x20000258
 80007ec:	0800aff4 	.word	0x0800aff4
 80007f0:	200001f4 	.word	0x200001f4
 80007f4:	0800affc 	.word	0x0800affc
 80007f8:	0800b00c 	.word	0x0800b00c

080007fc <LD_Check_ASRBusyFlag_b2>:
}

//ASR：DSP 忙闲状态
//0x21 表示闲，查询到为闲状态可以进行下一步 ASR 动作
uint8 LD_Check_ASRBusyFlag_b2(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
	uint8_t j;
	uint8_t flag = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	71bb      	strb	r3, [r7, #6]
	uint8_t sta;
	for (j = 0; j < 20; j++)
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	e012      	b.n	8000832 <LD_Check_ASRBusyFlag_b2+0x36>
	{
		sta = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	717b      	strb	r3, [r7, #5]
		sta = LD_ReadReg(0xb2);
 8000810:	20b2      	movs	r0, #178	@ 0xb2
 8000812:	f7ff fdb9 	bl	8000388 <LD_ReadReg>
 8000816:	4603      	mov	r3, r0
 8000818:	717b      	strb	r3, [r7, #5]
		if (sta == 0x21)
 800081a:	797b      	ldrb	r3, [r7, #5]
 800081c:	2b21      	cmp	r3, #33	@ 0x21
 800081e:	d102      	bne.n	8000826 <LD_Check_ASRBusyFlag_b2+0x2a>
		{
			flag = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	71bb      	strb	r3, [r7, #6]
			break;
 8000824:	e008      	b.n	8000838 <LD_Check_ASRBusyFlag_b2+0x3c>
		}
		LD3320_delay(10);
 8000826:	200a      	movs	r0, #10
 8000828:	f7ff fd33 	bl	8000292 <LD3320_delay>
	for (j = 0; j < 20; j++)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3301      	adds	r3, #1
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b13      	cmp	r3, #19
 8000836:	d9e9      	bls.n	800080c <LD_Check_ASRBusyFlag_b2+0x10>
	}
	return flag;
 8000838:	79bb      	ldrb	r3, [r7, #6]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <LD_AsrAddFixed>:

static uint8 LD_AsrAddFixed(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b09c      	sub	sp, #112	@ 0x70
 8000848:	af00      	add	r7, sp, #0
	uint8 k, flag;
	uint8 nAsrAddLength;
#define DATE_A 5  //数组二维数值
#define DATE_B 20 //数组一维数值
	//添加关键词，用户修改
	uint8 sRecog[DATE_A][DATE_B] = {
 800084a:	4a4a      	ldr	r2, [pc, #296]	@ (8000974 <LD_AsrAddFixed+0x130>)
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	4611      	mov	r1, r2
 8000852:	2264      	movs	r2, #100	@ 0x64
 8000854:	4618      	mov	r0, r3
 8000856:	f009 fc6c 	bl	800a132 <memcpy>
		"shou dian tong",
		"qi che",
		"hong se",
		"lv se",
		"lan se"};
	uint8 pCode[DATE_A] = {
 800085a:	4a47      	ldr	r2, [pc, #284]	@ (8000978 <LD_AsrAddFixed+0x134>)
 800085c:	463b      	mov	r3, r7
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	6018      	str	r0, [r3, #0]
 8000864:	3304      	adds	r3, #4
 8000866:	7019      	strb	r1, [r3, #0]
		CODE_1,
		CODE_2,
		CODE_3,
		CODE_4,
		CODE_5}; //添加识别码，用户修改
	flag = 1;
 8000868:	2301      	movs	r3, #1
 800086a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
	for (k = 0; k < DATE_A; k++)
 800086e:	2300      	movs	r3, #0
 8000870:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000874:	e073      	b.n	800095e <LD_AsrAddFixed+0x11a>
	{
		if (LD_Check_ASRBusyFlag_b2() == 0) //查询DSP 忙闲状态
 8000876:	f7ff ffc1 	bl	80007fc <LD_Check_ASRBusyFlag_b2>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d110      	bne.n	80008a2 <LD_AsrAddFixed+0x5e>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"LD_AsrAddFixed DSP busy K:%d\r\n",
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	221e      	movs	r2, #30
 8000886:	493d      	ldr	r1, [pc, #244]	@ (800097c <LD_AsrAddFixed+0x138>)
 8000888:	483d      	ldr	r0, [pc, #244]	@ (8000980 <LD_AsrAddFixed+0x13c>)
 800088a:	f003 ffee 	bl	800486a <HAL_UART_Transmit>
										  	                       strlen("LD_AsrAddFixed DSP busy K:%d\r\n"), HAL_MAX_DELAY);
			printf("LD_AsrAddFixed DSP busy K:%d\r\n", k);
 800088e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000892:	4619      	mov	r1, r3
 8000894:	4839      	ldr	r0, [pc, #228]	@ (800097c <LD_AsrAddFixed+0x138>)
 8000896:	f009 fa55 	bl	8009d44 <iprintf>
			flag = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
			break;
 80008a0:	e061      	b.n	8000966 <LD_AsrAddFixed+0x122>
		}

		LD_WriteReg(0xc1, pCode[k]); //ASR：识别字 Index
 80008a2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80008a6:	3370      	adds	r3, #112	@ 0x70
 80008a8:	443b      	add	r3, r7
 80008aa:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80008ae:	4619      	mov	r1, r3
 80008b0:	20c1      	movs	r0, #193	@ 0xc1
 80008b2:	f7ff fd3f 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0xc3, 0);		 //ASR：识别字添加时写入 00
 80008b6:	2100      	movs	r1, #0
 80008b8:	20c3      	movs	r0, #195	@ 0xc3
 80008ba:	f7ff fd3b 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x08, 0x04);	 //清除 FIFO_EXT 内容（清除指定 FIFO 后再写入一次 00H）
 80008be:	2104      	movs	r1, #4
 80008c0:	2008      	movs	r0, #8
 80008c2:	f7ff fd37 	bl	8000334 <LD_WriteReg>
		LD3320_delay(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fce3 	bl	8000292 <LD3320_delay>
		LD_WriteReg(0x08, 0x00);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2008      	movs	r0, #8
 80008d0:	f7ff fd30 	bl	8000334 <LD_WriteReg>
		LD3320_delay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f7ff fcdc 	bl	8000292 <LD3320_delay>

		for (nAsrAddLength = 0; nAsrAddLength < DATE_B; nAsrAddLength++)
 80008da:	2300      	movs	r3, #0
 80008dc:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 80008e0:	e024      	b.n	800092c <LD_AsrAddFixed+0xe8>
		{
			if (sRecog[k][nAsrAddLength] == 0)
 80008e2:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80008e6:	f897 106d 	ldrb.w	r1, [r7, #109]	@ 0x6d
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	3370      	adds	r3, #112	@ 0x70
 80008f4:	443b      	add	r3, r7
 80008f6:	440b      	add	r3, r1
 80008f8:	3b68      	subs	r3, #104	@ 0x68
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d01a      	beq.n	8000936 <LD_AsrAddFixed+0xf2>
				break;
			LD_WriteReg(0x5, sRecog[k][nAsrAddLength]); //FIFO_EXT 数据口
 8000900:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8000904:	f897 106d 	ldrb.w	r1, [r7, #109]	@ 0x6d
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	3370      	adds	r3, #112	@ 0x70
 8000912:	443b      	add	r3, r7
 8000914:	440b      	add	r3, r1
 8000916:	3b68      	subs	r3, #104	@ 0x68
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4619      	mov	r1, r3
 800091c:	2005      	movs	r0, #5
 800091e:	f7ff fd09 	bl	8000334 <LD_WriteReg>
		for (nAsrAddLength = 0; nAsrAddLength < DATE_B; nAsrAddLength++)
 8000922:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000926:	3301      	adds	r3, #1
 8000928:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 800092c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000930:	2b13      	cmp	r3, #19
 8000932:	d9d6      	bls.n	80008e2 <LD_AsrAddFixed+0x9e>
 8000934:	e000      	b.n	8000938 <LD_AsrAddFixed+0xf4>
				break;
 8000936:	bf00      	nop
		}
		LD_WriteReg(0xb9, nAsrAddLength); //ASR：当前添加识别句的字符串长度（拼音字符串）
 8000938:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800093c:	4619      	mov	r1, r3
 800093e:	20b9      	movs	r0, #185	@ 0xb9
 8000940:	f7ff fcf8 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0xb2, 0xff);		  //ASR：DSP 忙闲状态 写入忙
 8000944:	21ff      	movs	r1, #255	@ 0xff
 8000946:	20b2      	movs	r0, #178	@ 0xb2
 8000948:	f7ff fcf4 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x37, 0x04);		  //语音识别控制命令下发寄存器 写 04H：通知 DSP 要添加一项识别句
 800094c:	2104      	movs	r1, #4
 800094e:	2037      	movs	r0, #55	@ 0x37
 8000950:	f7ff fcf0 	bl	8000334 <LD_WriteReg>
	for (k = 0; k < DATE_A; k++)
 8000954:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000958:	3301      	adds	r3, #1
 800095a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800095e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000962:	2b04      	cmp	r3, #4
 8000964:	d987      	bls.n	8000876 <LD_AsrAddFixed+0x32>
	}
	return flag;
 8000966:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
}
 800096a:	4618      	mov	r0, r3
 800096c:	3770      	adds	r7, #112	@ 0x70
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	0800b0a0 	.word	0x0800b0a0
 8000978:	0800b104 	.word	0x0800b104
 800097c:	0800b080 	.word	0x0800b080
 8000980:	20000258 	.word	0x20000258

08000984 <LD_AsrRun>:

static uint8 LD_AsrRun(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	LD_WriteReg(0x35, MIC_VOL); //麦克风（MIC）音量 建议设置值为 40H-55H
 8000988:	2150      	movs	r1, #80	@ 0x50
 800098a:	2035      	movs	r0, #53	@ 0x35
 800098c:	f7ff fcd2 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x1C, 0x09);	//ADC 开关控制
 8000990:	2109      	movs	r1, #9
 8000992:	201c      	movs	r0, #28
 8000994:	f7ff fcce 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0xBD, 0x20);	//初始化控制寄存器
 8000998:	2120      	movs	r1, #32
 800099a:	20bd      	movs	r0, #189	@ 0xbd
 800099c:	f7ff fcca 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x08, 0x01);	//清除 FIFO_DATA  清除指定 FIFO 后再写入一次 00H
 80009a0:	2101      	movs	r1, #1
 80009a2:	2008      	movs	r0, #8
 80009a4:	f7ff fcc6 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 80009a8:	2005      	movs	r0, #5
 80009aa:	f7ff fc72 	bl	8000292 <LD3320_delay>
	LD_WriteReg(0x08, 0x00);
 80009ae:	2100      	movs	r1, #0
 80009b0:	2008      	movs	r0, #8
 80009b2:	f7ff fcbf 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 80009b6:	2005      	movs	r0, #5
 80009b8:	f7ff fc6b 	bl	8000292 <LD3320_delay>

	if (LD_Check_ASRBusyFlag_b2() == 0)
 80009bc:	f7ff ff1e 	bl	80007fc <LD_Check_ASRBusyFlag_b2>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10b      	bne.n	80009de <LD_AsrRun+0x5a>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"LD_AsrRun DSP busy\r\n",
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	2214      	movs	r2, #20
 80009cc:	4913      	ldr	r1, [pc, #76]	@ (8000a1c <LD_AsrRun+0x98>)
 80009ce:	4814      	ldr	r0, [pc, #80]	@ (8000a20 <LD_AsrRun+0x9c>)
 80009d0:	f003 ff4b 	bl	800486a <HAL_UART_Transmit>
												  	                       strlen("LD_AsrRun DSP busy\r\n"), HAL_MAX_DELAY);
		printf("LD_AsrRun DSP busy\r\n");
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <LD_AsrRun+0xa0>)
 80009d6:	f009 fa1d 	bl	8009e14 <puts>
		return 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	e01b      	b.n	8000a16 <LD_AsrRun+0x92>
	}

	LD_WriteReg(0xB2, 0xff); //ASR：DSP 忙闲状态
 80009de:	21ff      	movs	r1, #255	@ 0xff
 80009e0:	20b2      	movs	r0, #178	@ 0xb2
 80009e2:	f7ff fca7 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x37, 0x06); //写 06H：通知 DSP 开始识别语音
 80009e6:	2106      	movs	r1, #6
 80009e8:	2037      	movs	r0, #55	@ 0x37
 80009ea:	f7ff fca3 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x37, 0x06); //写 06H：通知 DSP 开始识别语音
 80009ee:	2106      	movs	r1, #6
 80009f0:	2037      	movs	r0, #55	@ 0x37
 80009f2:	f7ff fc9f 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 80009f6:	2005      	movs	r0, #5
 80009f8:	f7ff fc4b 	bl	8000292 <LD3320_delay>
	LD_WriteReg(0x1C, 0x0b); //写 0BH 麦克风输入 ADC 通道可用
 80009fc:	210b      	movs	r1, #11
 80009fe:	201c      	movs	r0, #28
 8000a00:	f7ff fc98 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x29, 0x10); //中断允许（可读写）第 4 位：同步中断允许，1 表示允许
 8000a04:	2110      	movs	r1, #16
 8000a06:	2029      	movs	r0, #41	@ 0x29
 8000a08:	f7ff fc94 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0xBD, 0x00); //初始化控制寄存器 写入 00H；然后启动；为 ASR 模块
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	20bd      	movs	r0, #189	@ 0xbd
 8000a10:	f7ff fc90 	bl	8000334 <LD_WriteReg>
	return 1;
 8000a14:	2301      	movs	r3, #1
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	0800b10c 	.word	0x0800b10c
 8000a20:	20000258 	.word	0x20000258
 8000a24:	0800b124 	.word	0x0800b124

08000a28 <RunASR>:

static uint8 RunASR(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	uint8 i = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	71fb      	strb	r3, [r7, #7]
	uint8 asrflag = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 5; i++) //防止由于硬件原因导致LD3320芯片工作不正常，所以一共尝试5次启动ASR识别流程
 8000a36:	2300      	movs	r3, #0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e037      	b.n	8000aac <RunASR+0x84>
	{
		LD_Init_ASR(); //初始化ASR
 8000a3c:	f000 f9ae 	bl	8000d9c <LD_Init_ASR>
		LD3320_delay(100);
 8000a40:	2064      	movs	r0, #100	@ 0x64
 8000a42:	f7ff fc26 	bl	8000292 <LD3320_delay>
		if (LD_AsrAddFixed() == 0) //添加关键词语到LD3320芯片中
 8000a46:	f7ff fefd 	bl	8000844 <LD_AsrAddFixed>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10f      	bne.n	8000a70 <RunASR+0x48>
		{
			LD_reset(); //LD3320芯片内部出现不正常，立即重启LD3320芯片
 8000a50:	f7ff fcc4 	bl	80003dc <LD_reset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"LD_AsrAddFixed\r\n",
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	2210      	movs	r2, #16
 8000a5a:	4918      	ldr	r1, [pc, #96]	@ (8000abc <RunASR+0x94>)
 8000a5c:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <RunASR+0x98>)
 8000a5e:	f003 ff04 	bl	800486a <HAL_UART_Transmit>
													  	                       strlen("LD_AsrAddFixed\r\n"), HAL_MAX_DELAY);
			printf("LD_AsrAddFixed\r\n");
 8000a62:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <RunASR+0x9c>)
 8000a64:	f009 f9d6 	bl	8009e14 <puts>
			LD3320_delay(50); //并从初始化开始重新ASR识别流程
 8000a68:	2032      	movs	r0, #50	@ 0x32
 8000a6a:	f7ff fc12 	bl	8000292 <LD3320_delay>
			continue;
 8000a6e:	e01a      	b.n	8000aa6 <RunASR+0x7e>
		}
		LD3320_delay(10);
 8000a70:	200a      	movs	r0, #10
 8000a72:	f7ff fc0e 	bl	8000292 <LD3320_delay>
		if (LD_AsrRun() == 0)
 8000a76:	f7ff ff85 	bl	8000984 <LD_AsrRun>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d10f      	bne.n	8000aa0 <RunASR+0x78>
		{
			LD_reset(); //LD3320芯片内部出现不正常，立即重启LD3320芯片
 8000a80:	f7ff fcac 	bl	80003dc <LD_reset>
			HAL_UART_Transmit(&huart1, (uint8_t*)"LD_AsrRun\r\n",
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	220b      	movs	r2, #11
 8000a8a:	490f      	ldr	r1, [pc, #60]	@ (8000ac8 <RunASR+0xa0>)
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <RunASR+0x98>)
 8000a8e:	f003 feec 	bl	800486a <HAL_UART_Transmit>
													  	                       strlen("LD_AsrRun\r\n"), HAL_MAX_DELAY);
			printf("LD_AsrRun\r\n");
 8000a92:	480e      	ldr	r0, [pc, #56]	@ (8000acc <RunASR+0xa4>)
 8000a94:	f009 f9be 	bl	8009e14 <puts>
			LD3320_delay(50); //并从初始化开始重新ASR识别流程
 8000a98:	2032      	movs	r0, #50	@ 0x32
 8000a9a:	f7ff fbfa 	bl	8000292 <LD3320_delay>
			continue;
 8000a9e:	e002      	b.n	8000aa6 <RunASR+0x7e>
		}
		asrflag = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	71bb      	strb	r3, [r7, #6]
		break; //ASR流程启动成功，退出当前for循环。开始等待LD3320送出的中断信号
 8000aa4:	e005      	b.n	8000ab2 <RunASR+0x8a>
	for (i = 0; i < 5; i++) //防止由于硬件原因导致LD3320芯片工作不正常，所以一共尝试5次启动ASR识别流程
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	d9c4      	bls.n	8000a3c <RunASR+0x14>
	}
	return asrflag;
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	0800b138 	.word	0x0800b138
 8000ac0:	20000258 	.word	0x20000258
 8000ac4:	0800b14c 	.word	0x0800b14c
 8000ac8:	0800b15c 	.word	0x0800b15c
 8000acc:	0800b168 	.word	0x0800b168

08000ad0 <LD_GetResult>:

//ASR：读取 ASR 结果（最佳）
static uint8 LD_GetResult(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	return LD_ReadReg(0xc5);
 8000ad4:	20c5      	movs	r0, #197	@ 0xc5
 8000ad6:	f7ff fc57 	bl	8000388 <LD_ReadReg>
 8000ada:	4603      	mov	r3, r0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <ProcessInt>:

static void ProcessInt(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	uint8 nAsrResCount = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]

	ucRegVal = LD_ReadReg(0x2B); //中断请求编号	第 4 位 表示语音识别有结果产生；MCU 可清零。第 2 位 表示芯片内部 FIFO 中断发生。
 8000aea:	202b      	movs	r0, #43	@ 0x2b
 8000aec:	f7ff fc4c 	bl	8000388 <LD_ReadReg>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bec <ProcessInt+0x10c>)
 8000af6:	701a      	strb	r2, [r3, #0]

	// 语音识别产生的中断
	//（有声音输入，不论识别成功或失败都有中断）
	LD_WriteReg(0x29, 0); //中断允许（可读写）
 8000af8:	2100      	movs	r1, #0
 8000afa:	2029      	movs	r0, #41	@ 0x29
 8000afc:	f7ff fc1a 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x02, 0); //FIFO 中断允许	第 0 位：允许 FIFO_DATA 中断；第 2 位：允许 FIFO_EXT 中断；
 8000b00:	2100      	movs	r1, #0
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fc16 	bl	8000334 <LD_WriteReg>

	if ((ucRegVal & 0x10) && LD_ReadReg(0xb2) == 0x21 && LD_ReadReg(0xbf) == 0x35) //判断语音识别有结果产生 && 读取DSP 忙闲状态 && 读取ASR 状态报告寄存器 0x35，可以确定是一次语音识别流程正常结束
 8000b08:	4b38      	ldr	r3, [pc, #224]	@ (8000bec <ProcessInt+0x10c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d02a      	beq.n	8000b6a <ProcessInt+0x8a>
 8000b14:	20b2      	movs	r0, #178	@ 0xb2
 8000b16:	f7ff fc37 	bl	8000388 <LD_ReadReg>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b21      	cmp	r3, #33	@ 0x21
 8000b1e:	d124      	bne.n	8000b6a <ProcessInt+0x8a>
 8000b20:	20bf      	movs	r0, #191	@ 0xbf
 8000b22:	f7ff fc31 	bl	8000388 <LD_ReadReg>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b35      	cmp	r3, #53	@ 0x35
 8000b2a:	d11e      	bne.n	8000b6a <ProcessInt+0x8a>
	{
		nAsrResCount = LD_ReadReg(0xba); //读取中断辅助信息，语音识别有几个识别候选 N 个识别候选
 8000b2c:	20ba      	movs	r0, #186	@ 0xba
 8000b2e:	f7ff fc2b 	bl	8000388 <LD_ReadReg>
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart1, (uint8_t*)"获取结果:\r\n",
 8000b36:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	492c      	ldr	r1, [pc, #176]	@ (8000bf0 <ProcessInt+0x110>)
 8000b3e:	482d      	ldr	r0, [pc, #180]	@ (8000bf4 <ProcessInt+0x114>)
 8000b40:	f003 fe93 	bl	800486a <HAL_UART_Transmit>
															strlen("获取结果:\r\n"), HAL_MAX_DELAY);
		printf("获取结果:%d\r\n",nAsrResCount);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4619      	mov	r1, r3
 8000b48:	482b      	ldr	r0, [pc, #172]	@ (8000bf8 <ProcessInt+0x118>)
 8000b4a:	f009 f8fb 	bl	8009d44 <iprintf>
		if (nAsrResCount > 0 && nAsrResCount <= 4)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <ProcessInt+0x82>
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d803      	bhi.n	8000b62 <ProcessInt+0x82>
		{
			nAsrStatus = LD_ASR_FOUNDOK;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <ProcessInt+0x11c>)
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	701a      	strb	r2, [r3, #0]
		if (nAsrResCount > 0 && nAsrResCount <= 4)
 8000b60:	e01c      	b.n	8000b9c <ProcessInt+0xbc>
		}
		else //0 或者大于 4：没有识别候选
		{
			nAsrStatus = LD_ASR_FOUNDZERO;
 8000b62:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <ProcessInt+0x11c>)
 8000b64:	2211      	movs	r2, #17
 8000b66:	701a      	strb	r2, [r3, #0]
		if (nAsrResCount > 0 && nAsrResCount <= 4)
 8000b68:	e018      	b.n	8000b9c <ProcessInt+0xbc>
		}
	}
	else if (ucRegVal & 0x08) //第 3 位：读取值为 1 表示芯片内部已经出现错误 需重启
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <ProcessInt+0x10c>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00f      	beq.n	8000b96 <ProcessInt+0xb6>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)"芯片内部已经出现错误",
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	221e      	movs	r2, #30
 8000b7c:	4920      	ldr	r1, [pc, #128]	@ (8000c00 <ProcessInt+0x120>)
 8000b7e:	481d      	ldr	r0, [pc, #116]	@ (8000bf4 <ProcessInt+0x114>)
 8000b80:	f003 fe73 	bl	800486a <HAL_UART_Transmit>
															strlen("芯片内部已经出现错误"), HAL_MAX_DELAY);
		printf("芯片内部已经出现错误");
 8000b84:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <ProcessInt+0x120>)
 8000b86:	f009 f8dd 	bl	8009d44 <iprintf>
		LD_reset(); //复位LD3320
 8000b8a:	f7ff fc27 	bl	80003dc <LD_reset>
		nAsrStatus = LD_ASR_NONE;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <ProcessInt+0x11c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e002      	b.n	8000b9c <ProcessInt+0xbc>
	}
	else
	{
		nAsrStatus = LD_ASR_FOUNDZERO; //执行没有识别
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <ProcessInt+0x11c>)
 8000b98:	2211      	movs	r2, #17
 8000b9a:	701a      	strb	r2, [r3, #0]
	}

	LD_WriteReg(0x2b, 0); //中断请求编号（可读写）
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	202b      	movs	r0, #43	@ 0x2b
 8000ba0:	f7ff fbc8 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x1C, 0); //写0:ADC不可用
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f7ff fbc4 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x29, 0); //清空中断允许
 8000bac:	2100      	movs	r1, #0
 8000bae:	2029      	movs	r0, #41	@ 0x29
 8000bb0:	f7ff fbc0 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x02, 0); //清空FIFO 中断允许
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f7ff fbbc 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x2B, 0); //清空中断请求编号（可读写）
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	202b      	movs	r0, #43	@ 0x2b
 8000bc0:	f7ff fbb8 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0xBA, 0); //中断辅助信息，（读或设为 00）
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	20ba      	movs	r0, #186	@ 0xba
 8000bc8:	f7ff fbb4 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0xBC, 0); //ASR：识别过程强制结束
 8000bcc:	2100      	movs	r1, #0
 8000bce:	20bc      	movs	r0, #188	@ 0xbc
 8000bd0:	f7ff fbb0 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x08, 1); //清除FIFO_DATA
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	2008      	movs	r0, #8
 8000bd8:	f7ff fbac 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x08, 0); //清除FIFO_DATA后 再次写0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2008      	movs	r0, #8
 8000be0:	f7ff fba8 	bl	8000334 <LD_WriteReg>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001f6 	.word	0x200001f6
 8000bf0:	0800b174 	.word	0x0800b174
 8000bf4:	20000258 	.word	0x20000258
 8000bf8:	0800b184 	.word	0x0800b184
 8000bfc:	200001f4 	.word	0x200001f4
 8000c00:	0800b198 	.word	0x0800b198

08000c04 <LD_IRQHandler>:

void LD_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"听到声音 ",
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	220d      	movs	r2, #13
 8000c0e:	4905      	ldr	r1, [pc, #20]	@ (8000c24 <LD_IRQHandler+0x20>)
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <LD_IRQHandler+0x24>)
 8000c12:	f003 fe2a 	bl	800486a <HAL_UART_Transmit>
													strlen("听到声音 "), HAL_MAX_DELAY);
	printf("听到声音 ");
 8000c16:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <LD_IRQHandler+0x20>)
 8000c18:	f009 f894 	bl	8009d44 <iprintf>
	ProcessInt();
 8000c1c:	f7ff ff60 	bl	8000ae0 <ProcessInt>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	0800b1b8 	.word	0x0800b1b8
 8000c28:	20000258 	.word	0x20000258

08000c2c <LD_Init_Common>:

static void LD_Init_Common(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	uint8_t sta = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71fb      	strb	r3, [r7, #7]
	sta = LD_ReadReg(0x06); //FIFO 状态
 8000c36:	2006      	movs	r0, #6
 8000c38:	f7ff fba6 	bl	8000388 <LD_ReadReg>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	if (sta & 0x08){
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d009      	beq.n	8000c5e <LD_Init_Common+0x32>
		HAL_UART_Transmit(&huart1, (uint8_t*)"FIFO_DATA 已满，不能写\r\n",
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	221e      	movs	r2, #30
 8000c50:	494c      	ldr	r1, [pc, #304]	@ (8000d84 <LD_Init_Common+0x158>)
 8000c52:	484d      	ldr	r0, [pc, #308]	@ (8000d88 <LD_Init_Common+0x15c>)
 8000c54:	f003 fe09 	bl	800486a <HAL_UART_Transmit>
														strlen("FIFO_DATA 已满，不能写\r\n"), HAL_MAX_DELAY);
		printf("FIFO_DATA 已满，不能写\r\n");
 8000c58:	484c      	ldr	r0, [pc, #304]	@ (8000d8c <LD_Init_Common+0x160>)
 8000c5a:	f009 f8db 	bl	8009e14 <puts>
	}
	if (sta & 0x20){
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d009      	beq.n	8000c7c <LD_Init_Common+0x50>
		HAL_UART_Transmit(&huart1, (uint8_t*)"FIFO_EXT 已满，不能写\r\n",
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	221d      	movs	r2, #29
 8000c6e:	4948      	ldr	r1, [pc, #288]	@ (8000d90 <LD_Init_Common+0x164>)
 8000c70:	4845      	ldr	r0, [pc, #276]	@ (8000d88 <LD_Init_Common+0x15c>)
 8000c72:	f003 fdfa 	bl	800486a <HAL_UART_Transmit>
														strlen("FIFO_EXT 已满，不能写\r\n"), HAL_MAX_DELAY);
		printf("FIFO_EXT 已满，不能写\r\n");
 8000c76:	4847      	ldr	r0, [pc, #284]	@ (8000d94 <LD_Init_Common+0x168>)
 8000c78:	f009 f8cc 	bl	8009e14 <puts>
	}
	LD_WriteReg(0x17, 0x35); //写 35H 对 LD3320 进行软复位（Soft Reset）
 8000c7c:	2135      	movs	r1, #53	@ 0x35
 8000c7e:	2017      	movs	r0, #23
 8000c80:	f7ff fb58 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 8000c84:	2005      	movs	r0, #5
 8000c86:	f7ff fb04 	bl	8000292 <LD3320_delay>
	sta = LD_ReadReg(0x06); //FIFO 状态
 8000c8a:	2006      	movs	r0, #6
 8000c8c:	f7ff fb7c 	bl	8000388 <LD_ReadReg>
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
	if (sta & 0x08){
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d009      	beq.n	8000cb2 <LD_Init_Common+0x86>
		HAL_UART_Transmit(&huart1, (uint8_t*)"FIFO_DATA 已满，不能写\r\n",
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	221e      	movs	r2, #30
 8000ca4:	4937      	ldr	r1, [pc, #220]	@ (8000d84 <LD_Init_Common+0x158>)
 8000ca6:	4838      	ldr	r0, [pc, #224]	@ (8000d88 <LD_Init_Common+0x15c>)
 8000ca8:	f003 fddf 	bl	800486a <HAL_UART_Transmit>
														strlen("FIFO_DATA 已满，不能写\r\n"), HAL_MAX_DELAY);
		printf("FIFO_DATA 已满，不能写\r\n");
 8000cac:	4837      	ldr	r0, [pc, #220]	@ (8000d8c <LD_Init_Common+0x160>)
 8000cae:	f009 f8b1 	bl	8009e14 <puts>
	}
	if (sta & 0x20){
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 0320 	and.w	r3, r3, #32
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d009      	beq.n	8000cd0 <LD_Init_Common+0xa4>
		HAL_UART_Transmit(&huart1, (uint8_t*)"FIFO_EXT 已满，不能写\r\n",
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	221d      	movs	r2, #29
 8000cc2:	4933      	ldr	r1, [pc, #204]	@ (8000d90 <LD_Init_Common+0x164>)
 8000cc4:	4830      	ldr	r0, [pc, #192]	@ (8000d88 <LD_Init_Common+0x15c>)
 8000cc6:	f003 fdd0 	bl	800486a <HAL_UART_Transmit>
														strlen("FIFO_EXT 已满，不能写\r\n"), HAL_MAX_DELAY);
		printf("FIFO_EXT 已满，不能写\r\n");
 8000cca:	4832      	ldr	r0, [pc, #200]	@ (8000d94 <LD_Init_Common+0x168>)
 8000ccc:	f009 f8a2 	bl	8009e14 <puts>
	}

	LD_WriteReg(0x89, 0x03); //模拟电路控制 初始化
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	2089      	movs	r0, #137	@ 0x89
 8000cd4:	f7ff fb2e 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 8000cd8:	2005      	movs	r0, #5
 8000cda:	f7ff fada 	bl	8000292 <LD3320_delay>
	LD_WriteReg(0xCF, 0x43); //内部省电模式设置 初始化写入 43H
 8000cde:	2143      	movs	r1, #67	@ 0x43
 8000ce0:	20cf      	movs	r0, #207	@ 0xcf
 8000ce2:	f7ff fb27 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 8000ce6:	2005      	movs	r0, #5
 8000ce8:	f7ff fad3 	bl	8000292 <LD3320_delay>
	LD_WriteReg(0xCB, 0x02);
 8000cec:	2102      	movs	r1, #2
 8000cee:	20cb      	movs	r0, #203	@ 0xcb
 8000cf0:	f7ff fb20 	bl	8000334 <LD_WriteReg>

	/*PLL setting*/
	LD_WriteReg(0x11, LD_PLL_11); //时钟频率设置 1
 8000cf4:	210b      	movs	r1, #11
 8000cf6:	2011      	movs	r0, #17
 8000cf8:	f7ff fb1c 	bl	8000334 <LD_WriteReg>
	if (nLD_Mode == LD_MODE_MP3)  //判断当前进行ASR识别还是在播放MP3
 8000cfc:	4b26      	ldr	r3, [pc, #152]	@ (8000d98 <LD_Init_Common+0x16c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b40      	cmp	r3, #64	@ 0x40
 8000d02:	d110      	bne.n	8000d26 <LD_Init_Common+0xfa>
	{
		LD_WriteReg(0x1E, 0x00);
 8000d04:	2100      	movs	r1, #0
 8000d06:	201e      	movs	r0, #30
 8000d08:	f7ff fb14 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x19, LD_PLL_MP3_19);
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	2019      	movs	r0, #25
 8000d10:	f7ff fb10 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x1B, LD_PLL_MP3_1B);
 8000d14:	2118      	movs	r1, #24
 8000d16:	201b      	movs	r0, #27
 8000d18:	f7ff fb0c 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x1D, LD_PLL_MP3_1D);
 8000d1c:	212c      	movs	r1, #44	@ 0x2c
 8000d1e:	201d      	movs	r0, #29
 8000d20:	f7ff fb08 	bl	8000334 <LD_WriteReg>
 8000d24:	e00f      	b.n	8000d46 <LD_Init_Common+0x11a>
	}
	else
	{
		LD_WriteReg(0x1E, 0x00);		  //ADC 专用控制，应初始化为 00H
 8000d26:	2100      	movs	r1, #0
 8000d28:	201e      	movs	r0, #30
 8000d2a:	f7ff fb03 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x19, LD_PLL_ASR_19); //时钟频率设置 2
 8000d2e:	213f      	movs	r1, #63	@ 0x3f
 8000d30:	2019      	movs	r0, #25
 8000d32:	f7ff faff 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x1B, LD_PLL_ASR_1B); //时钟频率设置 3
 8000d36:	2148      	movs	r1, #72	@ 0x48
 8000d38:	201b      	movs	r0, #27
 8000d3a:	f7ff fafb 	bl	8000334 <LD_WriteReg>
		LD_WriteReg(0x1D, LD_PLL_ASR_1D); //时钟频率设置 4
 8000d3e:	211f      	movs	r1, #31
 8000d40:	201d      	movs	r0, #29
 8000d42:	f7ff faf7 	bl	8000334 <LD_WriteReg>
	}
	LD3320_delay(5);
 8000d46:	2005      	movs	r0, #5
 8000d48:	f7ff faa3 	bl	8000292 <LD3320_delay>

	LD_WriteReg(0xCD, 0x04); //DSP 休眠设置,初始化时写入 04H 允许 DSP 休眠。
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	20cd      	movs	r0, #205	@ 0xcd
 8000d50:	f7ff faf0 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x17, 0x4c); //写 4CH 可以使 DSP 休眠，比较省电。
 8000d54:	214c      	movs	r1, #76	@ 0x4c
 8000d56:	2017      	movs	r0, #23
 8000d58:	f7ff faec 	bl	8000334 <LD_WriteReg>
	LD3320_delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fa98 	bl	8000292 <LD3320_delay>
	LD_WriteReg(0xB9, 0x00); //ASR：当前添加识别句的字符串长度（拼音字符串） 初始化时写入 00H
 8000d62:	2100      	movs	r1, #0
 8000d64:	20b9      	movs	r0, #185	@ 0xb9
 8000d66:	f7ff fae5 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0xCF, 0x4F); //内部省电模式设置 MP3 初始化和 ASR 初始化时写入 4FH
 8000d6a:	214f      	movs	r1, #79	@ 0x4f
 8000d6c:	20cf      	movs	r0, #207	@ 0xcf
 8000d6e:	f7ff fae1 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x6F, 0xFF); //对芯片进行初始化时设置为 0xFF
 8000d72:	21ff      	movs	r1, #255	@ 0xff
 8000d74:	206f      	movs	r0, #111	@ 0x6f
 8000d76:	f7ff fadd 	bl	8000334 <LD_WriteReg>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0800b1c8 	.word	0x0800b1c8
 8000d88:	20000258 	.word	0x20000258
 8000d8c:	0800b1e8 	.word	0x0800b1e8
 8000d90:	0800b208 	.word	0x0800b208
 8000d94:	0800b228 	.word	0x0800b228
 8000d98:	200001f5 	.word	0x200001f5

08000d9c <LD_Init_ASR>:

static void LD_Init_ASR(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	nLD_Mode = LD_MODE_ASR_RUN;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <LD_Init_ASR+0x70>)
 8000da2:	2208      	movs	r2, #8
 8000da4:	701a      	strb	r2, [r3, #0]
	LD_Init_Common();
 8000da6:	f7ff ff41 	bl	8000c2c <LD_Init_Common>

	LD_WriteReg(0xBD, 0x00); //初始化控制寄存器 写入 00H；然后启动；为 ASR 模块；
 8000daa:	2100      	movs	r1, #0
 8000dac:	20bd      	movs	r0, #189	@ 0xbd
 8000dae:	f7ff fac1 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x17, 0x48); //写 48H 可以激活 DSP；
 8000db2:	2148      	movs	r1, #72	@ 0x48
 8000db4:	2017      	movs	r0, #23
 8000db6:	f7ff fabd 	bl	8000334 <LD_WriteReg>
	LD3320_delay(5);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f7ff fa69 	bl	8000292 <LD3320_delay>
	LD_WriteReg(0x3C, 0x80); //FIFO_EXT 下限低 8 位（LowerBoundary L）
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	203c      	movs	r0, #60	@ 0x3c
 8000dc4:	f7ff fab6 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x3E, 0x07); //FIFO_EXT 下限高 8 位（LowerBoundary H）
 8000dc8:	2107      	movs	r1, #7
 8000dca:	203e      	movs	r0, #62	@ 0x3e
 8000dcc:	f7ff fab2 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x38, 0xff); //FIFO_EXT 上限低 8 位（UpperBoundary L）
 8000dd0:	21ff      	movs	r1, #255	@ 0xff
 8000dd2:	2038      	movs	r0, #56	@ 0x38
 8000dd4:	f7ff faae 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x3A, 0x07); //FIFO_EXT 上限高 8 位（UpperBoundary L）
 8000dd8:	2107      	movs	r1, #7
 8000dda:	203a      	movs	r0, #58	@ 0x3a
 8000ddc:	f7ff faaa 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x40, 0);	 //FIFO_EXT MCU 水线低 8 位（MCU water mark L）
 8000de0:	2100      	movs	r1, #0
 8000de2:	2040      	movs	r0, #64	@ 0x40
 8000de4:	f7ff faa6 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x42, 8);	 //FIFO_EXT MCU 水线高 8 位（MCU water mark H）
 8000de8:	2108      	movs	r1, #8
 8000dea:	2042      	movs	r0, #66	@ 0x42
 8000dec:	f7ff faa2 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x44, 0);	 //FIFO_EXT DSP 水线低 8 位（DSP water mark L）
 8000df0:	2100      	movs	r1, #0
 8000df2:	2044      	movs	r0, #68	@ 0x44
 8000df4:	f7ff fa9e 	bl	8000334 <LD_WriteReg>
	LD_WriteReg(0x46, 8);	 //FIFO_EXT DSP 水线高 8 位（DSP water mark H）
 8000df8:	2108      	movs	r1, #8
 8000dfa:	2046      	movs	r0, #70	@ 0x46
 8000dfc:	f7ff fa9a 	bl	8000334 <LD_WriteReg>
	LD3320_delay(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fa46 	bl	8000292 <LD3320_delay>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001f5 	.word	0x200001f5

08000e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	4b37      	ldr	r3, [pc, #220]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a36      	ldr	r2, [pc, #216]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b34      	ldr	r3, [pc, #208]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3c:	4b31      	ldr	r3, [pc, #196]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a30      	ldr	r2, [pc, #192]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b2b      	ldr	r3, [pc, #172]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a2a      	ldr	r2, [pc, #168]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e5a:	f043 0304 	orr.w	r3, r3, #4
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a24      	ldr	r2, [pc, #144]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <MX_GPIO_Init+0xf4>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0308 	and.w	r3, r3, #8
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e8a:	481f      	ldr	r0, [pc, #124]	@ (8000f08 <MX_GPIO_Init+0xf8>)
 8000e8c:	f000 ff60 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD3320_WR_Pin|LD3320_RST_Pin|LD3320_CS_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	211a      	movs	r1, #26
 8000e94:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <MX_GPIO_Init+0xfc>)
 8000e96:	f000 ff5b 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4815      	ldr	r0, [pc, #84]	@ (8000f08 <MX_GPIO_Init+0xf8>)
 8000eb4:	f000 fdc8 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3320_WR_Pin LD3320_RST_Pin LD3320_CS_Pin */
  GPIO_InitStruct.Pin = LD3320_WR_Pin|LD3320_RST_Pin|LD3320_CS_Pin;
 8000eb8:	231a      	movs	r3, #26
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480f      	ldr	r0, [pc, #60]	@ (8000f0c <MX_GPIO_Init+0xfc>)
 8000ed0:	f000 fdba 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3320_IRQ_Pin */
  GPIO_InitStruct.Pin = LD3320_IRQ_Pin;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <MX_GPIO_Init+0x100>)
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3320_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <MX_GPIO_Init+0xfc>)
 8000ee8:	f000 fdae 	bl	8001a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2105      	movs	r1, #5
 8000ef0:	2008      	movs	r0, #8
 8000ef2:	f000 fcc0 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ef6:	2008      	movs	r0, #8
 8000ef8:	f000 fcd9 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 8000efc:	bf00      	nop
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40011000 	.word	0x40011000
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	10210000 	.word	0x10210000

08000f14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f18:	f000 fb50 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1c:	f000 f81e 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f20:	f7ff ff76 	bl	8000e10 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f24:	f000 f888 	bl	8001038 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f28:	f000 fa3e 	bl	80013a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f2c:	f000 fa66 	bl	80013fc <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000f30:	f008 f9c8 	bl	80092c4 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"run LD3320 main\r\n",
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	2211      	movs	r2, #17
 8000f3a:	4905      	ldr	r1, [pc, #20]	@ (8000f50 <main+0x3c>)
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <main+0x40>)
 8000f3e:	f003 fc94 	bl	800486a <HAL_UART_Transmit>
	                                   strlen("run LD3320 main\r\n"), HAL_MAX_DELAY);

	  if (!MP3_reg) {
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <main+0x44>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f4      	bne.n	8000f34 <main+0x20>
	  LD3320_main();
 8000f4a:	f7ff fa75 	bl	8000438 <LD3320_main>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"run LD3320 main\r\n",
 8000f4e:	e7f1      	b.n	8000f34 <main+0x20>
 8000f50:	0800b248 	.word	0x0800b248
 8000f54:	20000258 	.word	0x20000258
 8000f58:	200001f8 	.word	0x200001f8

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f66:	2228      	movs	r2, #40	@ 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 f866 	bl	800a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fc5c 	bl	8003870 <HAL_RCC_OscConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fbe:	f000 f835 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fec8 	bl	8003d74 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fea:	f000 f81f 	bl	800102c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 f849 	bl	8004090 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001004:	f000 f812 	bl	800102c <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	@ 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_2){
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d101      	bne.n	8001024 <HAL_GPIO_EXTI_Callback+0x14>

    	LD_IRQHandler();
 8001020:	f7ff fdf0 	bl	8000c04 <LD_IRQHandler>
    }
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <Error_Handler+0x8>

08001038 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800103c:	4b17      	ldr	r3, [pc, #92]	@ (800109c <MX_SPI1_Init+0x64>)
 800103e:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <MX_SPI1_Init+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <MX_SPI1_Init+0x64>)
 8001044:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001048:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <MX_SPI1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <MX_SPI1_Init+0x64>)
 8001058:	2202      	movs	r2, #2
 800105a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <MX_SPI1_Init+0x64>)
 8001064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001068:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <MX_SPI1_Init+0x64>)
 800106c:	2208      	movs	r2, #8
 800106e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001070:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	@ (800109c <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <MX_SPI1_Init+0x64>)
 8001084:	220a      	movs	r2, #10
 8001086:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <MX_SPI1_Init+0x64>)
 800108a:	f003 f8b7 	bl	80041fc <HAL_SPI_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001094:	f7ff ffca 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	40013000 	.word	0x40013000

080010a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <HAL_SPI_MspInit+0x88>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d12f      	bne.n	8001124 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <HAL_SPI_MspInit+0x8c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <HAL_SPI_MspInit+0x8c>)
 80010ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_SPI_MspInit+0x8c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_SPI_MspInit+0x8c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <HAL_SPI_MspInit+0x8c>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_SPI_MspInit+0x8c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010f4:	23a0      	movs	r3, #160	@ 0xa0
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	480b      	ldr	r0, [pc, #44]	@ (8001134 <HAL_SPI_MspInit+0x90>)
 8001108:	f000 fc9e 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800110c:	2340      	movs	r3, #64	@ 0x40
 800110e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <HAL_SPI_MspInit+0x90>)
 8001120:	f000 fc92 	bl	8001a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013000 	.word	0x40013000
 8001130:	40021000 	.word	0x40021000
 8001134:	40010800 	.word	0x40010800

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <HAL_MspInit+0x6c>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <HAL_MspInit+0x6c>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_MspInit+0x6c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_MspInit+0x6c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <HAL_MspInit+0x6c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_MspInit+0x6c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2005      	movs	r0, #5
 8001174:	f000 fb7f 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001178:	2005      	movs	r0, #5
 800117a:	f000 fb98 	bl	80018ae <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_MspInit+0x70>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <HAL_MspInit+0x70>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <NMI_Handler+0x4>

080011b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <MemManage_Handler+0x4>

080011c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fc:	f000 fa24 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LD3320_IRQ_Pin);
 8001214:	2004      	movs	r0, #4
 8001216:	f000 fdb3 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001226:	f000 fedf 	bl	8001fe8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000fb4 	.word	0x20000fb4

08001234 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800123a:	f000 fed5 	bl	8001fe8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000fb4 	.word	0x20000fb4

08001248 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800124c:	4802      	ldr	r0, [pc, #8]	@ (8001258 <USART3_IRQHandler+0x10>)
 800124e:	f003 fc2f 	bl	8004ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002a0 	.word	0x200002a0

0800125c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00a      	b.n	8001284 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800126e:	f3af 8000 	nop.w
 8001272:	4601      	mov	r1, r0
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	b2ca      	uxtb	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf0      	blt.n	800126e <_read+0x12>
  }

  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e009      	b.n	80012bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	60ba      	str	r2, [r7, #8]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbf1      	blt.n	80012a8 <_write+0x12>
  }
  return len;
 80012c4:	687b      	ldr	r3, [r7, #4]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_close>:

int _close(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f4:	605a      	str	r2, [r3, #4]
  return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <_isatty>:

int _isatty(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f008 feba 	bl	800a0d8 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20005000 	.word	0x20005000
 8001390:	00000400 	.word	0x00000400
 8001394:	20000254 	.word	0x20000254
 8001398:	200015f8 	.word	0x200015f8

0800139c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <MX_USART1_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_USART1_UART_Init+0x4c>)
 80013e0:	f003 f9f3 	bl	80047ca <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f7ff fe1f 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000258 	.word	0x20000258
 80013f8:	40013800 	.word	0x40013800

080013fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <MX_USART3_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001408:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800140c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_USART3_UART_Init+0x4c>)
 8001434:	f003 f9c9 	bl	80047ca <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f7ff fdf5 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200002a0 	.word	0x200002a0
 800144c:	40004800 	.word	0x40004800

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a3c      	ldr	r2, [pc, #240]	@ (800155c <HAL_UART_MspInit+0x10c>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d132      	bne.n	80014d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001470:	4b3b      	ldr	r3, [pc, #236]	@ (8001560 <HAL_UART_MspInit+0x110>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a3a      	ldr	r2, [pc, #232]	@ (8001560 <HAL_UART_MspInit+0x110>)
 8001476:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b38      	ldr	r3, [pc, #224]	@ (8001560 <HAL_UART_MspInit+0x110>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b35      	ldr	r3, [pc, #212]	@ (8001560 <HAL_UART_MspInit+0x110>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a34      	ldr	r2, [pc, #208]	@ (8001560 <HAL_UART_MspInit+0x110>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <HAL_UART_MspInit+0x110>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	4619      	mov	r1, r3
 80014b4:	482b      	ldr	r0, [pc, #172]	@ (8001564 <HAL_UART_MspInit+0x114>)
 80014b6:	f000 fac7 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4825      	ldr	r0, [pc, #148]	@ (8001564 <HAL_UART_MspInit+0x114>)
 80014d0:	f000 faba 	bl	8001a48 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014d4:	e03e      	b.n	8001554 <HAL_UART_MspInit+0x104>
  else if(uartHandle->Instance==USART3)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a23      	ldr	r2, [pc, #140]	@ (8001568 <HAL_UART_MspInit+0x118>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d139      	bne.n	8001554 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <HAL_UART_MspInit+0x110>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001560 <HAL_UART_MspInit+0x110>)
 80014e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ea:	61d3      	str	r3, [r2, #28]
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <HAL_UART_MspInit+0x110>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <HAL_UART_MspInit+0x110>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a18      	ldr	r2, [pc, #96]	@ (8001560 <HAL_UART_MspInit+0x110>)
 80014fe:	f043 0308 	orr.w	r3, r3, #8
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <HAL_UART_MspInit+0x110>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001510:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4619      	mov	r1, r3
 8001524:	4811      	ldr	r0, [pc, #68]	@ (800156c <HAL_UART_MspInit+0x11c>)
 8001526:	f000 fa8f 	bl	8001a48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800152a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	@ (800156c <HAL_UART_MspInit+0x11c>)
 8001540:	f000 fa82 	bl	8001a48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2027      	movs	r0, #39	@ 0x27
 800154a:	f000 f994 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800154e:	2027      	movs	r0, #39	@ 0x27
 8001550:	f000 f9ad 	bl	80018ae <HAL_NVIC_EnableIRQ>
}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	@ 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40013800 	.word	0x40013800
 8001560:	40021000 	.word	0x40021000
 8001564:	40010800 	.word	0x40010800
 8001568:	40004800 	.word	0x40004800
 800156c:	40010c00 	.word	0x40010c00

08001570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001570:	f7ff ff14 	bl	800139c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480b      	ldr	r0, [pc, #44]	@ (80015a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001576:	490c      	ldr	r1, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001578:	4a0c      	ldr	r2, [pc, #48]	@ (80015ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800158c:	4c09      	ldr	r4, [pc, #36]	@ (80015b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159a:	f008 fda3 	bl	800a0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159e:	f7ff fcb9 	bl	8000f14 <main>
  bx lr
 80015a2:	4770      	bx	lr
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80015ac:	0800b314 	.word	0x0800b314
  ldr r2, =_sbss
 80015b0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80015b4:	200015f8 	.word	0x200015f8

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <HAL_Init+0x28>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_Init+0x28>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f947 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fdae 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f95f 	bl	80018ca <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f927 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	@ (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x1c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <HAL_IncTick+0x20>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a03      	ldr	r2, [pc, #12]	@ (8001668 <HAL_IncTick+0x20>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000008 	.word	0x20000008
 8001668:	200002e8 	.word	0x200002e8

0800166c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b02      	ldr	r3, [pc, #8]	@ (800167c <HAL_GetTick+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200002e8 	.word	0x200002e8

08001680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7ff fff0 	bl	800166c <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d005      	beq.n	80016a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_Delay+0x44>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a6:	bf00      	nop
 80016a8:	f7ff ffe0 	bl	800166c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d8f7      	bhi.n	80016a8 <HAL_Delay+0x28>
  {
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000008 	.word	0x20000008

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4906      	ldr	r1, [pc, #24]	@ (8001760 <__NVIC_EnableIRQ+0x34>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	@ (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	@ 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff90 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	@ (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	@ (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff2d 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff42 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff90 	bl	80017b8 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5f 	bl	8001764 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff35 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d008      	beq.n	800190c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2204      	movs	r2, #4
 80018fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e020      	b.n	800194e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 020e 	bic.w	r2, r2, #14
 800191a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001934:	2101      	movs	r1, #1
 8001936:	fa01 f202 	lsl.w	r2, r1, r2
 800193a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d005      	beq.n	800197c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2204      	movs	r2, #4
 8001974:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
 800197a:	e051      	b.n	8001a20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 020e 	bic.w	r2, r2, #14
 800198a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a22      	ldr	r2, [pc, #136]	@ (8001a2c <HAL_DMA_Abort_IT+0xd4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d029      	beq.n	80019fa <HAL_DMA_Abort_IT+0xa2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <HAL_DMA_Abort_IT+0xd8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x9e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <HAL_DMA_Abort_IT+0xdc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x98>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <HAL_DMA_Abort_IT+0xe0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d012      	beq.n	80019ea <HAL_DMA_Abort_IT+0x92>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a3c <HAL_DMA_Abort_IT+0xe4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00a      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x8c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a40 <HAL_DMA_Abort_IT+0xe8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <HAL_DMA_Abort_IT+0x86>
 80019d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80019dc:	e00e      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019e2:	e00b      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e8:	e008      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ee:	e005      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f4:	e002      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019f6:	2310      	movs	r3, #16
 80019f8:	e000      	b.n	80019fc <HAL_DMA_Abort_IT+0xa4>
 80019fa:	2301      	movs	r3, #1
 80019fc:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <HAL_DMA_Abort_IT+0xec>)
 80019fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
    } 
  }
  return status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40020008 	.word	0x40020008
 8001a30:	4002001c 	.word	0x4002001c
 8001a34:	40020030 	.word	0x40020030
 8001a38:	40020044 	.word	0x40020044
 8001a3c:	40020058 	.word	0x40020058
 8001a40:	4002006c 	.word	0x4002006c
 8001a44:	40020000 	.word	0x40020000

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b08b      	sub	sp, #44	@ 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	e169      	b.n	8001d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8158 	bne.w	8001d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a9a      	ldr	r2, [pc, #616]	@ (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d05e      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a84:	4a98      	ldr	r2, [pc, #608]	@ (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d875      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a98      	ldr	r2, [pc, #608]	@ (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d058      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a90:	4a96      	ldr	r2, [pc, #600]	@ (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d86f      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a96:	4a96      	ldr	r2, [pc, #600]	@ (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d052      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a94      	ldr	r2, [pc, #592]	@ (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d869      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a94      	ldr	r2, [pc, #592]	@ (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04c      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a92      	ldr	r2, [pc, #584]	@ (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d863      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aae:	4a92      	ldr	r2, [pc, #584]	@ (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d046      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a90      	ldr	r2, [pc, #576]	@ (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d85d      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d82a      	bhi.n	8001b14 <HAL_GPIO_Init+0xcc>
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d859      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac8 <HAL_GPIO_Init+0x80>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b43 	.word	0x08001b43
 8001acc:	08001b1d 	.word	0x08001b1d
 8001ad0:	08001b2f 	.word	0x08001b2f
 8001ad4:	08001b71 	.word	0x08001b71
 8001ad8:	08001b77 	.word	0x08001b77
 8001adc:	08001b77 	.word	0x08001b77
 8001ae0:	08001b77 	.word	0x08001b77
 8001ae4:	08001b77 	.word	0x08001b77
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b77 	.word	0x08001b77
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b77 	.word	0x08001b77
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b77 	.word	0x08001b77
 8001b04:	08001b77 	.word	0x08001b77
 8001b08:	08001b77 	.word	0x08001b77
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b39 	.word	0x08001b39
 8001b14:	4a79      	ldr	r2, [pc, #484]	@ (8001cfc <HAL_GPIO_Init+0x2b4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1a:	e02c      	b.n	8001b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e029      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e024      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e01f      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e01a      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e013      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	611a      	str	r2, [r3, #16]
          break;
 8001b62:	e009      	b.n	8001b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
          break;
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          break;
 8001b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	@ 0xff
 8001b7c:	d801      	bhi.n	8001b82 <HAL_GPIO_Init+0x13a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_Init+0x13e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	@ 0xff
 8001b8c:	d802      	bhi.n	8001b94 <HAL_GPIO_Init+0x14c>
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x152>
 8001b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b96:	3b08      	subs	r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80b1 	beq.w	8001d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be0:	4a48      	ldr	r2, [pc, #288]	@ (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a40      	ldr	r2, [pc, #256]	@ (8001d08 <HAL_GPIO_Init+0x2c0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x1ec>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1e8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3e      	ldr	r2, [pc, #248]	@ (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1e4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e004      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c34:	2300      	movs	r3, #0
 8001c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c38:	f002 0203 	and.w	r2, r2, #3
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c46:	492f      	ldr	r1, [pc, #188]	@ (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c60:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	492c      	ldr	r1, [pc, #176]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4928      	ldr	r1, [pc, #160]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4922      	ldr	r1, [pc, #136]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	491e      	ldr	r1, [pc, #120]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4918      	ldr	r1, [pc, #96]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cbe:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4914      	ldr	r1, [pc, #80]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d021      	beq.n	8001d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	490e      	ldr	r1, [pc, #56]	@ (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e021      	b.n	8001d2a <HAL_GPIO_Init+0x2e2>
 8001ce6:	bf00      	nop
 8001ce8:	10320000 	.word	0x10320000
 8001cec:	10310000 	.word	0x10310000
 8001cf0:	10220000 	.word	0x10220000
 8001cf4:	10210000 	.word	0x10210000
 8001cf8:	10120000 	.word	0x10120000
 8001cfc:	10110000 	.word	0x10110000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40010c00 	.word	0x40010c00
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40011400 	.word	0x40011400
 8001d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_GPIO_Init+0x304>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4909      	ldr	r1, [pc, #36]	@ (8001d4c <HAL_GPIO_Init+0x304>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f ae8e 	bne.w	8001a5c <HAL_GPIO_Init+0x14>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	@ 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d8a:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d96:	4a05      	ldr	r2, [pc, #20]	@ (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f936 	bl	8001010 <HAL_GPIO_EXTI_Callback>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e8      	b.n	8001f94 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f007 fc40 	bl	800965c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2203      	movs	r2, #3
 8001de0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fbbb 	bl	800556a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dfe:	f003 fb91 	bl	8005524 <USB_CoreInit>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0bf      	b.n	8001f94 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fbbf 	bl	800559e <USB_SetCurrentMode>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0b0      	b.n	8001f94 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e03e      	b.n	8001eb6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3311      	adds	r3, #17
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	440b      	add	r3, r1
 8001e5a:	3310      	adds	r3, #16
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3313      	adds	r3, #19
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3320      	adds	r3, #32
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3324      	adds	r3, #36	@ 0x24
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	791b      	ldrb	r3, [r3, #4]
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3bb      	bcc.n	8001e38 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e044      	b.n	8001f50 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d3b5      	bcc.n	8001ec6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f64:	f003 fb27 	bl	80055b6 <USB_DevInit>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00c      	b.n	8001f94 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f005 fda6 	bl	8007ade <USB_DevDisconnect>

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_PCD_Start+0x16>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e016      	b.n	8001fe0 <HAL_PCD_Start+0x44>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fabd 	bl	800553e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f007 fdc3 	bl	8009b52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f005 fd7a 	bl	8007aca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f005 fd7c 	bl	8007af2 <USB_ReadInterrupts>
 8001ffa:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fb1a 	bl	8002640 <PCD_EP_ISR_Handler>

    return;
 800200c:	e119      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002020:	b29a      	uxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202a:	b292      	uxth	r2, r2
 800202c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f007 fb96 	bl	8009762 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f905 	bl	8002248 <HAL_PCD_SetAddress>

    return;
 800203e:	e100      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002062:	e0ee      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002080:	b292      	uxth	r2, r2
 8002082:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002086:	e0dc      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d027      	beq.n	80020e2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0204 	bic.w	r2, r2, #4
 80020a4:	b292      	uxth	r2, r2
 80020a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f007 fb86 	bl	80097d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020da:	b292      	uxth	r2, r2
 80020dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020e0:	e0af      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8083 	beq.w	80021f4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80020ee:	2300      	movs	r3, #0
 80020f0:	77fb      	strb	r3, [r7, #31]
 80020f2:	e010      	b.n	8002116 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	441a      	add	r2, r3
 8002100:	7ffb      	ldrb	r3, [r7, #31]
 8002102:	8812      	ldrh	r2, [r2, #0]
 8002104:	b292      	uxth	r2, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	3320      	adds	r3, #32
 800210a:	443b      	add	r3, r7
 800210c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	3301      	adds	r3, #1
 8002114:	77fb      	strb	r3, [r7, #31]
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	2b07      	cmp	r3, #7
 800211a:	d9eb      	bls.n	80020f4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002124:	b29a      	uxth	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	b292      	uxth	r2, r2
 8002130:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	b292      	uxth	r2, r2
 8002148:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800214c:	bf00      	nop
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002156:	b29b      	uxth	r3, r3
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f6      	beq.n	800214e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002172:	b292      	uxth	r2, r2
 8002174:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
 800217c:	e00f      	b.n	800219e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800217e:	7ffb      	ldrb	r3, [r7, #31]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4611      	mov	r1, r2
 8002186:	7ffa      	ldrb	r2, [r7, #31]
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	440a      	add	r2, r1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	3320      	adds	r3, #32
 8002190:	443b      	add	r3, r7
 8002192:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002196:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	3301      	adds	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	d9ec      	bls.n	800217e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ce:	b292      	uxth	r2, r2
 80021d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0204 	orr.w	r2, r2, #4
 80021e6:	b292      	uxth	r2, r2
 80021e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f007 fad7 	bl	80097a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80021f2:	e026      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00f      	beq.n	800221e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002210:	b292      	uxth	r2, r2
 8002212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f007 fa95 	bl	8009746 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800221c:	e011      	b.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00c      	beq.n	8002242 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800223a:	b292      	uxth	r2, r2
 800223c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002240:	bf00      	nop
  }
}
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_PCD_SetAddress+0x1a>
 800225e:	2302      	movs	r3, #2
 8002260:	e012      	b.n	8002288 <HAL_PCD_SetAddress+0x40>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f005 fc13 	bl	8007aa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	70fb      	strb	r3, [r7, #3]
 80022a2:	460b      	mov	r3, r1
 80022a4:	803b      	strh	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da0e      	bge.n	80022d4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 0207 	and.w	r2, r3, #7
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3310      	adds	r3, #16
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	705a      	strb	r2, [r3, #1]
 80022d2:	e00e      	b.n	80022f2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 0207 	and.w	r2, r3, #7
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022fe:	883a      	ldrh	r2, [r7, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	78ba      	ldrb	r2, [r7, #2]
 8002308:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800230a:	78bb      	ldrb	r3, [r7, #2]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d102      	bne.n	8002316 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_PCD_EP_Open+0x94>
 8002320:	2302      	movs	r3, #2
 8002322:	e00e      	b.n	8002342 <HAL_PCD_EP_Open+0xb2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 f95c 	bl	80055f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002340:	7afb      	ldrb	r3, [r7, #11]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0e      	bge.n	800237c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 0207 	and.w	r2, r3, #7
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	3310      	adds	r3, #16
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	705a      	strb	r2, [r3, #1]
 800237a:	e00e      	b.n	800239a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	f003 0207 	and.w	r2, r3, #7
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_PCD_EP_Close+0x6a>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e00e      	b.n	80023d2 <HAL_PCD_EP_Close+0x88>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 fcd4 	bl	8005d70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	460b      	mov	r3, r1
 80023e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ea:	7afb      	ldrb	r3, [r7, #11]
 80023ec:	f003 0207 	and.w	r2, r3, #7
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2200      	movs	r2, #0
 8002418:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	b2da      	uxtb	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fe8b 	bl	8006148 <USB_EPStartXfer>

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 0207 	and.w	r2, r3, #7
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	440b      	add	r3, r1
 800245a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	460b      	mov	r3, r1
 8002478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247a:	7afb      	ldrb	r3, [r7, #11]
 800247c:	f003 0207 	and.w	r2, r3, #7
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	3310      	adds	r3, #16
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2201      	movs	r2, #1
 80024b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6979      	ldr	r1, [r7, #20]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fe3d 	bl	8006148 <USB_EPStartXfer>

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	7912      	ldrb	r2, [r2, #4]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e04c      	b.n	8002590 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	da0e      	bge.n	800251c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	f003 0207 	and.w	r2, r3, #7
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	3310      	adds	r3, #16
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	705a      	strb	r2, [r3, #1]
 800251a:	e00c      	b.n	8002536 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	b2da      	uxtb	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_PCD_EP_SetStall+0x7e>
 8002552:	2302      	movs	r3, #2
 8002554:	e01c      	b.n	8002590 <HAL_PCD_EP_SetStall+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	4618      	mov	r0, r3
 8002566:	f005 f9a0 	bl	80078aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	2b00      	cmp	r3, #0
 8002572:	d108      	bne.n	8002586 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f005 fac5 	bl	8007b10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	7912      	ldrb	r2, [r2, #4]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e040      	b.n	8002638 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da0e      	bge.n	80025dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 0207 	and.w	r2, r3, #7
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	3310      	adds	r3, #16
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2201      	movs	r2, #1
 80025d8:	705a      	strb	r2, [r3, #1]
 80025da:	e00e      	b.n	80025fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 0207 	and.w	r2, r3, #7
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_PCD_EP_ClrStall+0x82>
 8002616:	2302      	movs	r3, #2
 8002618:	e00e      	b.n	8002638 <HAL_PCD_EP_ClrStall+0xa0>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	f005 f98e 	bl	800794a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b096      	sub	sp, #88	@ 0x58
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002648:	e3bb      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002652:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002656:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002664:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 8175 	bne.w	8002958 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800266e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d14e      	bne.n	8002718 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268a:	81fb      	strh	r3, [r7, #14]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	89fb      	ldrh	r3, [r7, #14]
 8002692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269a:	b29b      	uxth	r3, r3
 800269c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3310      	adds	r3, #16
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	3302      	adds	r3, #2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	441a      	add	r2, r3
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026de:	2100      	movs	r1, #0
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f007 f816 	bl	8009712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7b5b      	ldrb	r3, [r3, #13]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8368 	beq.w	8002dc2 <PCD_EP_ISR_Handler+0x782>
 80026f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 8363 	bne.w	8002dc2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7b5b      	ldrb	r3, [r3, #13]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002706:	b2da      	uxtb	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	735a      	strb	r2, [r3, #13]
 8002716:	e354      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800272a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800272e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002732:	2b00      	cmp	r3, #0
 8002734:	d034      	beq.n	80027a0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	3306      	adds	r3, #6
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800275e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002760:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800276c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002772:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002774:	b29b      	uxth	r3, r3
 8002776:	f005 fa1b 	bl	8007bb0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002786:	4013      	ands	r3, r2
 8002788:	823b      	strh	r3, [r7, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	8a3a      	ldrh	r2, [r7, #16]
 8002790:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002794:	b292      	uxth	r2, r2
 8002796:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f006 ff8d 	bl	80096b8 <HAL_PCD_SetupStageCallback>
 800279e:	e310      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027a0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f280 830c 	bge.w	8002dc2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80027b6:	4013      	ands	r3, r2
 80027b8:	83fb      	strh	r3, [r7, #30]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	8bfa      	ldrh	r2, [r7, #30]
 80027c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027c4:	b292      	uxth	r2, r2
 80027c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	3306      	adds	r3, #6
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d019      	beq.n	8002830 <PCD_EP_ISR_Handler+0x1f0>
 80027fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280a:	6959      	ldr	r1, [r3, #20]
 800280c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002812:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002814:	b29b      	uxth	r3, r3
 8002816:	f005 f9cb 	bl	8007bb0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800281a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	441a      	add	r2, r3
 8002824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002826:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002828:	2100      	movs	r1, #0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f006 ff56 	bl	80096dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800283a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800283e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 82bd 	bne.w	8002dc2 <PCD_EP_ISR_Handler+0x782>
 8002848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800284c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002850:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002854:	f000 82b5 	beq.w	8002dc2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002866:	b29b      	uxth	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4413      	add	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002882:	b29a      	uxth	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b3e      	cmp	r3, #62	@ 0x3e
 800288e:	d91d      	bls.n	80028cc <PCD_EP_ISR_Handler+0x28c>
 8002890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	647b      	str	r3, [r7, #68]	@ 0x44
 8002898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <PCD_EP_ISR_Handler+0x26a>
 80028a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a6:	3b01      	subs	r3, #1
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	029b      	lsls	r3, r3, #10
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4313      	orrs	r3, r2
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	801a      	strh	r2, [r3, #0]
 80028ca:	e026      	b.n	800291a <PCD_EP_ISR_Handler+0x2da>
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10a      	bne.n	80028ea <PCD_EP_ISR_Handler+0x2aa>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	801a      	strh	r2, [r3, #0]
 80028e8:	e017      	b.n	800291a <PCD_EP_ISR_Handler+0x2da>
 80028ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <PCD_EP_ISR_Handler+0x2c4>
 80028fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002900:	3301      	adds	r3, #1
 8002902:	647b      	str	r3, [r7, #68]	@ 0x44
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29a      	uxth	r2, r3
 800290a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290c:	b29b      	uxth	r3, r3
 800290e:	029b      	lsls	r3, r3, #10
 8002910:	b29b      	uxth	r3, r3
 8002912:	4313      	orrs	r3, r2
 8002914:	b29a      	uxth	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800292a:	827b      	strh	r3, [r7, #18]
 800292c:	8a7b      	ldrh	r3, [r7, #18]
 800292e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002932:	827b      	strh	r3, [r7, #18]
 8002934:	8a7b      	ldrh	r3, [r7, #18]
 8002936:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800293a:	827b      	strh	r3, [r7, #18]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	8a7b      	ldrh	r3, [r7, #18]
 8002942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800294a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800294e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002952:	b29b      	uxth	r3, r3
 8002954:	8013      	strh	r3, [r2, #0]
 8002956:	e234      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800296c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002970:	2b00      	cmp	r3, #0
 8002972:	f280 80fc 	bge.w	8002b6e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	b29a      	uxth	r2, r3
 8002988:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800298c:	4013      	ands	r3, r2
 800298e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80029a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029a8:	b292      	uxth	r2, r2
 80029aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029ac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80029c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c4:	7b1b      	ldrb	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d125      	bne.n	8002a16 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	3306      	adds	r3, #6
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80029f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8092 	beq.w	8002b24 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0a:	88da      	ldrh	r2, [r3, #6]
 8002a0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a10:	f005 f8ce 	bl	8007bb0 <USB_ReadPMA>
 8002a14:	e086      	b.n	8002b24 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	78db      	ldrb	r3, [r3, #3]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d10a      	bne.n	8002a34 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a22:	461a      	mov	r2, r3
 8002a24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9d9 	bl	8002dde <HAL_PCD_EP_DB_Receive>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002a32:	e077      	b.n	8002b24 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a4e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002a64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d024      	beq.n	8002adc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002abe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d02e      	beq.n	8002b24 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002acc:	6959      	ldr	r1, [r3, #20]
 8002ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad0:	891a      	ldrh	r2, [r3, #8]
 8002ad2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ad6:	f005 f86b 	bl	8007bb0 <USB_ReadPMA>
 8002ada:	e023      	b.n	8002b24 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	3306      	adds	r3, #6
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b04:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002b08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b16:	6959      	ldr	r1, [r3, #20]
 8002b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1a:	895a      	ldrh	r2, [r3, #10]
 8002b1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b20:	f005 f846 	bl	8007bb0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b26:	69da      	ldr	r2, [r3, #28]
 8002b28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b2c:	441a      	add	r2, r3
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b3a:	441a      	add	r2, r3
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <PCD_EP_ISR_Handler+0x514>
 8002b48:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d206      	bcs.n	8002b62 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f006 fdbe 	bl	80096dc <HAL_PCD_DataOutStageCallback>
 8002b60:	e005      	b.n	8002b6e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 faed 	bl	8006148 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8123 	beq.w	8002dc2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b7c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	3310      	adds	r3, #16
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002baa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	441a      	add	r2, r3
 8002bbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	f040 80a2 	bne.w	8002d1a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd8:	2200      	movs	r2, #0
 8002bda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bde:	7b1b      	ldrb	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8093 	beq.w	8002d0c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002be6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d046      	beq.n	8002c80 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d126      	bne.n	8002c48 <PCD_EP_ISR_Handler+0x608>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	4413      	add	r3, r2
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	011a      	lsls	r2, r3, #4
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	e061      	b.n	8002d0c <PCD_EP_ISR_Handler+0x6cc>
 8002c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d15d      	bne.n	8002d0c <PCD_EP_ISR_Handler+0x6cc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	4413      	add	r3, r2
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	011a      	lsls	r2, r3, #4
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	4413      	add	r3, r2
 8002c72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	e045      	b.n	8002d0c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	785b      	ldrb	r3, [r3, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d126      	bne.n	8002cdc <PCD_EP_ISR_Handler+0x69c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca2:	4413      	add	r3, r2
 8002ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	011a      	lsls	r2, r3, #4
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	4413      	add	r3, r2
 8002cb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc4:	801a      	strh	r2, [r3, #0]
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	e017      	b.n	8002d0c <PCD_EP_ISR_Handler+0x6cc>
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d113      	bne.n	8002d0c <PCD_EP_ISR_Handler+0x6cc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf2:	4413      	add	r3, r2
 8002cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	011a      	lsls	r2, r3, #4
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfe:	4413      	add	r3, r2
 8002d00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	2200      	movs	r2, #0
 8002d0a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f006 fcfd 	bl	8009712 <HAL_PCD_DataInStageCallback>
 8002d18:	e053      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d146      	bne.n	8002db4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d4e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d907      	bls.n	8002d6e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d66:	1ad2      	subs	r2, r2, r3
 8002d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6a:	619a      	str	r2, [r3, #24]
 8002d6c:	e002      	b.n	8002d74 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d106      	bne.n	8002d8a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f006 fcc5 	bl	8009712 <HAL_PCD_DataInStageCallback>
 8002d88:	e01b      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d92:	441a      	add	r2, r3
 8002d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d96:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002da0:	441a      	add	r2, r3
 8002da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 f9cb 	bl	8006148 <USB_EPStartXfer>
 8002db2:	e006      	b.n	8002dc2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002db4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002db8:	461a      	mov	r2, r3
 8002dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f91b 	bl	8002ff8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	b21b      	sxth	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f6ff ac3b 	blt.w	800264a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3758      	adds	r7, #88	@ 0x58
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d07e      	beq.n	8002ef4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	8b7b      	ldrh	r3, [r7, #26]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d306      	bcc.n	8002e38 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	8b7b      	ldrh	r3, [r7, #26]
 8002e30:	1ad2      	subs	r2, r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	e002      	b.n	8002e3e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d123      	bne.n	8002e8e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e60:	833b      	strh	r3, [r7, #24]
 8002e62:	8b3b      	ldrh	r3, [r7, #24]
 8002e64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e68:	833b      	strh	r3, [r7, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	8b3b      	ldrh	r3, [r7, #24]
 8002e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01f      	beq.n	8002ed8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb2:	82fb      	strh	r3, [r7, #22]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	441a      	add	r2, r3
 8002ec2:	8afb      	ldrh	r3, [r7, #22]
 8002ec4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ec8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ed0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ed8:	8b7b      	ldrh	r3, [r7, #26]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6959      	ldr	r1, [r3, #20]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	891a      	ldrh	r2, [r3, #8]
 8002eec:	8b7b      	ldrh	r3, [r7, #26]
 8002eee:	f004 fe5f 	bl	8007bb0 <USB_ReadPMA>
 8002ef2:	e07c      	b.n	8002fee <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	3306      	adds	r3, #6
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f16:	881b      	ldrh	r3, [r3, #0]
 8002f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	8b7b      	ldrh	r3, [r7, #26]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d306      	bcc.n	8002f36 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	8b7b      	ldrh	r3, [r7, #26]
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	619a      	str	r2, [r3, #24]
 8002f34:	e002      	b.n	8002f3c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d123      	bne.n	8002f8c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5e:	83fb      	strh	r3, [r7, #30]
 8002f60:	8bfb      	ldrh	r3, [r7, #30]
 8002f62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f66:	83fb      	strh	r3, [r7, #30]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	8bfb      	ldrh	r3, [r7, #30]
 8002f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11f      	bne.n	8002fd6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fb0:	83bb      	strh	r3, [r7, #28]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	441a      	add	r2, r3
 8002fc0:	8bbb      	ldrh	r3, [r7, #28]
 8002fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fd6:	8b7b      	ldrh	r3, [r7, #26]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6959      	ldr	r1, [r3, #20]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	895a      	ldrh	r2, [r3, #10]
 8002fe8:	8b7b      	ldrh	r3, [r7, #26]
 8002fea:	f004 fde1 	bl	8007bb0 <USB_ReadPMA>
    }
  }

  return count;
 8002fee:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3720      	adds	r7, #32
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b0a4      	sub	sp, #144	@ 0x90
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 81dd 	beq.w	80033cc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	3302      	adds	r3, #2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4413      	add	r3, r2
 8003030:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800303a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003046:	429a      	cmp	r2, r3
 8003048:	d907      	bls.n	800305a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003052:	1ad2      	subs	r2, r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	619a      	str	r2, [r3, #24]
 8003058:	e002      	b.n	8003060 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 80b9 	bne.w	80031dc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d126      	bne.n	80030c0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003086:	4413      	add	r3, r2
 8003088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	011a      	lsls	r2, r3, #4
 8003090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003092:	4413      	add	r3, r2
 8003094:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	e01a      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d116      	bne.n	80030f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030dc:	4413      	add	r3, r2
 80030de:	637b      	str	r3, [r7, #52]	@ 0x34
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	011a      	lsls	r2, r3, #4
 80030e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e8:	4413      	add	r3, r2
 80030ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f2:	2200      	movs	r2, #0
 80030f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d126      	bne.n	8003152 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	011a      	lsls	r2, r3, #4
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003136:	b29a      	uxth	r2, r3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314a:	b29a      	uxth	r2, r3
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	e017      	b.n	8003182 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d113      	bne.n	8003182 <HAL_PCD_EP_DB_Transmit+0x18a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	4413      	add	r3, r2
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	011a      	lsls	r2, r3, #4
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	4413      	add	r3, r2
 8003176:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	2200      	movs	r2, #0
 8003180:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	4619      	mov	r1, r3
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f006 fac2 	bl	8009712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 82fc 	beq.w	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b4:	82fb      	strh	r3, [r7, #22]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	441a      	add	r2, r3
 80031c4:	8afb      	ldrh	r3, [r7, #22]
 80031c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8013      	strh	r3, [r2, #0]
 80031da:	e2da      	b.n	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d021      	beq.n	800322a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003200:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800321a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800321e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003226:	b29b      	uxth	r3, r3
 8003228:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003230:	2b01      	cmp	r3, #1
 8003232:	f040 82ae 	bne.w	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	695a      	ldr	r2, [r3, #20]
 800323a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800323e:	441a      	add	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800324c:	441a      	add	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	429a      	cmp	r2, r3
 800325c:	d30b      	bcc.n	8003276 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6a1a      	ldr	r2, [r3, #32]
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	621a      	str	r2, [r3, #32]
 8003274:	e017      	b.n	80032a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800327e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800328e:	e00a      	b.n	80032a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	785b      	ldrb	r3, [r3, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d165      	bne.n	800337a <HAL_PCD_EP_DB_Transmit+0x382>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c2:	4413      	add	r3, r2
 80032c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	011a      	lsls	r2, r3, #4
 80032cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ce:	4413      	add	r3, r2
 80032d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80032ec:	d91d      	bls.n	800332a <HAL_PCD_EP_DB_Transmit+0x332>
 80032ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_PCD_EP_DB_Transmit+0x310>
 8003302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003304:	3b01      	subs	r3, #1
 8003306:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29a      	uxth	r2, r3
 800330e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003310:	b29b      	uxth	r3, r3
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	b29b      	uxth	r3, r3
 8003316:	4313      	orrs	r3, r2
 8003318:	b29b      	uxth	r3, r3
 800331a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800331e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003322:	b29a      	uxth	r2, r3
 8003324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003326:	801a      	strh	r2, [r3, #0]
 8003328:	e044      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800332a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x350>
 8003332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003340:	b29a      	uxth	r2, r3
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	e035      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <HAL_PCD_EP_DB_Transmit+0x36a>
 800335c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800335e:	3301      	adds	r3, #1
 8003360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29a      	uxth	r2, r3
 8003368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800336a:	b29b      	uxth	r3, r3
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	b29b      	uxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b29a      	uxth	r2, r3
 8003374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	e01c      	b.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d118      	bne.n	80033b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	647b      	str	r3, [r7, #68]	@ 0x44
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003390:	b29b      	uxth	r3, r3
 8003392:	461a      	mov	r2, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003396:	4413      	add	r3, r2
 8003398:	647b      	str	r3, [r7, #68]	@ 0x44
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	011a      	lsls	r2, r3, #4
 80033a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a2:	4413      	add	r3, r2
 80033a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	6959      	ldr	r1, [r3, #20]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	891a      	ldrh	r2, [r3, #8]
 80033c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f004 fbae 	bl	8007b26 <USB_WritePMA>
 80033ca:	e1e2      	b.n	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	3306      	adds	r3, #6
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003400:	429a      	cmp	r2, r3
 8003402:	d307      	bcc.n	8003414 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800340c:	1ad2      	subs	r2, r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	e002      	b.n	800341a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2200      	movs	r2, #0
 8003418:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 80c0 	bne.w	80035a4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	785b      	ldrb	r3, [r3, #1]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d126      	bne.n	800347a <HAL_PCD_EP_DB_Transmit+0x482>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003440:	4413      	add	r3, r2
 8003442:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	011a      	lsls	r2, r3, #4
 800344a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800344c:	4413      	add	r3, r2
 800344e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003452:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345e:	b29a      	uxth	r2, r3
 8003460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003462:	801a      	strh	r2, [r3, #0]
 8003464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800346e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003472:	b29a      	uxth	r2, r3
 8003474:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003476:	801a      	strh	r2, [r3, #0]
 8003478:	e01a      	b.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	785b      	ldrb	r3, [r3, #1]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d116      	bne.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	667b      	str	r3, [r7, #100]	@ 0x64
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003496:	4413      	add	r3, r2
 8003498:	667b      	str	r3, [r7, #100]	@ 0x64
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	011a      	lsls	r2, r3, #4
 80034a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a2:	4413      	add	r3, r2
 80034a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80034aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ac:	2200      	movs	r2, #0
 80034ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d12b      	bne.n	8003516 <HAL_PCD_EP_DB_Transmit+0x51e>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d2:	4413      	add	r3, r2
 80034d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	011a      	lsls	r2, r3, #4
 80034dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034de:	4413      	add	r3, r2
 80034e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034fa:	801a      	strh	r2, [r3, #0]
 80034fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800350c:	b29a      	uxth	r2, r3
 800350e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	e017      	b.n	8003546 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d113      	bne.n	8003546 <HAL_PCD_EP_DB_Transmit+0x54e>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003526:	b29b      	uxth	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800352c:	4413      	add	r3, r2
 800352e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	011a      	lsls	r2, r3, #4
 8003536:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003538:	4413      	add	r3, r2
 800353a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800353e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003540:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003542:	2200      	movs	r2, #0
 8003544:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f006 f8e0 	bl	8009712 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 811a 	bne.w	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003578:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800358e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800359a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]
 80035a2:	e0f6      	b.n	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d121      	bne.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80035de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 80ca 	bne.w	8003792 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003606:	441a      	add	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003614:	441a      	add	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	429a      	cmp	r2, r3
 8003624:	d30b      	bcc.n	800363e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003636:	1ad2      	subs	r2, r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	621a      	str	r2, [r3, #32]
 800363c:	e017      	b.n	800366e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d108      	bne.n	8003658 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003646:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800364a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003656:	e00a      	b.n	800366e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	657b      	str	r3, [r7, #84]	@ 0x54
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d165      	bne.n	8003748 <HAL_PCD_EP_DB_Transmit+0x750>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003690:	4413      	add	r3, r2
 8003692:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	011a      	lsls	r2, r3, #4
 800369a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369c:	4413      	add	r3, r2
 800369e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b2:	801a      	strh	r2, [r3, #0]
 80036b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ba:	d91d      	bls.n	80036f8 <HAL_PCD_EP_DB_Transmit+0x700>
 80036bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80036d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036d2:	3b01      	subs	r3, #1
 80036d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036de:	b29b      	uxth	r3, r3
 80036e0:	029b      	lsls	r3, r3, #10
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4313      	orrs	r3, r2
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	e041      	b.n	800377c <HAL_PCD_EP_DB_Transmit+0x784>
 80036f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800370a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370e:	b29a      	uxth	r2, r3
 8003710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003712:	801a      	strh	r2, [r3, #0]
 8003714:	e032      	b.n	800377c <HAL_PCD_EP_DB_Transmit+0x784>
 8003716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800371e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_PCD_EP_DB_Transmit+0x738>
 800372a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800372c:	3301      	adds	r3, #1
 800372e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29a      	uxth	r2, r3
 8003736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003738:	b29b      	uxth	r3, r3
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	b29b      	uxth	r3, r3
 800373e:	4313      	orrs	r3, r2
 8003740:	b29a      	uxth	r2, r3
 8003742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	e019      	b.n	800377c <HAL_PCD_EP_DB_Transmit+0x784>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	785b      	ldrb	r3, [r3, #1]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d115      	bne.n	800377c <HAL_PCD_EP_DB_Transmit+0x784>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375e:	4413      	add	r3, r2
 8003760:	657b      	str	r3, [r7, #84]	@ 0x54
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	011a      	lsls	r2, r3, #4
 8003768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376a:	4413      	add	r3, r2
 800376c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003770:	653b      	str	r3, [r7, #80]	@ 0x50
 8003772:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003776:	b29a      	uxth	r2, r3
 8003778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800377a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6959      	ldr	r1, [r3, #20]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	895a      	ldrh	r2, [r3, #10]
 8003788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378c:	b29b      	uxth	r3, r3
 800378e:	f004 f9ca 	bl	8007b26 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ac:	82bb      	strh	r3, [r7, #20]
 80037ae:	8abb      	ldrh	r3, [r7, #20]
 80037b0:	f083 0310 	eor.w	r3, r3, #16
 80037b4:	82bb      	strh	r3, [r7, #20]
 80037b6:	8abb      	ldrh	r3, [r7, #20]
 80037b8:	f083 0320 	eor.w	r3, r3, #32
 80037bc:	82bb      	strh	r3, [r7, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	8abb      	ldrh	r3, [r7, #20]
 80037ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037de:	b29b      	uxth	r3, r3
 80037e0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3790      	adds	r7, #144	@ 0x90
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	607b      	str	r3, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	817b      	strh	r3, [r7, #10]
 80037fa:	4613      	mov	r3, r2
 80037fc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	f003 0207 	and.w	r2, r3, #7
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	3310      	adds	r3, #16
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e009      	b.n	8003836 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003822:	897a      	ldrh	r2, [r7, #10]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d107      	bne.n	800384c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	b29a      	uxth	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	80da      	strh	r2, [r3, #6]
 800384a:	e00b      	b.n	8003864 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2201      	movs	r2, #1
 8003850:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b29a      	uxth	r2, r3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b29a      	uxth	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e272      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8087 	beq.w	800399e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003890:	4b92      	ldr	r3, [pc, #584]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b04      	cmp	r3, #4
 800389a:	d00c      	beq.n	80038b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800389c:	4b8f      	ldr	r3, [pc, #572]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d112      	bne.n	80038ce <HAL_RCC_OscConfig+0x5e>
 80038a8:	4b8c      	ldr	r3, [pc, #560]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038b4:	d10b      	bne.n	80038ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b6:	4b89      	ldr	r3, [pc, #548]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d06c      	beq.n	800399c <HAL_RCC_OscConfig+0x12c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d168      	bne.n	800399c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e24c      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x76>
 80038d8:	4b80      	ldr	r3, [pc, #512]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a7f      	ldr	r2, [pc, #508]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e02e      	b.n	8003944 <HAL_RCC_OscConfig+0xd4>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x98>
 80038ee:	4b7b      	ldr	r3, [pc, #492]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a7a      	ldr	r2, [pc, #488]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b78      	ldr	r3, [pc, #480]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a77      	ldr	r2, [pc, #476]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003900:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e01d      	b.n	8003944 <HAL_RCC_OscConfig+0xd4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0xbc>
 8003912:	4b72      	ldr	r3, [pc, #456]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a71      	ldr	r2, [pc, #452]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b6f      	ldr	r3, [pc, #444]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6e      	ldr	r2, [pc, #440]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e00b      	b.n	8003944 <HAL_RCC_OscConfig+0xd4>
 800392c:	4b6b      	ldr	r3, [pc, #428]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a6a      	ldr	r2, [pc, #424]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	4b68      	ldr	r3, [pc, #416]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a67      	ldr	r2, [pc, #412]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 800393e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003942:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd fe8e 	bl	800166c <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fd fe8a 	bl	800166c <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	@ 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e200      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	4b5d      	ldr	r3, [pc, #372]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0xe4>
 8003972:	e014      	b.n	800399e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd fe7a 	bl	800166c <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397c:	f7fd fe76 	bl	800166c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b64      	cmp	r3, #100	@ 0x64
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1ec      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	4b53      	ldr	r3, [pc, #332]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x10c>
 800399a:	e000      	b.n	800399e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d063      	beq.n	8003a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039aa:	4b4c      	ldr	r3, [pc, #304]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039b6:	4b49      	ldr	r3, [pc, #292]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d11c      	bne.n	80039fc <HAL_RCC_OscConfig+0x18c>
 80039c2:	4b46      	ldr	r3, [pc, #280]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	4b43      	ldr	r3, [pc, #268]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_RCC_OscConfig+0x176>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d001      	beq.n	80039e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1c0      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e6:	4b3d      	ldr	r3, [pc, #244]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4939      	ldr	r1, [pc, #228]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	e03a      	b.n	8003a72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a04:	4b36      	ldr	r3, [pc, #216]	@ (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fe2f 	bl	800166c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a12:	f7fd fe2b 	bl	800166c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1a1      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a24:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	4b2a      	ldr	r3, [pc, #168]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4927      	ldr	r1, [pc, #156]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
 8003a44:	e015      	b.n	8003a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a46:	4b26      	ldr	r3, [pc, #152]	@ (8003ae0 <HAL_RCC_OscConfig+0x270>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fe0e 	bl	800166c <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a54:	f7fd fe0a 	bl	800166c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e180      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a66:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03a      	beq.n	8003af4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d019      	beq.n	8003aba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a86:	4b17      	ldr	r3, [pc, #92]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8c:	f7fd fdee 	bl	800166c <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a94:	f7fd fdea 	bl	800166c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e160      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f000 face 	bl	8004054 <RCC_Delay>
 8003ab8:	e01c      	b.n	8003af4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <HAL_RCC_OscConfig+0x274>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fdd4 	bl	800166c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac6:	e00f      	b.n	8003ae8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fdd0 	bl	800166c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d908      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e146      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	42420000 	.word	0x42420000
 8003ae4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	4b92      	ldr	r3, [pc, #584]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e9      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a6 	beq.w	8003c4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b06:	4b8b      	ldr	r3, [pc, #556]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4a87      	ldr	r2, [pc, #540]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	61d3      	str	r3, [r2, #28]
 8003b1e:	4b85      	ldr	r3, [pc, #532]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b82      	ldr	r3, [pc, #520]	@ (8003d38 <HAL_RCC_OscConfig+0x4c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d118      	bne.n	8003b6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d38 <HAL_RCC_OscConfig+0x4c8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d38 <HAL_RCC_OscConfig+0x4c8>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7fd fd91 	bl	800166c <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7fd fd8d 	bl	800166c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b64      	cmp	r3, #100	@ 0x64
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e103      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b75      	ldr	r3, [pc, #468]	@ (8003d38 <HAL_RCC_OscConfig+0x4c8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x312>
 8003b74:	4b6f      	ldr	r3, [pc, #444]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a6e      	ldr	r2, [pc, #440]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6213      	str	r3, [r2, #32]
 8003b80:	e02d      	b.n	8003bde <HAL_RCC_OscConfig+0x36e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x334>
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	4a69      	ldr	r2, [pc, #420]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	6213      	str	r3, [r2, #32]
 8003b96:	4b67      	ldr	r3, [pc, #412]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a66      	ldr	r2, [pc, #408]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	e01c      	b.n	8003bde <HAL_RCC_OscConfig+0x36e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d10c      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x356>
 8003bac:	4b61      	ldr	r3, [pc, #388]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4a60      	ldr	r2, [pc, #384]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6213      	str	r3, [r2, #32]
 8003bc4:	e00b      	b.n	8003bde <HAL_RCC_OscConfig+0x36e>
 8003bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4a5a      	ldr	r2, [pc, #360]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	6213      	str	r3, [r2, #32]
 8003bd2:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	f023 0304 	bic.w	r3, r3, #4
 8003bdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d015      	beq.n	8003c12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be6:	f7fd fd41 	bl	800166c <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bec:	e00a      	b.n	8003c04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bee:	f7fd fd3d 	bl	800166c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0b1      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ee      	beq.n	8003bee <HAL_RCC_OscConfig+0x37e>
 8003c10:	e014      	b.n	8003c3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c12:	f7fd fd2b 	bl	800166c <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fd27 	bl	800166c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e09b      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	4b40      	ldr	r3, [pc, #256]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ee      	bne.n	8003c1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c42:	4b3c      	ldr	r3, [pc, #240]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	4a3b      	ldr	r2, [pc, #236]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8087 	beq.w	8003d66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c58:	4b36      	ldr	r3, [pc, #216]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 030c 	and.w	r3, r3, #12
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d061      	beq.n	8003d28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d146      	bne.n	8003cfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b33      	ldr	r3, [pc, #204]	@ (8003d3c <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fcfb 	bl	800166c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fd fcf7 	bl	800166c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e06d      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8c:	4b29      	ldr	r3, [pc, #164]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ca2:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4921      	ldr	r1, [pc, #132]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a19      	ldr	r1, [r3, #32]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	491b      	ldr	r1, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fccb 	bl	800166c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fd fcc7 	bl	800166c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e03d      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x46a>
 8003cf8:	e035      	b.n	8003d66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_OscConfig+0x4cc>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fd fcb4 	bl	800166c <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fd fcb0 	bl	800166c <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e026      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_OscConfig+0x4c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x498>
 8003d26:	e01e      	b.n	8003d66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e019      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <HAL_RCC_OscConfig+0x500>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000

08003d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0d0      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b6a      	ldr	r3, [pc, #424]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d910      	bls.n	8003db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b67      	ldr	r3, [pc, #412]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 0207 	bic.w	r2, r3, #7
 8003d9e:	4965      	ldr	r1, [pc, #404]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b63      	ldr	r3, [pc, #396]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0b8      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd0:	4b59      	ldr	r3, [pc, #356]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de8:	4b53      	ldr	r3, [pc, #332]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a52      	ldr	r2, [pc, #328]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003df2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b50      	ldr	r3, [pc, #320]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	494d      	ldr	r1, [pc, #308]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d040      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	4b47      	ldr	r3, [pc, #284]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d115      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e07f      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	4b41      	ldr	r3, [pc, #260]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e073      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e42:	4b3d      	ldr	r3, [pc, #244]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06b      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e52:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4936      	ldr	r1, [pc, #216]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e64:	f7fd fc02 	bl	800166c <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7fd fbfe 	bl	800166c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e053      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 020c 	and.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1eb      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b27      	ldr	r3, [pc, #156]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d210      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b24      	ldr	r3, [pc, #144]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	4922      	ldr	r1, [pc, #136]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b20      	ldr	r3, [pc, #128]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e032      	b.n	8003f2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed0:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4916      	ldr	r1, [pc, #88]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	490e      	ldr	r1, [pc, #56]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f02:	f000 f821 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	490a      	ldr	r1, [pc, #40]	@ (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1a:	4a09      	ldr	r2, [pc, #36]	@ (8003f40 <HAL_RCC_ClockConfig+0x1cc>)
 8003f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_RCC_ClockConfig+0x1d0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fb60 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40022000 	.word	0x40022000
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800b2a4 	.word	0x0800b2a4
 8003f40:	20000000 	.word	0x20000000
 8003f44:	20000004 	.word	0x20000004

08003f48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x30>
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x36>
 8003f76:	e027      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7a:	613b      	str	r3, [r7, #16]
      break;
 8003f7c:	e027      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	0c9b      	lsrs	r3, r3, #18
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f88:	5cd3      	ldrb	r3, [r2, r3]
 8003f8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f96:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x94>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	0c5b      	lsrs	r3, r3, #17
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	4a11      	ldr	r2, [pc, #68]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003faa:	fb03 f202 	mul.w	r2, r3, r2
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e004      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0c      	ldr	r2, [pc, #48]	@ (8003fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
 8003fc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	613b      	str	r3, [r7, #16]
      break;
 8003fc6:	e002      	b.n	8003fce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fca:	613b      	str	r3, [r7, #16]
      break;
 8003fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fce:	693b      	ldr	r3, [r7, #16]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	007a1200 	.word	0x007a1200
 8003fe4:	0800b2bc 	.word	0x0800b2bc
 8003fe8:	0800b2cc 	.word	0x0800b2cc
 8003fec:	003d0900 	.word	0x003d0900

08003ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff4:	4b02      	ldr	r3, [pc, #8]	@ (8004000 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	20000000 	.word	0x20000000

08004004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004008:	f7ff fff2 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4903      	ldr	r1, [pc, #12]	@ (8004028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	0800b2b4 	.word	0x0800b2b4

0800402c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004030:	f7ff ffde 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	0adb      	lsrs	r3, r3, #11
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4903      	ldr	r1, [pc, #12]	@ (8004050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004048:	4618      	mov	r0, r3
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000
 8004050:	0800b2b4 	.word	0x0800b2b4

08004054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <RCC_Delay+0x34>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <RCC_Delay+0x38>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0a5b      	lsrs	r3, r3, #9
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004070:	bf00      	nop
  }
  while (Delay --);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	60fa      	str	r2, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f9      	bne.n	8004070 <RCC_Delay+0x1c>
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	20000000 	.word	0x20000000
 800408c:	10624dd3 	.word	0x10624dd3

08004090 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d07d      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b0:	4b4f      	ldr	r3, [pc, #316]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b4c      	ldr	r3, [pc, #304]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a4b      	ldr	r2, [pc, #300]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
 80040c8:	4b49      	ldr	r3, [pc, #292]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d118      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e4:	4b43      	ldr	r3, [pc, #268]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a42      	ldr	r2, [pc, #264]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f0:	f7fd fabc 	bl	800166c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	e008      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f8:	f7fd fab8 	bl	800166c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	@ 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e06d      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004116:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02e      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	429a      	cmp	r2, r3
 8004132:	d027      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004134:	4b2e      	ldr	r3, [pc, #184]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413e:	4b2e      	ldr	r3, [pc, #184]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	4b2c      	ldr	r3, [pc, #176]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800414a:	4a29      	ldr	r2, [pc, #164]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d014      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fd fa87 	bl	800166c <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd fa83 	bl	800166c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e036      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004184:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4917      	ldr	r1, [pc, #92]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	4313      	orrs	r3, r2
 8004194:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b14      	ldr	r3, [pc, #80]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4a13      	ldr	r2, [pc, #76]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b4:	4b0e      	ldr	r3, [pc, #56]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	490b      	ldr	r1, [pc, #44]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4904      	ldr	r1, [pc, #16]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
 80041f8:	42420440 	.word	0x42420440

080041fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e076      	b.n	80042fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800421e:	d009      	beq.n	8004234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	61da      	str	r2, [r3, #28]
 8004226:	e005      	b.n	8004234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc ff28 	bl	80010a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800426a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b8:	ea42 0103 	orr.w	r1, r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	0c1a      	lsrs	r2, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f002 0204 	and.w	r2, r2, #4
 80042da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	@ 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004312:	2301      	movs	r3, #1
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004316:	f7fd f9a9 	bl	800166c <HAL_GetTick>
 800431a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004322:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d00c      	beq.n	800434e <HAL_SPI_TransmitReceive+0x4a>
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800433a:	d106      	bne.n	800434a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <HAL_SPI_TransmitReceive+0x46>
 8004344:	7ffb      	ldrb	r3, [r7, #31]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d001      	beq.n	800434e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	e17f      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x5c>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x5c>
 800435a:	887b      	ldrh	r3, [r7, #2]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e174      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x6e>
 800436e:	2302      	movs	r3, #2
 8004370:	e16d      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b04      	cmp	r3, #4
 8004384:	d003      	beq.n	800438e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2205      	movs	r2, #5
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	887a      	ldrh	r2, [r7, #2]
 800439e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	887a      	ldrh	r2, [r7, #2]
 80043b6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ce:	2b40      	cmp	r3, #64	@ 0x40
 80043d0:	d007      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043ea:	d17e      	bne.n	80044ea <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_SPI_TransmitReceive+0xf6>
 80043f4:	8afb      	ldrh	r3, [r7, #22]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d16c      	bne.n	80044d4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	1c9a      	adds	r2, r3, #2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441e:	e059      	b.n	80044d4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d11b      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x162>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d016      	beq.n	8004466 <HAL_SPI_TransmitReceive+0x162>
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	2b01      	cmp	r3, #1
 800443c:	d113      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	881a      	ldrh	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	1c9a      	adds	r2, r3, #2
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d119      	bne.n	80044a8 <HAL_SPI_TransmitReceive+0x1a4>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d014      	beq.n	80044a8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004488:	b292      	uxth	r2, r2
 800448a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004490:	1c9a      	adds	r2, r3, #2
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a4:	2301      	movs	r3, #1
 80044a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044a8:	f7fd f8e0 	bl	800166c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d80d      	bhi.n	80044d4 <HAL_SPI_TransmitReceive+0x1d0>
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d009      	beq.n	80044d4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0bc      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1a0      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x11c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d19b      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x11c>
 80044e8:	e082      	b.n	80045f0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_TransmitReceive+0x1f4>
 80044f2:	8afb      	ldrh	r3, [r7, #22]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d171      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800451e:	e05d      	b.n	80045dc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b02      	cmp	r3, #2
 800452c:	d11c      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x264>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d017      	beq.n	8004568 <HAL_SPI_TransmitReceive+0x264>
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	2b01      	cmp	r3, #1
 800453c:	d114      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	7812      	ldrb	r2, [r2, #0]
 800454a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b01      	cmp	r3, #1
 8004574:	d119      	bne.n	80045aa <HAL_SPI_TransmitReceive+0x2a6>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d014      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045a6:	2301      	movs	r3, #1
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045aa:	f7fd f85f 	bl	800166c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d803      	bhi.n	80045c2 <HAL_SPI_TransmitReceive+0x2be>
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c0:	d102      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x2c4>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e038      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d19c      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x21c>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d197      	bne.n	8004520 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8b7 	bl	8004768 <SPI_EndRxTxTransaction>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e01d      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	613b      	str	r3, [r7, #16]
 800462e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800464c:	2300      	movs	r3, #0
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	@ 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004668:	f7fd f800 	bl	800166c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4413      	add	r3, r2
 8004676:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004678:	f7fc fff8 	bl	800166c <HAL_GetTick>
 800467c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800467e:	4b39      	ldr	r3, [pc, #228]	@ (8004764 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	015b      	lsls	r3, r3, #5
 8004684:	0d1b      	lsrs	r3, r3, #20
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800468e:	e054      	b.n	800473a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d050      	beq.n	800473a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004698:	f7fc ffe8 	bl	800166c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d902      	bls.n	80046ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d13d      	bne.n	800472a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80046bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046c6:	d111      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d0:	d004      	beq.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	d107      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f4:	d10f      	bne.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004714:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e017      	b.n	800475a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3b01      	subs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	429a      	cmp	r2, r3
 8004756:	d19b      	bne.n	8004690 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000000 	.word	0x20000000

08004768 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2201      	movs	r2, #1
 800477c:	2102      	movs	r1, #2
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff ff6a 	bl	8004658 <SPI_WaitFlagStateUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478e:	f043 0220 	orr.w	r2, r3, #32
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e013      	b.n	80047c2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2200      	movs	r2, #0
 80047a2:	2180      	movs	r1, #128	@ 0x80
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff ff57 	bl	8004658 <SPI_WaitFlagStateUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e000      	b.n	80047c2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e042      	b.n	8004862 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7fc fe2d 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2224      	movs	r2, #36	@ 0x24
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800480c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fdfa 	bl	8005408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004822:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004832:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004842:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b08a      	sub	sp, #40	@ 0x28
 800486e:	af02      	add	r7, sp, #8
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b20      	cmp	r3, #32
 8004888:	d175      	bne.n	8004976 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_UART_Transmit+0x2c>
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06e      	b.n	8004978 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2221      	movs	r2, #33	@ 0x21
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a8:	f7fc fee0 	bl	800166c <HAL_GetTick>
 80048ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	88fa      	ldrh	r2, [r7, #6]
 80048b2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c2:	d108      	bne.n	80048d6 <HAL_UART_Transmit+0x6c>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e003      	b.n	80048de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048de:	e02e      	b.n	800493e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2180      	movs	r1, #128	@ 0x80
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fb98 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e03a      	b.n	8004978 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004916:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	3302      	adds	r3, #2
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e007      	b.n	8004930 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	781a      	ldrb	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1cb      	bne.n	80048e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	2140      	movs	r1, #64	@ 0x40
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fb64 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e006      	b.n	8004978 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	e000      	b.n	8004978 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004976:	2302      	movs	r3, #2
  }
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b08a      	sub	sp, #40	@ 0x28
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b20      	cmp	r3, #32
 800499e:	f040 8081 	bne.w	8004aa4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Receive+0x2e>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e079      	b.n	8004aa6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2222      	movs	r2, #34	@ 0x22
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049c6:	f7fc fe51 	bl	800166c <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e0:	d108      	bne.n	80049f4 <HAL_UART_Receive+0x74>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d104      	bne.n	80049f4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e003      	b.n	80049fc <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80049fc:	e047      	b.n	8004a8e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2200      	movs	r2, #0
 8004a06:	2120      	movs	r1, #32
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fb09 	bl	8005020 <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e042      	b.n	8004aa6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10c      	bne.n	8004a40 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e01f      	b.n	8004a80 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a48:	d007      	beq.n	8004a5a <HAL_UART_Receive+0xda>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_UART_Receive+0xe8>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	e008      	b.n	8004a7a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1b2      	bne.n	80049fe <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_UART_IRQHandler+0x66>
 8004b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fbbc 	bl	800528c <UART_Receive_IT>
      return;
 8004b14:	e25b      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80de 	beq.w	8004cdc <HAL_UART_IRQHandler+0x22c>
 8004b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d106      	bne.n	8004b3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80d1 	beq.w	8004cdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_UART_IRQHandler+0xae>
 8004b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0201 	orr.w	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_UART_IRQHandler+0xd2>
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	f043 0202 	orr.w	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xf6>
 8004b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d011      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x126>
 8004bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d105      	bne.n	8004bca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f043 0208 	orr.w	r2, r3, #8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 81f2 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_UART_IRQHandler+0x14e>
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fb47 	bl	800528c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <HAL_UART_IRQHandler+0x17a>
 8004c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d04f      	beq.n	8004cca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa51 	bl	80050d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d041      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3314      	adds	r3, #20
 8004c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1d9      	bne.n	8004c3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d013      	beq.n	8004cba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c96:	4a7e      	ldr	r2, [pc, #504]	@ (8004e90 <HAL_UART_IRQHandler+0x3e0>)
 8004c98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fe5a 	bl	8001958 <HAL_DMA_Abort_IT>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d016      	beq.n	8004cd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e00e      	b.n	8004cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f99c 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	e00a      	b.n	8004cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f998 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	e006      	b.n	8004cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f994 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004cd6:	e175      	b.n	8004fc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd8:	bf00      	nop
    return;
 8004cda:	e173      	b.n	8004fc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	f040 814f 	bne.w	8004f84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8148 	beq.w	8004f84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8141 	beq.w	8004f84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80b6 	beq.w	8004e94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8145 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f080 813e 	bcs.w	8004fc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	f000 8088 	beq.w	8004e70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	330c      	adds	r3, #12
 8004d88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1d9      	bne.n	8004d60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3314      	adds	r3, #20
 8004db2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004dd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e1      	bne.n	8004dac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004df8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3314      	adds	r3, #20
 8004e08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e3      	bne.n	8004de8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e40:	f023 0310 	bic.w	r3, r3, #16
 8004e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	330c      	adds	r3, #12
 8004e4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e3      	bne.n	8004e2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fc fd39 	bl	80018e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8bf 	bl	800500a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e8c:	e09c      	b.n	8004fc8 <HAL_UART_IRQHandler+0x518>
 8004e8e:	bf00      	nop
 8004e90:	08005197 	.word	0x08005197
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 808e 	beq.w	8004fcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8089 	beq.w	8004fcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e3      	bne.n	8004eba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	623b      	str	r3, [r7, #32]
   return(result);
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e3      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0310 	bic.w	r3, r3, #16
 8004f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f5c:	61fa      	str	r2, [r7, #28]
 8004f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	69b9      	ldr	r1, [r7, #24]
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e3      	bne.n	8004f38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f844 	bl	800500a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f82:	e023      	b.n	8004fcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x4f4>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f90e 	bl	80051be <UART_Transmit_IT>
    return;
 8004fa2:	e014      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00e      	beq.n	8004fce <HAL_UART_IRQHandler+0x51e>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f94d 	bl	800525c <UART_EndTransmit_IT>
    return;
 8004fc2:	e004      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
    return;
 8004fc4:	bf00      	nop
 8004fc6:	e002      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
      return;
 8004fc8:	bf00      	nop
 8004fca:	e000      	b.n	8004fce <HAL_UART_IRQHandler+0x51e>
      return;
 8004fcc:	bf00      	nop
  }
}
 8004fce:	37e8      	adds	r7, #232	@ 0xe8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	e03b      	b.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d037      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fc fb17 	bl	800166c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x30>
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e03a      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d023      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b80      	cmp	r3, #128	@ 0x80
 8005066:	d020      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b40      	cmp	r3, #64	@ 0x40
 800506c:	d01d      	beq.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b08      	cmp	r3, #8
 800507a:	d116      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f81d 	bl	80050d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2208      	movs	r2, #8
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00f      	b.n	80050ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4013      	ands	r3, r2
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	bf0c      	ite	eq
 80050ba:	2301      	moveq	r3, #1
 80050bc:	2300      	movne	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d0b4      	beq.n	8005032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b095      	sub	sp, #84	@ 0x54
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80050fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	61fb      	str	r3, [r7, #28]
   return(result);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3314      	adds	r3, #20
 800512c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800512e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e5      	bne.n	800510e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	2b01      	cmp	r3, #1
 8005148:	d119      	bne.n	800517e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	60bb      	str	r3, [r7, #8]
   return(result);
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f023 0310 	bic.w	r3, r3, #16
 8005160:	647b      	str	r3, [r7, #68]	@ 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800516a:	61ba      	str	r2, [r7, #24]
 800516c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	613b      	str	r3, [r7, #16]
   return(result);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800518c:	bf00      	nop
 800518e:	3754      	adds	r7, #84	@ 0x54
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff21 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b21      	cmp	r3, #33	@ 0x21
 80051d0:	d13e      	bne.n	8005250 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051da:	d114      	bne.n	8005206 <UART_Transmit_IT+0x48>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d110      	bne.n	8005206 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	621a      	str	r2, [r3, #32]
 8005204:	e008      	b.n	8005218 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1c59      	adds	r1, r3, #1
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6211      	str	r1, [r2, #32]
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29b      	uxth	r3, r3
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4619      	mov	r1, r3
 8005226:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800523a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005272:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fea9 	bl	8004fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	@ 0x30
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b22      	cmp	r3, #34	@ 0x22
 800529e:	f040 80ae 	bne.w	80053fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	d117      	bne.n	80052dc <UART_Receive_IT+0x50>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d113      	bne.n	80052dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	1c9a      	adds	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052da:	e026      	b.n	800532a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ee:	d007      	beq.n	8005300 <UART_Receive_IT+0x74>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <UART_Receive_IT+0x82>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d106      	bne.n	800530e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	e008      	b.n	8005320 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800531a:	b2da      	uxtb	r2, r3
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	4619      	mov	r1, r3
 8005338:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800533a:	2b00      	cmp	r3, #0
 800533c:	d15d      	bne.n	80053fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0220 	bic.w	r2, r2, #32
 800534c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800535c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	2b01      	cmp	r3, #1
 8005382:	d135      	bne.n	80053f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	613b      	str	r3, [r7, #16]
   return(result);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f023 0310 	bic.w	r3, r3, #16
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	330c      	adds	r3, #12
 80053a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053aa:	623a      	str	r2, [r7, #32]
 80053ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	69f9      	ldr	r1, [r7, #28]
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d10a      	bne.n	80053e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff fe0e 	bl	800500a <HAL_UARTEx_RxEventCallback>
 80053ee:	e002      	b.n	80053f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fdf8 	bl	8004fe6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	e002      	b.n	8005400 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	@ 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005442:	f023 030c 	bic.w	r3, r3, #12
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	430b      	orrs	r3, r1
 800544e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2c      	ldr	r2, [pc, #176]	@ (800551c <UART_SetConfig+0x114>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005470:	f7fe fddc 	bl	800402c <HAL_RCC_GetPCLK2Freq>
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	e002      	b.n	800547e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005478:	f7fe fdc4 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 800547c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009a      	lsls	r2, r3, #2
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	fbb2 f3f3 	udiv	r3, r2, r3
 8005494:	4a22      	ldr	r2, [pc, #136]	@ (8005520 <UART_SetConfig+0x118>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	0119      	lsls	r1, r3, #4
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009a      	lsls	r2, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005520 <UART_SetConfig+0x118>)
 80054b6:	fba3 0302 	umull	r0, r3, r3, r2
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	2064      	movs	r0, #100	@ 0x64
 80054be:	fb00 f303 	mul.w	r3, r0, r3
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	3332      	adds	r3, #50	@ 0x32
 80054c8:	4a15      	ldr	r2, [pc, #84]	@ (8005520 <UART_SetConfig+0x118>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d4:	4419      	add	r1, r3
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009a      	lsls	r2, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <UART_SetConfig+0x118>)
 80054ee:	fba3 0302 	umull	r0, r3, r3, r2
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2064      	movs	r0, #100	@ 0x64
 80054f6:	fb00 f303 	mul.w	r3, r0, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	3332      	adds	r3, #50	@ 0x32
 8005500:	4a07      	ldr	r2, [pc, #28]	@ (8005520 <UART_SetConfig+0x118>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	440a      	add	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40013800 	.word	0x40013800
 8005520:	51eb851f 	.word	0x51eb851f

08005524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	4638      	mov	r0, r7
 800552e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr

0800553e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800554e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005552:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005572:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005576:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	b29b      	uxth	r3, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	4013      	ands	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b085      	sub	sp, #20
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	4638      	mov	r0, r7
 80055c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr

080055f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b09d      	sub	sp, #116	@ 0x74
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005616:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	78db      	ldrb	r3, [r3, #3]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d81f      	bhi.n	8005662 <USB_ActivateEndpoint+0x72>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <USB_ActivateEndpoint+0x38>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	08005639 	.word	0x08005639
 800562c:	08005655 	.word	0x08005655
 8005630:	0800566b 	.word	0x0800566b
 8005634:	08005647 	.word	0x08005647
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005638:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800563c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005640:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005644:	e012      	b.n	800566c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005646:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800564a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800564e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005652:	e00b      	b.n	800566c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005654:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800565c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005660:	e004      	b.n	800566c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005668:	e000      	b.n	800566c <USB_ActivateEndpoint+0x7c>
      break;
 800566a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800567a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800567e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568a:	b29b      	uxth	r3, r3
 800568c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	441a      	add	r2, r3
 80056ba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80056be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	7b1b      	ldrb	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f040 8178 	bne.w	80059cc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8084 	beq.w	80057ee <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	4413      	add	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	88db      	ldrh	r3, [r3, #6]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	827b      	strh	r3, [r7, #18]
 8005728:	8a7b      	ldrh	r3, [r7, #18]
 800572a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01b      	beq.n	800576a <USB_ActivateEndpoint+0x17a>
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005748:	823b      	strh	r3, [r7, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	441a      	add	r2, r3
 8005754:	8a3b      	ldrh	r3, [r7, #16]
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800575e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005762:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	78db      	ldrb	r3, [r3, #3]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d020      	beq.n	80057b4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005788:	81bb      	strh	r3, [r7, #12]
 800578a:	89bb      	ldrh	r3, [r7, #12]
 800578c:	f083 0320 	eor.w	r3, r3, #32
 8005790:	81bb      	strh	r3, [r7, #12]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	441a      	add	r2, r3
 800579c:	89bb      	ldrh	r3, [r7, #12]
 800579e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8013      	strh	r3, [r2, #0]
 80057b2:	e2d5      	b.n	8005d60 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ca:	81fb      	strh	r3, [r7, #14]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	441a      	add	r2, r3
 80057d6:	89fb      	ldrh	r3, [r7, #14]
 80057d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	8013      	strh	r3, [r2, #0]
 80057ec:	e2b8      	b.n	8005d60 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	461a      	mov	r2, r3
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	4413      	add	r3, r2
 8005800:	633b      	str	r3, [r7, #48]	@ 0x30
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	011a      	lsls	r2, r3, #4
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	4413      	add	r3, r2
 800580c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	88db      	ldrh	r3, [r3, #6]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	b29b      	uxth	r3, r3
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800582c:	b29b      	uxth	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	4413      	add	r3, r2
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	011a      	lsls	r2, r3, #4
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	4413      	add	r3, r2
 8005840:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005850:	b29a      	uxth	r2, r3
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	801a      	strh	r2, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b3e      	cmp	r3, #62	@ 0x3e
 800585c:	d91d      	bls.n	800589a <USB_ActivateEndpoint+0x2aa>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 031f 	and.w	r3, r3, #31
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <USB_ActivateEndpoint+0x288>
 8005872:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005874:	3b01      	subs	r3, #1
 8005876:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29a      	uxth	r2, r3
 800587e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29b      	uxth	r3, r3
 8005886:	4313      	orrs	r3, r2
 8005888:	b29b      	uxth	r3, r3
 800588a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800588e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005892:	b29a      	uxth	r2, r3
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	801a      	strh	r2, [r3, #0]
 8005898:	e026      	b.n	80058e8 <USB_ActivateEndpoint+0x2f8>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <USB_ActivateEndpoint+0x2c8>
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e017      	b.n	80058e8 <USB_ActivateEndpoint+0x2f8>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <USB_ActivateEndpoint+0x2e2>
 80058cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058ce:	3301      	adds	r3, #1
 80058d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058da:	b29b      	uxth	r3, r3
 80058dc:	029b      	lsls	r3, r3, #10
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80058f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <USB_ActivateEndpoint+0x348>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005916:	843b      	strh	r3, [r7, #32]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	8c3b      	ldrh	r3, [r7, #32]
 8005924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800592c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005934:	b29b      	uxth	r3, r3
 8005936:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d124      	bne.n	800598a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005956:	83bb      	strh	r3, [r7, #28]
 8005958:	8bbb      	ldrh	r3, [r7, #28]
 800595a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800595e:	83bb      	strh	r3, [r7, #28]
 8005960:	8bbb      	ldrh	r3, [r7, #28]
 8005962:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005966:	83bb      	strh	r3, [r7, #28]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	441a      	add	r2, r3
 8005972:	8bbb      	ldrh	r3, [r7, #28]
 8005974:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005978:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800597c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005984:	b29b      	uxth	r3, r3
 8005986:	8013      	strh	r3, [r2, #0]
 8005988:	e1ea      	b.n	8005d60 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800599c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a0:	83fb      	strh	r3, [r7, #30]
 80059a2:	8bfb      	ldrh	r3, [r7, #30]
 80059a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059a8:	83fb      	strh	r3, [r7, #30]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	8bfb      	ldrh	r3, [r7, #30]
 80059b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8013      	strh	r3, [r2, #0]
 80059ca:	e1c9      	b.n	8005d60 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	78db      	ldrb	r3, [r3, #3]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d11e      	bne.n	8005a12 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	441a      	add	r2, r3
 80059f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80059fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a04:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	8013      	strh	r3, [r2, #0]
 8005a10:	e01d      	b.n	8005a4e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a28:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	441a      	add	r2, r3
 8005a36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a5e:	4413      	add	r3, r2
 8005a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	011a      	lsls	r2, r3, #4
 8005a68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	891b      	ldrh	r3, [r3, #8]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a92:	4413      	add	r3, r2
 8005a94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	011a      	lsls	r2, r3, #4
 8005a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	895b      	ldrh	r3, [r3, #10]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	785b      	ldrb	r3, [r3, #1]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f040 8093 	bne.w	8005be6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005ad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01b      	beq.n	8005b14 <USB_ActivateEndpoint+0x524>
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005b22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <USB_ActivateEndpoint+0x574>
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b82:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b84:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b8a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	441a      	add	r2, r3
 8005bce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	8013      	strh	r3, [r2, #0]
 8005be4:	e0bc      	b.n	8005d60 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005bf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01d      	beq.n	8005c3e <USB_ActivateEndpoint+0x64e>
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c18:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005c4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01d      	beq.n	8005c96 <USB_ActivateEndpoint+0x6a6>
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c70:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	441a      	add	r2, r3
 8005c7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	78db      	ldrb	r3, [r3, #3]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d024      	beq.n	8005ce8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005cb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005cbc:	f083 0320 	eor.w	r3, r3, #32
 8005cc0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	e01d      	b.n	8005d24 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cfe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	441a      	add	r2, r3
 8005d0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d60:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3774      	adds	r7, #116	@ 0x74
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b08d      	sub	sp, #52	@ 0x34
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	7b1b      	ldrb	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 808e 	bne.w	8005ea0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d044      	beq.n	8005e16 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	81bb      	strh	r3, [r7, #12]
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01b      	beq.n	8005ddc <USB_DeactivateEndpoint+0x6c>
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	817b      	strh	r3, [r7, #10]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	441a      	add	r2, r3
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df2:	813b      	strh	r3, [r7, #8]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	893b      	ldrh	r3, [r7, #8]
 8005e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8013      	strh	r3, [r2, #0]
 8005e14:	e192      	b.n	800613c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	827b      	strh	r3, [r7, #18]
 8005e24:	8a7b      	ldrh	r3, [r7, #18]
 8005e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01b      	beq.n	8005e66 <USB_DeactivateEndpoint+0xf6>
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e44:	823b      	strh	r3, [r7, #16]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	8a3b      	ldrh	r3, [r7, #16]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7c:	81fb      	strh	r3, [r7, #14]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	441a      	add	r2, r3
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	8013      	strh	r3, [r2, #0]
 8005e9e:	e14d      	b.n	800613c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 80a5 	bne.w	8005ff4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	843b      	strh	r3, [r7, #32]
 8005eb8:	8c3b      	ldrh	r3, [r7, #32]
 8005eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01b      	beq.n	8005efa <USB_DeactivateEndpoint+0x18a>
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed8:	83fb      	strh	r3, [r7, #30]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	8bfb      	ldrh	r3, [r7, #30]
 8005ee6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	83bb      	strh	r3, [r7, #28]
 8005f08:	8bbb      	ldrh	r3, [r7, #28]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01b      	beq.n	8005f4a <USB_DeactivateEndpoint+0x1da>
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f28:	837b      	strh	r3, [r7, #26]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	441a      	add	r2, r3
 8005f34:	8b7b      	ldrh	r3, [r7, #26]
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f60:	833b      	strh	r3, [r7, #24]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	8b3b      	ldrh	r3, [r7, #24]
 8005f6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f98:	82fb      	strh	r3, [r7, #22]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	441a      	add	r2, r3
 8005fa4:	8afb      	ldrh	r3, [r7, #22]
 8005fa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005faa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd0:	82bb      	strh	r3, [r7, #20]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	441a      	add	r2, r3
 8005fdc:	8abb      	ldrh	r3, [r7, #20]
 8005fde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	8013      	strh	r3, [r2, #0]
 8005ff2:	e0a3      	b.n	800613c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006002:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01b      	beq.n	8006044 <USB_DeactivateEndpoint+0x2d4>
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006030:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006034:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006038:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800603c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006040:	b29b      	uxth	r3, r3
 8006042:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006052:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01b      	beq.n	8006094 <USB_DeactivateEndpoint+0x324>
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006072:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	441a      	add	r2, r3
 800607e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006090:	b29b      	uxth	r3, r3
 8006092:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006100:	b29b      	uxth	r3, r3
 8006102:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006130:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3734      	adds	r7, #52	@ 0x34
 8006142:	46bd      	mov	sp, r7
 8006144:	bc80      	pop	{r7}
 8006146:	4770      	bx	lr

08006148 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b0c2      	sub	sp, #264	@ 0x108
 800614c:	af00      	add	r7, sp, #0
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006156:	6018      	str	r0, [r3, #0]
 8006158:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800615c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006160:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b01      	cmp	r3, #1
 8006170:	f040 86b7 	bne.w	8006ee2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	429a      	cmp	r2, r3
 800618e:	d908      	bls.n	80061a2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061a0:	e007      	b.n	80061b2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80061a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	7b1b      	ldrb	r3, [r3, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13a      	bne.n	8006238 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6959      	ldr	r1, [r3, #20]
 80061ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	88da      	ldrh	r2, [r3, #6]
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061e8:	6800      	ldr	r0, [r0, #0]
 80061ea:	f001 fc9c 	bl	8007b26 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006208:	b29b      	uxth	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	011a      	lsls	r2, r3, #4
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	f000 be1f 	b.w	8006e76 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	2b02      	cmp	r3, #2
 8006246:	f040 8462 	bne.w	8006b0e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6a1a      	ldr	r2, [r3, #32]
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	f240 83df 	bls.w	8006a26 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006296:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	441a      	add	r2, r3
 80062ac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 81c7 	beq.w	8006698 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800630a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	633b      	str	r3, [r7, #48]	@ 0x30
 8006316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d177      	bne.n	8006416 <USB_EPStartXfer+0x2ce>
 8006326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006340:	b29b      	uxth	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006346:	4413      	add	r3, r2
 8006348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	011a      	lsls	r2, r3, #4
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	4413      	add	r3, r2
 800635c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800636c:	b29a      	uxth	r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	2b3e      	cmp	r3, #62	@ 0x3e
 8006378:	d921      	bls.n	80063be <USB_EPStartXfer+0x276>
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <USB_EPStartXfer+0x252>
 8006390:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006394:	3b01      	subs	r3, #1
 8006396:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	029b      	lsls	r3, r3, #10
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	4313      	orrs	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	e050      	b.n	8006460 <USB_EPStartXfer+0x318>
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <USB_EPStartXfer+0x294>
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e041      	b.n	8006460 <USB_EPStartXfer+0x318>
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e0:	085b      	lsrs	r3, r3, #1
 80063e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <USB_EPStartXfer+0x2b4>
 80063f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063f6:	3301      	adds	r3, #1
 80063f8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006406:	b29b      	uxth	r3, r3
 8006408:	029b      	lsls	r3, r3, #10
 800640a:	b29b      	uxth	r3, r3
 800640c:	4313      	orrs	r3, r2
 800640e:	b29a      	uxth	r2, r3
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e024      	b.n	8006460 <USB_EPStartXfer+0x318>
 8006416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d11c      	bne.n	8006460 <USB_EPStartXfer+0x318>
 8006426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006434:	b29b      	uxth	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	4413      	add	r3, r2
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	011a      	lsls	r2, r3, #4
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	4413      	add	r3, r2
 8006450:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800645a:	b29a      	uxth	r2, r3
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	895b      	ldrh	r3, [r3, #10]
 800646c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6959      	ldr	r1, [r3, #20]
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	b29b      	uxth	r3, r3
 8006482:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006486:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800648a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800648e:	6800      	ldr	r0, [r0, #0]
 8006490:	f001 fb49 	bl	8007b26 <USB_WritePMA>
            ep->xfer_buff += len;
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695a      	ldr	r2, [r3, #20]
 80064a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a4:	441a      	add	r2, r3
 80064a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d90f      	bls.n	80064ee <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6a1a      	ldr	r2, [r3, #32]
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	621a      	str	r2, [r3, #32]
 80064ec:	e00e      	b.n	800650c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80064ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80064fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800650c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d177      	bne.n	800660c <USB_EPStartXfer+0x4c4>
 800651c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	4413      	add	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	011a      	lsls	r2, r3, #4
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	4413      	add	r3, r2
 8006552:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b29b      	uxth	r3, r3
 800655e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006562:	b29a      	uxth	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	801a      	strh	r2, [r3, #0]
 8006568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656c:	2b3e      	cmp	r3, #62	@ 0x3e
 800656e:	d921      	bls.n	80065b4 <USB_EPStartXfer+0x46c>
 8006570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <USB_EPStartXfer+0x448>
 8006586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800658a:	3b01      	subs	r3, #1
 800658c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659a:	b29b      	uxth	r3, r3
 800659c:	029b      	lsls	r3, r3, #10
 800659e:	b29b      	uxth	r3, r3
 80065a0:	4313      	orrs	r3, r2
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	801a      	strh	r2, [r3, #0]
 80065b2:	e056      	b.n	8006662 <USB_EPStartXfer+0x51a>
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <USB_EPStartXfer+0x48a>
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e047      	b.n	8006662 <USB_EPStartXfer+0x51a>
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <USB_EPStartXfer+0x4aa>
 80065e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ec:	3301      	adds	r3, #1
 80065ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	029b      	lsls	r3, r3, #10
 8006600:	b29b      	uxth	r3, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	b29a      	uxth	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e02a      	b.n	8006662 <USB_EPStartXfer+0x51a>
 800660c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	785b      	ldrb	r3, [r3, #1]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d122      	bne.n	8006662 <USB_EPStartXfer+0x51a>
 800661c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006636:	b29b      	uxth	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	4413      	add	r3, r2
 800663e:	623b      	str	r3, [r7, #32]
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	b29a      	uxth	r2, r3
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	891b      	ldrh	r3, [r3, #8]
 800666e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6959      	ldr	r1, [r3, #20]
 800667e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006682:	b29b      	uxth	r3, r3
 8006684:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006688:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800668c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006690:	6800      	ldr	r0, [r0, #0]
 8006692:	f001 fa48 	bl	8007b26 <USB_WritePMA>
 8006696:	e3ee      	b.n	8006e76 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006698:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800669c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d177      	bne.n	8006798 <USB_EPStartXfer+0x650>
 80066a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c8:	4413      	add	r3, r2
 80066ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	011a      	lsls	r2, r3, #4
 80066da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066dc:	4413      	add	r3, r2
 80066de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066e6:	881b      	ldrh	r3, [r3, #0]
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80066fa:	d921      	bls.n	8006740 <USB_EPStartXfer+0x5f8>
 80066fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <USB_EPStartXfer+0x5d4>
 8006712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006716:	3b01      	subs	r3, #1
 8006718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800671c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006726:	b29b      	uxth	r3, r3
 8006728:	029b      	lsls	r3, r3, #10
 800672a:	b29b      	uxth	r3, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	b29b      	uxth	r3, r3
 8006730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006738:	b29a      	uxth	r2, r3
 800673a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e056      	b.n	80067ee <USB_EPStartXfer+0x6a6>
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <USB_EPStartXfer+0x616>
 8006748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006756:	b29a      	uxth	r2, r3
 8006758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	e047      	b.n	80067ee <USB_EPStartXfer+0x6a6>
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d004      	beq.n	800677e <USB_EPStartXfer+0x636>
 8006774:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006778:	3301      	adds	r3, #1
 800677a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800677e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006788:	b29b      	uxth	r3, r3
 800678a:	029b      	lsls	r3, r3, #10
 800678c:	b29b      	uxth	r3, r3
 800678e:	4313      	orrs	r3, r2
 8006790:	b29a      	uxth	r2, r3
 8006792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	e02a      	b.n	80067ee <USB_EPStartXfer+0x6a6>
 8006798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d122      	bne.n	80067ee <USB_EPStartXfer+0x6a6>
 80067a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80067b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c8:	4413      	add	r3, r2
 80067ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	011a      	lsls	r2, r3, #4
 80067da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067dc:	4413      	add	r3, r2
 80067de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	891b      	ldrh	r3, [r3, #8]
 80067fa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006814:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006818:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f001 f982 	bl	8007b26 <USB_WritePMA>
            ep->xfer_buff += len;
 8006822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695a      	ldr	r2, [r3, #20]
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	441a      	add	r2, r3
 8006834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	429a      	cmp	r2, r3
 800685a:	d90f      	bls.n	800687c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800685c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686c:	1ad2      	subs	r2, r2, r3
 800686e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	621a      	str	r2, [r3, #32]
 800687a:	e00e      	b.n	800689a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800689a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800689e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d177      	bne.n	80069a6 <USB_EPStartXfer+0x85e>
 80068b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d6:	4413      	add	r3, r2
 80068d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	011a      	lsls	r2, r3, #4
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	4413      	add	r3, r2
 80068ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006906:	2b3e      	cmp	r3, #62	@ 0x3e
 8006908:	d921      	bls.n	800694e <USB_EPStartXfer+0x806>
 800690a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <USB_EPStartXfer+0x7e2>
 8006920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006924:	3b01      	subs	r3, #1
 8006926:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29a      	uxth	r2, r3
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	b29b      	uxth	r3, r3
 8006936:	029b      	lsls	r3, r3, #10
 8006938:	b29b      	uxth	r3, r3
 800693a:	4313      	orrs	r3, r2
 800693c:	b29b      	uxth	r3, r3
 800693e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006946:	b29a      	uxth	r2, r3
 8006948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e050      	b.n	80069f0 <USB_EPStartXfer+0x8a8>
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <USB_EPStartXfer+0x824>
 8006956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006964:	b29a      	uxth	r2, r3
 8006966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e041      	b.n	80069f0 <USB_EPStartXfer+0x8a8>
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <USB_EPStartXfer+0x844>
 8006982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006986:	3301      	adds	r3, #1
 8006988:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800698c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29a      	uxth	r2, r3
 8006992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006996:	b29b      	uxth	r3, r3
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	b29b      	uxth	r3, r3
 800699c:	4313      	orrs	r3, r2
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e024      	b.n	80069f0 <USB_EPStartXfer+0x8a8>
 80069a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d11c      	bne.n	80069f0 <USB_EPStartXfer+0x8a8>
 80069b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	461a      	mov	r2, r3
 80069c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ca:	4413      	add	r3, r2
 80069cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	011a      	lsls	r2, r3, #4
 80069dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069de:	4413      	add	r3, r2
 80069e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	895b      	ldrh	r3, [r3, #10]
 80069fc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6959      	ldr	r1, [r3, #20]
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a16:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a1a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a1e:	6800      	ldr	r0, [r0, #0]
 8006a20:	f001 f881 	bl	8007b26 <USB_WritePMA>
 8006a24:	e227      	b.n	8006e76 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a5c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ab2:	4413      	add	r3, r2
 8006ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	011a      	lsls	r2, r3, #4
 8006ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ad6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	891b      	ldrh	r3, [r3, #8]
 8006ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6959      	ldr	r1, [r3, #20]
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006afe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b02:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b06:	6800      	ldr	r0, [r0, #0]
 8006b08:	f001 f80d 	bl	8007b26 <USB_WritePMA>
 8006b0c:	e1b3      	b.n	8006e76 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a1a      	ldr	r2, [r3, #32]
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80c6 	beq.w	8006ce0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d177      	bne.n	8006c60 <USB_EPStartXfer+0xb18>
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b90:	4413      	add	r3, r2
 8006b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006baa:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bc2:	d921      	bls.n	8006c08 <USB_EPStartXfer+0xac0>
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	095b      	lsrs	r3, r3, #5
 8006bca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd2:	f003 031f 	and.w	r3, r3, #31
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <USB_EPStartXfer+0xa9c>
 8006bda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bde:	3b01      	subs	r3, #1
 8006be0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006be4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	e050      	b.n	8006caa <USB_EPStartXfer+0xb62>
 8006c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <USB_EPStartXfer+0xade>
 8006c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e041      	b.n	8006caa <USB_EPStartXfer+0xb62>
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	085b      	lsrs	r3, r3, #1
 8006c2c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d004      	beq.n	8006c46 <USB_EPStartXfer+0xafe>
 8006c3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c40:	3301      	adds	r3, #1
 8006c42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	029b      	lsls	r3, r3, #10
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e024      	b.n	8006caa <USB_EPStartXfer+0xb62>
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	785b      	ldrb	r3, [r3, #1]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d11c      	bne.n	8006caa <USB_EPStartXfer+0xb62>
 8006c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c84:	4413      	add	r3, r2
 8006c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	011a      	lsls	r2, r3, #4
 8006c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c98:	4413      	add	r3, r2
 8006c9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	895b      	ldrh	r3, [r3, #10]
 8006cb6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6959      	ldr	r1, [r3, #20]
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cd0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cd4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cd8:	6800      	ldr	r0, [r0, #0]
 8006cda:	f000 ff24 	bl	8007b26 <USB_WritePMA>
 8006cde:	e0ca      	b.n	8006e76 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d177      	bne.n	8006de0 <USB_EPStartXfer+0xc98>
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d10:	4413      	add	r3, r2
 8006d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	011a      	lsls	r2, r3, #4
 8006d22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d42:	d921      	bls.n	8006d88 <USB_EPStartXfer+0xc40>
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <USB_EPStartXfer+0xc1c>
 8006d5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	029b      	lsls	r3, r3, #10
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4313      	orrs	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	e05c      	b.n	8006e42 <USB_EPStartXfer+0xcfa>
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <USB_EPStartXfer+0xc5e>
 8006d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da2:	801a      	strh	r2, [r3, #0]
 8006da4:	e04d      	b.n	8006e42 <USB_EPStartXfer+0xcfa>
 8006da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d004      	beq.n	8006dc6 <USB_EPStartXfer+0xc7e>
 8006dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	029b      	lsls	r3, r3, #10
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ddc:	801a      	strh	r2, [r3, #0]
 8006dde:	e030      	b.n	8006e42 <USB_EPStartXfer+0xcfa>
 8006de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d128      	bne.n	8006e42 <USB_EPStartXfer+0xcfa>
 8006df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e14:	4413      	add	r3, r2
 8006e16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	011a      	lsls	r2, r3, #4
 8006e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	891b      	ldrh	r3, [r3, #8]
 8006e4e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6959      	ldr	r1, [r3, #20]
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e70:	6800      	ldr	r0, [r0, #0]
 8006e72:	f000 fe58 	bl	8007b26 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e9c:	817b      	strh	r3, [r7, #10]
 8006e9e:	897b      	ldrh	r3, [r7, #10]
 8006ea0:	f083 0310 	eor.w	r3, r3, #16
 8006ea4:	817b      	strh	r3, [r7, #10]
 8006ea6:	897b      	ldrh	r3, [r7, #10]
 8006ea8:	f083 0320 	eor.w	r3, r3, #32
 8006eac:	817b      	strh	r3, [r7, #10]
 8006eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	897b      	ldrh	r3, [r7, #10]
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]
 8006ede:	f000 bcde 	b.w	800789e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	7b1b      	ldrb	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 80bb 	bne.w	800706a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d917      	bls.n	8006f40 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	699a      	ldr	r2, [r3, #24]
 8006f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	619a      	str	r2, [r3, #24]
 8006f3e:	e00e      	b.n	8006f5e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f82:	4413      	add	r3, r2
 8006f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	011a      	lsls	r2, r3, #4
 8006f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fbe:	d924      	bls.n	800700a <USB_EPStartXfer+0xec2>
 8006fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <USB_EPStartXfer+0xe98>
 8006fd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007004:	801a      	strh	r2, [r3, #0]
 8007006:	f000 bc10 	b.w	800782a <USB_EPStartXfer+0x16e2>
 800700a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10c      	bne.n	800702c <USB_EPStartXfer+0xee4>
 8007012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007016:	881b      	ldrh	r3, [r3, #0]
 8007018:	b29b      	uxth	r3, r3
 800701a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007022:	b29a      	uxth	r2, r3
 8007024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e3fe      	b.n	800782a <USB_EPStartXfer+0x16e2>
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	085b      	lsrs	r3, r3, #1
 8007032:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <USB_EPStartXfer+0xf04>
 8007042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007046:	3301      	adds	r3, #1
 8007048:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800704c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29a      	uxth	r2, r3
 8007054:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007058:	b29b      	uxth	r3, r3
 800705a:	029b      	lsls	r3, r3, #10
 800705c:	b29b      	uxth	r3, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e3df      	b.n	800782a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	78db      	ldrb	r3, [r3, #3]
 8007076:	2b02      	cmp	r3, #2
 8007078:	f040 8218 	bne.w	80074ac <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800707c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f040 809d 	bne.w	80071c8 <USB_EPStartXfer+0x1080>
 800708e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800709c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070b2:	4413      	add	r3, r2
 80070b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	011a      	lsls	r2, r3, #4
 80070c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070ca:	4413      	add	r3, r2
 80070cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070e6:	801a      	strh	r2, [r3, #0]
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80070f6:	d92b      	bls.n	8007150 <USB_EPStartXfer+0x1008>
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <USB_EPStartXfer+0xfe0>
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007122:	3b01      	subs	r3, #1
 8007124:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29a      	uxth	r2, r3
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007134:	b29b      	uxth	r3, r3
 8007136:	029b      	lsls	r3, r3, #10
 8007138:	b29b      	uxth	r3, r3
 800713a:	4313      	orrs	r3, r2
 800713c:	b29b      	uxth	r3, r3
 800713e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007146:	b29a      	uxth	r2, r3
 8007148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800714c:	801a      	strh	r2, [r3, #0]
 800714e:	e070      	b.n	8007232 <USB_EPStartXfer+0x10ea>
 8007150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10c      	bne.n	800717a <USB_EPStartXfer+0x1032>
 8007160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800716c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	e05b      	b.n	8007232 <USB_EPStartXfer+0x10ea>
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d004      	beq.n	80071aa <USB_EPStartXfer+0x1062>
 80071a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a4:	3301      	adds	r3, #1
 80071a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e034      	b.n	8007232 <USB_EPStartXfer+0x10ea>
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d12c      	bne.n	8007232 <USB_EPStartXfer+0x10ea>
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071fc:	4413      	add	r3, r2
 80071fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	011a      	lsls	r2, r3, #4
 8007210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007214:	4413      	add	r3, r2
 8007216:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800721a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800721e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	b29a      	uxth	r2, r3
 800722c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007230:	801a      	strh	r2, [r3, #0]
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 809d 	bne.w	800738c <USB_EPStartXfer+0x1244>
 8007252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726e:	b29b      	uxth	r3, r3
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007276:	4413      	add	r3, r2
 8007278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	011a      	lsls	r2, r3, #4
 800728a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800728e:	4413      	add	r3, r2
 8007290:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007294:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007298:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ba:	d92b      	bls.n	8007314 <USB_EPStartXfer+0x11cc>
 80072bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <USB_EPStartXfer+0x11a4>
 80072e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e6:	3b01      	subs	r3, #1
 80072e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	029b      	lsls	r3, r3, #10
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007310:	801a      	strh	r2, [r3, #0]
 8007312:	e069      	b.n	80073e8 <USB_EPStartXfer+0x12a0>
 8007314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10c      	bne.n	800733e <USB_EPStartXfer+0x11f6>
 8007324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007334:	b29a      	uxth	r2, r3
 8007336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e054      	b.n	80073e8 <USB_EPStartXfer+0x12a0>
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <USB_EPStartXfer+0x1226>
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007368:	3301      	adds	r3, #1
 800736a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800736e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29a      	uxth	r2, r3
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800737a:	b29b      	uxth	r3, r3
 800737c:	029b      	lsls	r3, r3, #10
 800737e:	b29b      	uxth	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007388:	801a      	strh	r2, [r3, #0]
 800738a:	e02d      	b.n	80073e8 <USB_EPStartXfer+0x12a0>
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d125      	bne.n	80073e8 <USB_EPStartXfer+0x12a0>
 800739c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073b2:	4413      	add	r3, r2
 80073b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	011a      	lsls	r2, r3, #4
 80073c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073ca:	4413      	add	r3, r2
 80073cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073e6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8218 	beq.w	800782a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800741a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800741e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <USB_EPStartXfer+0x12ea>
 8007426:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800742a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10d      	bne.n	800744e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007432:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800743a:	2b00      	cmp	r3, #0
 800743c:	f040 81f5 	bne.w	800782a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007440:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 81ee 	bne.w	800782a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800744e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29b      	uxth	r3, r3
 800746c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007474:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	441a      	add	r2, r3
 8007492:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]
 80074aa:	e1be      	b.n	800782a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	78db      	ldrb	r3, [r3, #3]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	f040 81b4 	bne.w	8007826 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d917      	bls.n	800750a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80074ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	619a      	str	r2, [r3, #24]
 8007508:	e00e      	b.n	8007528 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800751a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8085 	bne.w	8007644 <USB_EPStartXfer+0x14fc>
 800753a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007556:	b29b      	uxth	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800755e:	4413      	add	r3, r2
 8007560:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	011a      	lsls	r2, r3, #4
 8007572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007576:	4413      	add	r3, r2
 8007578:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800757c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007580:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b29b      	uxth	r3, r3
 8007588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800758c:	b29a      	uxth	r2, r3
 800758e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007592:	801a      	strh	r2, [r3, #0]
 8007594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007598:	2b3e      	cmp	r3, #62	@ 0x3e
 800759a:	d923      	bls.n	80075e4 <USB_EPStartXfer+0x149c>
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <USB_EPStartXfer+0x1474>
 80075b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	029b      	lsls	r3, r3, #10
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075da:	b29a      	uxth	r2, r3
 80075dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e060      	b.n	80076a6 <USB_EPStartXfer+0x155e>
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10c      	bne.n	8007606 <USB_EPStartXfer+0x14be>
 80075ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e04f      	b.n	80076a6 <USB_EPStartXfer+0x155e>
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <USB_EPStartXfer+0x14de>
 800761c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007620:	3301      	adds	r3, #1
 8007622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29a      	uxth	r2, r3
 800762e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007632:	b29b      	uxth	r3, r3
 8007634:	029b      	lsls	r3, r3, #10
 8007636:	b29b      	uxth	r3, r3
 8007638:	4313      	orrs	r3, r2
 800763a:	b29a      	uxth	r2, r3
 800763c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007640:	801a      	strh	r2, [r3, #0]
 8007642:	e030      	b.n	80076a6 <USB_EPStartXfer+0x155e>
 8007644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	785b      	ldrb	r3, [r3, #1]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d128      	bne.n	80076a6 <USB_EPStartXfer+0x155e>
 8007654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007658:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007670:	b29b      	uxth	r3, r3
 8007672:	461a      	mov	r2, r3
 8007674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007678:	4413      	add	r3, r2
 800767a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800767e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	011a      	lsls	r2, r3, #4
 800768c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007690:	4413      	add	r3, r2
 8007692:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007696:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769e:	b29a      	uxth	r2, r3
 80076a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8085 	bne.w	80077d0 <USB_EPStartXfer+0x1688>
 80076c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076ea:	4413      	add	r3, r2
 80076ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	011a      	lsls	r2, r3, #4
 80076fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007702:	4413      	add	r3, r2
 8007704:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007708:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800770c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007718:	b29a      	uxth	r2, r3
 800771a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007724:	2b3e      	cmp	r3, #62	@ 0x3e
 8007726:	d923      	bls.n	8007770 <USB_EPStartXfer+0x1628>
 8007728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <USB_EPStartXfer+0x1600>
 800773e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007742:	3b01      	subs	r3, #1
 8007744:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007754:	b29b      	uxth	r3, r3
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	b29b      	uxth	r3, r3
 800775a:	4313      	orrs	r3, r2
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e05c      	b.n	800782a <USB_EPStartXfer+0x16e2>
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10c      	bne.n	8007792 <USB_EPStartXfer+0x164a>
 8007778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007788:	b29a      	uxth	r2, r3
 800778a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	e04b      	b.n	800782a <USB_EPStartXfer+0x16e2>
 8007792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <USB_EPStartXfer+0x166a>
 80077a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ac:	3301      	adds	r3, #1
 80077ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077be:	b29b      	uxth	r3, r3
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e02c      	b.n	800782a <USB_EPStartXfer+0x16e2>
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d124      	bne.n	800782a <USB_EPStartXfer+0x16e2>
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077f6:	4413      	add	r3, r2
 80077f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	011a      	lsls	r2, r3, #4
 800780a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800780e:	4413      	add	r3, r2
 8007810:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007814:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	b29a      	uxth	r2, r3
 800781e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007822:	801a      	strh	r2, [r3, #0]
 8007824:	e001      	b.n	800782a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e03a      	b.n	80078a0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800784c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007850:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007854:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007858:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800785c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007860:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007864:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007868:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800788a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800788e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800789a:	b29b      	uxth	r3, r3
 800789c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d020      	beq.n	80078fe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d2:	81bb      	strh	r3, [r7, #12]
 80078d4:	89bb      	ldrh	r3, [r7, #12]
 80078d6:	f083 0310 	eor.w	r3, r3, #16
 80078da:	81bb      	strh	r3, [r7, #12]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	441a      	add	r2, r3
 80078e6:	89bb      	ldrh	r3, [r7, #12]
 80078e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	8013      	strh	r3, [r2, #0]
 80078fc:	e01f      	b.n	800793e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007914:	81fb      	strh	r3, [r7, #14]
 8007916:	89fb      	ldrh	r3, [r7, #14]
 8007918:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800791c:	81fb      	strh	r3, [r7, #14]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	89fb      	ldrh	r3, [r7, #14]
 800792a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800792e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800793a:	b29b      	uxth	r3, r3
 800793c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800794a:	b480      	push	{r7}
 800794c:	b087      	sub	sp, #28
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	7b1b      	ldrb	r3, [r3, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 809d 	bne.w	8007a98 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d04c      	beq.n	8007a00 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	823b      	strh	r3, [r7, #16]
 8007974:	8a3b      	ldrh	r3, [r7, #16]
 8007976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01b      	beq.n	80079b6 <USB_EPClearStall+0x6c>
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	4413      	add	r3, r2
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007994:	81fb      	strh	r3, [r7, #14]
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	441a      	add	r2, r3
 80079a0:	89fb      	ldrh	r3, [r7, #14]
 80079a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	78db      	ldrb	r3, [r3, #3]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d06c      	beq.n	8007a98 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079d4:	81bb      	strh	r3, [r7, #12]
 80079d6:	89bb      	ldrh	r3, [r7, #12]
 80079d8:	f083 0320 	eor.w	r3, r3, #32
 80079dc:	81bb      	strh	r3, [r7, #12]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	441a      	add	r2, r3
 80079e8:	89bb      	ldrh	r3, [r7, #12]
 80079ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	8013      	strh	r3, [r2, #0]
 80079fe:	e04b      	b.n	8007a98 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	82fb      	strh	r3, [r7, #22]
 8007a0e:	8afb      	ldrh	r3, [r7, #22]
 8007a10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01b      	beq.n	8007a50 <USB_EPClearStall+0x106>
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a2e:	82bb      	strh	r3, [r7, #20]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	8abb      	ldrh	r3, [r7, #20]
 8007a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a66:	827b      	strh	r3, [r7, #18]
 8007a68:	8a7b      	ldrh	r3, [r7, #18]
 8007a6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a6e:	827b      	strh	r3, [r7, #18]
 8007a70:	8a7b      	ldrh	r3, [r7, #18]
 8007a72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a76:	827b      	strh	r3, [r7, #18]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	441a      	add	r2, r3
 8007a82:	8a7b      	ldrh	r3, [r7, #18]
 8007a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d103      	bne.n	8007abe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2280      	movs	r2, #128	@ 0x80
 8007aba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bc80      	pop	{r7}
 8007ac8:	4770      	bx	lr

08007aca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bc80      	pop	{r7}
 8007b0e:	4770      	bx	lr

08007b10 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b08b      	sub	sp, #44	@ 0x2c
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	4611      	mov	r1, r2
 8007b32:	461a      	mov	r2, r3
 8007b34:	460b      	mov	r3, r1
 8007b36:	80fb      	strh	r3, [r7, #6]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b3c:	88bb      	ldrh	r3, [r7, #4]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b4c:	88fb      	ldrh	r3, [r7, #6]
 8007b4e:	005a      	lsls	r2, r3, #1
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5e:	e01e      	b.n	8007b9e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	b21a      	sxth	r2, r3
 8007b70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	b21b      	sxth	r3, r3
 8007b78:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	8a7a      	ldrh	r2, [r7, #18]
 8007b7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	3302      	adds	r3, #2
 8007b84:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	3302      	adds	r3, #2
 8007b8a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	3301      	adds	r3, #1
 8007b96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1dd      	bne.n	8007b60 <USB_WritePMA+0x3a>
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
 8007ba8:	372c      	adds	r7, #44	@ 0x2c
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b08b      	sub	sp, #44	@ 0x2c
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	80fb      	strh	r3, [r7, #6]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bc6:	88bb      	ldrh	r3, [r7, #4]
 8007bc8:	085b      	lsrs	r3, r3, #1
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	005a      	lsls	r2, r3, #1
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007be2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007be8:	e01b      	b.n	8007c22 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	3302      	adds	r3, #2
 8007bf6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	3301      	adds	r3, #1
 8007c04:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	0a1b      	lsrs	r3, r3, #8
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	3301      	adds	r3, #1
 8007c14:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	3302      	adds	r3, #2
 8007c1a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e0      	bne.n	8007bea <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c28:	88bb      	ldrh	r3, [r7, #4]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d007      	beq.n	8007c44 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	701a      	strb	r2, [r3, #0]
  }
}
 8007c44:	bf00      	nop
 8007c46:	372c      	adds	r7, #44	@ 0x2c
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7c1b      	ldrb	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d115      	bne.n	8007c92 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	2181      	movs	r1, #129	@ 0x81
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fe33 	bl	80098da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c7e:	2202      	movs	r2, #2
 8007c80:	2101      	movs	r1, #1
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fe29 	bl	80098da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007c90:	e012      	b.n	8007cb8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c92:	2340      	movs	r3, #64	@ 0x40
 8007c94:	2202      	movs	r2, #2
 8007c96:	2181      	movs	r1, #129	@ 0x81
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fe1e 	bl	80098da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007ca4:	2340      	movs	r3, #64	@ 0x40
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	2101      	movs	r1, #1
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fe15 	bl	80098da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cb8:	2308      	movs	r3, #8
 8007cba:	2203      	movs	r2, #3
 8007cbc:	2182      	movs	r1, #130	@ 0x82
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fe0b 	bl	80098da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cca:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007cce:	f001 ff2b 	bl	8009b28 <USBD_static_malloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e026      	b.n	8007d38 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	7c1b      	ldrb	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d1e:	2101      	movs	r1, #1
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 feca 	bl	8009aba <USBD_LL_PrepareReceive>
 8007d26:	e007      	b.n	8007d38 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d2e:	2340      	movs	r3, #64	@ 0x40
 8007d30:	2101      	movs	r1, #1
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fec1 	bl	8009aba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d52:	2181      	movs	r1, #129	@ 0x81
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fde6 	bl	8009926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d60:	2101      	movs	r1, #1
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fddf 	bl	8009926 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d70:	2182      	movs	r1, #130	@ 0x82
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fdd7 	bl	8009926 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00e      	beq.n	8007da6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f001 fed1 	bl	8009b40 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dc0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d039      	beq.n	8007e4e <USBD_CDC_Setup+0x9e>
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d17f      	bne.n	8007ede <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	88db      	ldrh	r3, [r3, #6]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d029      	beq.n	8007e3a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	da11      	bge.n	8007e14 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007dfc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	88d2      	ldrh	r2, [r2, #6]
 8007e02:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e04:	6939      	ldr	r1, [r7, #16]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 f9d5 	bl	80091bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e12:	e06b      	b.n	8007eec <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785a      	ldrb	r2, [r3, #1]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e2a:	6939      	ldr	r1, [r7, #16]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	88db      	ldrh	r3, [r3, #6]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 f9f0 	bl	8009218 <USBD_CtlPrepareRx>
      break;
 8007e38:	e058      	b.n	8007eec <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	7850      	ldrb	r0, [r2, #1]
 8007e46:	2200      	movs	r2, #0
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	4798      	blx	r3
      break;
 8007e4c:	e04e      	b.n	8007eec <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	785b      	ldrb	r3, [r3, #1]
 8007e52:	2b0b      	cmp	r3, #11
 8007e54:	d02e      	beq.n	8007eb4 <USBD_CDC_Setup+0x104>
 8007e56:	2b0b      	cmp	r3, #11
 8007e58:	dc38      	bgt.n	8007ecc <USBD_CDC_Setup+0x11c>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <USBD_CDC_Setup+0xb4>
 8007e5e:	2b0a      	cmp	r3, #10
 8007e60:	d014      	beq.n	8007e8c <USBD_CDC_Setup+0xdc>
 8007e62:	e033      	b.n	8007ecc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d107      	bne.n	8007e7e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e6e:	f107 030c 	add.w	r3, r7, #12
 8007e72:	2202      	movs	r2, #2
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 f9a0 	bl	80091bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e7c:	e02e      	b.n	8007edc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 f931 	bl	80090e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	75fb      	strb	r3, [r7, #23]
          break;
 8007e8a:	e027      	b.n	8007edc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d107      	bne.n	8007ea6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e96:	f107 030f 	add.w	r3, r7, #15
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 f98c 	bl	80091bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ea4:	e01a      	b.n	8007edc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 f91d 	bl	80090e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb2:	e013      	b.n	8007edc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d00d      	beq.n	8007eda <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 f911 	bl	80090e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007eca:	e006      	b.n	8007eda <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 f90a 	bl	80090e8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ed8:	e000      	b.n	8007edc <USBD_CDC_Setup+0x12c>
          break;
 8007eda:	bf00      	nop
      }
      break;
 8007edc:	e006      	b.n	8007eec <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f901 	bl	80090e8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eea:	bf00      	nop
  }

  return ret;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f08:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f10:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d03a      	beq.n	8007f92 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	331c      	adds	r3, #28
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d029      	beq.n	8007f86 <USBD_CDC_DataIn+0x90>
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	331c      	adds	r3, #28
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	78f9      	ldrb	r1, [r7, #3]
 8007f46:	68b8      	ldr	r0, [r7, #8]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4403      	add	r3, r0
 8007f52:	3320      	adds	r3, #32
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f5a:	fb01 f303 	mul.w	r3, r1, r3
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d110      	bne.n	8007f86 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	331c      	adds	r3, #28
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f78:	78f9      	ldrb	r1, [r7, #3]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 fd78 	bl	8009a74 <USBD_LL_Transmit>
 8007f84:	e003      	b.n	8007f8e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e000      	b.n	8007f94 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f92:	2302      	movs	r3, #2
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fda3 	bl	8009b00 <USBD_LL_GetRxDataSize>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00d      	beq.n	8007fe8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4798      	blx	r3

    return USBD_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e000      	b.n	8007fea <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007fe8:	2302      	movs	r3, #2
  }
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008000:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008008:	2b00      	cmp	r3, #0
 800800a:	d014      	beq.n	8008036 <USBD_CDC_EP0_RxReady+0x44>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008012:	2bff      	cmp	r3, #255	@ 0xff
 8008014:	d00f      	beq.n	8008036 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008024:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800802c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22ff      	movs	r2, #255	@ 0xff
 8008032:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2243      	movs	r2, #67	@ 0x43
 800804c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800804e:	4b03      	ldr	r3, [pc, #12]	@ (800805c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000094 	.word	0x20000094

08008060 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2243      	movs	r2, #67	@ 0x43
 800806c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800806e:	4b03      	ldr	r3, [pc, #12]	@ (800807c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	20000050 	.word	0x20000050

08008080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2243      	movs	r2, #67	@ 0x43
 800808c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800808e:	4b03      	ldr	r3, [pc, #12]	@ (800809c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	200000d8 	.word	0x200000d8

080080a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220a      	movs	r2, #10
 80080ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2000000c 	.word	0x2000000c

080080c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080ca:	2302      	movs	r3, #2
 80080cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008100:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800810a:	88fa      	ldrh	r2, [r7, #6]
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr

0800811e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800812e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr

08008144 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008152:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d017      	beq.n	800818e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7c1b      	ldrb	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800816c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008170:	2101      	movs	r1, #1
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 fca1 	bl	8009aba <USBD_LL_PrepareReceive>
 8008178:	e007      	b.n	800818a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008180:	2340      	movs	r3, #64	@ 0x40
 8008182:	2101      	movs	r1, #1
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 fc98 	bl	8009aba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	e000      	b.n	8008190 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800818e:	2302      	movs	r3, #2
  }
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081ac:	2302      	movs	r3, #2
 80081ae:	e01a      	b.n	80081e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	79fa      	ldrb	r2, [r7, #7]
 80081dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f001 fb06 	bl	80097f0 <USBD_LL_Init>

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d006      	beq.n	8008210 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
 800820e:	e001      	b.n	8008214 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008210:	2302      	movs	r3, #2
 8008212:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fb3b 	bl	80098a4 <USBD_LL_Start>

  return USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008258:	2302      	movs	r3, #2
 800825a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00c      	beq.n	8008280 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	4611      	mov	r1, r2
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3

  return USBD_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fed7 	bl	8009076 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80082d6:	461a      	mov	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80082e4:	f003 031f 	and.w	r3, r3, #31
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d016      	beq.n	800831a <USBD_LL_SetupStage+0x6a>
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d81c      	bhi.n	800832a <USBD_LL_SetupStage+0x7a>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <USBD_LL_SetupStage+0x4a>
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d008      	beq.n	800830a <USBD_LL_SetupStage+0x5a>
 80082f8:	e017      	b.n	800832a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f9ca 	bl	800869c <USBD_StdDevReq>
      break;
 8008308:	e01a      	b.n	8008340 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa2c 	bl	8008770 <USBD_StdItfReq>
      break;
 8008318:	e012      	b.n	8008340 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fa6c 	bl	8008800 <USBD_StdEPReq>
      break;
 8008328:	e00a      	b.n	8008340 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008330:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008334:	b2db      	uxtb	r3, r3
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fb13 	bl	8009964 <USBD_LL_StallEP>
      break;
 800833e:	bf00      	nop
  }

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	460b      	mov	r3, r1
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d14b      	bne.n	80083f6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008364:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800836c:	2b03      	cmp	r3, #3
 800836e:	d134      	bne.n	80083da <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	d919      	bls.n	80083b0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	1ad2      	subs	r2, r2, r3
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008392:	429a      	cmp	r2, r3
 8008394:	d203      	bcs.n	800839e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800839a:	b29b      	uxth	r3, r3
 800839c:	e002      	b.n	80083a4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	461a      	mov	r2, r3
 80083a6:	6879      	ldr	r1, [r7, #4]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 ff53 	bl	8009254 <USBD_CtlContinueRx>
 80083ae:	e038      	b.n	8008422 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d105      	bne.n	80083d2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 ff50 	bl	8009278 <USBD_CtlSendStatus>
 80083d8:	e023      	b.n	8008422 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d11e      	bne.n	8008422 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80083ec:	2100      	movs	r1, #0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f001 fab8 	bl	8009964 <USBD_LL_StallEP>
 80083f4:	e015      	b.n	8008422 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00d      	beq.n	800841e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008408:	2b03      	cmp	r3, #3
 800840a:	d108      	bne.n	800841e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	7afa      	ldrb	r2, [r7, #11]
 8008416:	4611      	mov	r1, r2
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	4798      	blx	r3
 800841c:	e001      	b.n	8008422 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800841e:	2302      	movs	r3, #2
 8008420:	e000      	b.n	8008424 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	460b      	mov	r3, r1
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d17f      	bne.n	8008540 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3314      	adds	r3, #20
 8008444:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800844c:	2b02      	cmp	r3, #2
 800844e:	d15c      	bne.n	800850a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	429a      	cmp	r2, r3
 800845a:	d915      	bls.n	8008488 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	1ad2      	subs	r2, r2, r3
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	b29b      	uxth	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 febd 	bl	80091f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800847a:	2300      	movs	r3, #0
 800847c:	2200      	movs	r2, #0
 800847e:	2100      	movs	r1, #0
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f001 fb1a 	bl	8009aba <USBD_LL_PrepareReceive>
 8008486:	e04e      	b.n	8008526 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	6912      	ldr	r2, [r2, #16]
 8008490:	fbb3 f1f2 	udiv	r1, r3, r2
 8008494:	fb01 f202 	mul.w	r2, r1, r2
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d11c      	bne.n	80084d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d316      	bcc.n	80084d8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d20f      	bcs.n	80084d8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fe99 	bl	80091f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 faf2 	bl	8009aba <USBD_LL_PrepareReceive>
 80084d6:	e026      	b.n	8008526 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d105      	bne.n	80084fa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80084fa:	2180      	movs	r1, #128	@ 0x80
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 fa31 	bl	8009964 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f000 fecb 	bl	800929e <USBD_CtlReceiveStatus>
 8008508:	e00d      	b.n	8008526 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008510:	2b04      	cmp	r3, #4
 8008512:	d004      	beq.n	800851e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800851e:	2180      	movs	r1, #128	@ 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f001 fa1f 	bl	8009964 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800852c:	2b01      	cmp	r3, #1
 800852e:	d11d      	bne.n	800856c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f7ff fe81 	bl	8008238 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800853e:	e015      	b.n	800856c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00d      	beq.n	8008568 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008552:	2b03      	cmp	r3, #3
 8008554:	d108      	bne.n	8008568 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	7afa      	ldrb	r2, [r7, #11]
 8008560:	4611      	mov	r1, r2
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	4798      	blx	r3
 8008566:	e001      	b.n	800856c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008568:	2302      	movs	r3, #2
 800856a:	e000      	b.n	800856e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800857e:	2340      	movs	r3, #64	@ 0x40
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 f9a8 	bl	80098da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2240      	movs	r2, #64	@ 0x40
 8008596:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800859a:	2340      	movs	r3, #64	@ 0x40
 800859c:	2200      	movs	r2, #0
 800859e:	2180      	movs	r1, #128	@ 0x80
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f99a 	bl	80098da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2240      	movs	r2, #64	@ 0x40
 80085b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6852      	ldr	r2, [r2, #4]
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	4611      	mov	r1, r2
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
  }

  return USBD_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	78fa      	ldrb	r2, [r7, #3]
 8008608:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	bc80      	pop	{r7}
 8008614:	4770      	bx	lr

08008616 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2204      	movs	r2, #4
 800862e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	bc80      	pop	{r7}
 800863c:	4770      	bx	lr

0800863e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800864c:	2b04      	cmp	r3, #4
 800864e:	d105      	bne.n	800865c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008676:	2b03      	cmp	r3, #3
 8008678:	d10b      	bne.n	8008692 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086b2:	2b40      	cmp	r3, #64	@ 0x40
 80086b4:	d005      	beq.n	80086c2 <USBD_StdDevReq+0x26>
 80086b6:	2b40      	cmp	r3, #64	@ 0x40
 80086b8:	d84f      	bhi.n	800875a <USBD_StdDevReq+0xbe>
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <USBD_StdDevReq+0x36>
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d14b      	bne.n	800875a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	4798      	blx	r3
      break;
 80086d0:	e048      	b.n	8008764 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	785b      	ldrb	r3, [r3, #1]
 80086d6:	2b09      	cmp	r3, #9
 80086d8:	d839      	bhi.n	800874e <USBD_StdDevReq+0xb2>
 80086da:	a201      	add	r2, pc, #4	@ (adr r2, 80086e0 <USBD_StdDevReq+0x44>)
 80086dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e0:	08008731 	.word	0x08008731
 80086e4:	08008745 	.word	0x08008745
 80086e8:	0800874f 	.word	0x0800874f
 80086ec:	0800873b 	.word	0x0800873b
 80086f0:	0800874f 	.word	0x0800874f
 80086f4:	08008713 	.word	0x08008713
 80086f8:	08008709 	.word	0x08008709
 80086fc:	0800874f 	.word	0x0800874f
 8008700:	08008727 	.word	0x08008727
 8008704:	0800871d 	.word	0x0800871d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f9dc 	bl	8008ac8 <USBD_GetDescriptor>
          break;
 8008710:	e022      	b.n	8008758 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fb3f 	bl	8008d98 <USBD_SetAddress>
          break;
 800871a:	e01d      	b.n	8008758 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fb7e 	bl	8008e20 <USBD_SetConfig>
          break;
 8008724:	e018      	b.n	8008758 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fc07 	bl	8008f3c <USBD_GetConfig>
          break;
 800872e:	e013      	b.n	8008758 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fc37 	bl	8008fa6 <USBD_GetStatus>
          break;
 8008738:	e00e      	b.n	8008758 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc65 	bl	800900c <USBD_SetFeature>
          break;
 8008742:	e009      	b.n	8008758 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fc74 	bl	8009034 <USBD_ClrFeature>
          break;
 800874c:	e004      	b.n	8008758 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fcc9 	bl	80090e8 <USBD_CtlError>
          break;
 8008756:	bf00      	nop
      }
      break;
 8008758:	e004      	b.n	8008764 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fcc3 	bl	80090e8 <USBD_CtlError>
      break;
 8008762:	bf00      	nop
  }

  return ret;
 8008764:	7bfb      	ldrb	r3, [r7, #15]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop

08008770 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008786:	2b40      	cmp	r3, #64	@ 0x40
 8008788:	d005      	beq.n	8008796 <USBD_StdItfReq+0x26>
 800878a:	2b40      	cmp	r3, #64	@ 0x40
 800878c:	d82e      	bhi.n	80087ec <USBD_StdItfReq+0x7c>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <USBD_StdItfReq+0x26>
 8008792:	2b20      	cmp	r3, #32
 8008794:	d12a      	bne.n	80087ec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800879c:	3b01      	subs	r3, #1
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d81d      	bhi.n	80087de <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	889b      	ldrh	r3, [r3, #4]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d813      	bhi.n	80087d4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	4798      	blx	r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88db      	ldrh	r3, [r3, #6]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d110      	bne.n	80087e8 <USBD_StdItfReq+0x78>
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10d      	bne.n	80087e8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fd53 	bl	8009278 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087d2:	e009      	b.n	80087e8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fc86 	bl	80090e8 <USBD_CtlError>
          break;
 80087dc:	e004      	b.n	80087e8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fc81 	bl	80090e8 <USBD_CtlError>
          break;
 80087e6:	e000      	b.n	80087ea <USBD_StdItfReq+0x7a>
          break;
 80087e8:	bf00      	nop
      }
      break;
 80087ea:	e004      	b.n	80087f6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fc7a 	bl	80090e8 <USBD_CtlError>
      break;
 80087f4:	bf00      	nop
  }

  return USBD_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	889b      	ldrh	r3, [r3, #4]
 8008812:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800881c:	2b40      	cmp	r3, #64	@ 0x40
 800881e:	d007      	beq.n	8008830 <USBD_StdEPReq+0x30>
 8008820:	2b40      	cmp	r3, #64	@ 0x40
 8008822:	f200 8146 	bhi.w	8008ab2 <USBD_StdEPReq+0x2b2>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <USBD_StdEPReq+0x40>
 800882a:	2b20      	cmp	r3, #32
 800882c:	f040 8141 	bne.w	8008ab2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
      break;
 800883e:	e13d      	b.n	8008abc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008848:	2b20      	cmp	r3, #32
 800884a:	d10a      	bne.n	8008862 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	4798      	blx	r3
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	e12d      	b.n	8008abe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b03      	cmp	r3, #3
 8008868:	d007      	beq.n	800887a <USBD_StdEPReq+0x7a>
 800886a:	2b03      	cmp	r3, #3
 800886c:	f300 811b 	bgt.w	8008aa6 <USBD_StdEPReq+0x2a6>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d072      	beq.n	800895a <USBD_StdEPReq+0x15a>
 8008874:	2b01      	cmp	r3, #1
 8008876:	d03a      	beq.n	80088ee <USBD_StdEPReq+0xee>
 8008878:	e115      	b.n	8008aa6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008880:	2b02      	cmp	r3, #2
 8008882:	d002      	beq.n	800888a <USBD_StdEPReq+0x8a>
 8008884:	2b03      	cmp	r3, #3
 8008886:	d015      	beq.n	80088b4 <USBD_StdEPReq+0xb4>
 8008888:	e02b      	b.n	80088e2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00c      	beq.n	80088aa <USBD_StdEPReq+0xaa>
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	2b80      	cmp	r3, #128	@ 0x80
 8008894:	d009      	beq.n	80088aa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 f862 	bl	8009964 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088a0:	2180      	movs	r1, #128	@ 0x80
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 f85e 	bl	8009964 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088a8:	e020      	b.n	80088ec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fc1b 	bl	80090e8 <USBD_CtlError>
              break;
 80088b2:	e01b      	b.n	80088ec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	885b      	ldrh	r3, [r3, #2]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10e      	bne.n	80088da <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <USBD_StdEPReq+0xda>
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b80      	cmp	r3, #128	@ 0x80
 80088c6:	d008      	beq.n	80088da <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	88db      	ldrh	r3, [r3, #6]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f001 f845 	bl	8009964 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fccc 	bl	8009278 <USBD_CtlSendStatus>

              break;
 80088e0:	e004      	b.n	80088ec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fbff 	bl	80090e8 <USBD_CtlError>
              break;
 80088ea:	bf00      	nop
          }
          break;
 80088ec:	e0e0      	b.n	8008ab0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d002      	beq.n	80088fe <USBD_StdEPReq+0xfe>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d015      	beq.n	8008928 <USBD_StdEPReq+0x128>
 80088fc:	e026      	b.n	800894c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00c      	beq.n	800891e <USBD_StdEPReq+0x11e>
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	2b80      	cmp	r3, #128	@ 0x80
 8008908:	d009      	beq.n	800891e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 f828 	bl	8009964 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008914:	2180      	movs	r1, #128	@ 0x80
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 f824 	bl	8009964 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800891c:	e01c      	b.n	8008958 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fbe1 	bl	80090e8 <USBD_CtlError>
              break;
 8008926:	e017      	b.n	8008958 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	885b      	ldrh	r3, [r3, #2]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d112      	bne.n	8008956 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f82f 	bl	80099a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc97 	bl	8009278 <USBD_CtlSendStatus>
              }
              break;
 800894a:	e004      	b.n	8008956 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fbca 	bl	80090e8 <USBD_CtlError>
              break;
 8008954:	e000      	b.n	8008958 <USBD_StdEPReq+0x158>
              break;
 8008956:	bf00      	nop
          }
          break;
 8008958:	e0aa      	b.n	8008ab0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008960:	2b02      	cmp	r3, #2
 8008962:	d002      	beq.n	800896a <USBD_StdEPReq+0x16a>
 8008964:	2b03      	cmp	r3, #3
 8008966:	d032      	beq.n	80089ce <USBD_StdEPReq+0x1ce>
 8008968:	e097      	b.n	8008a9a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <USBD_StdEPReq+0x180>
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b80      	cmp	r3, #128	@ 0x80
 8008974:	d004      	beq.n	8008980 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fbb5 	bl	80090e8 <USBD_CtlError>
                break;
 800897e:	e091      	b.n	8008aa4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008984:	2b00      	cmp	r3, #0
 8008986:	da0b      	bge.n	80089a0 <USBD_StdEPReq+0x1a0>
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	3310      	adds	r3, #16
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	3304      	adds	r3, #4
 800899e:	e00b      	b.n	80089b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	4413      	add	r3, r2
 80089b6:	3304      	adds	r3, #4
 80089b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2202      	movs	r2, #2
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fbf8 	bl	80091bc <USBD_CtlSendData>
              break;
 80089cc:	e06a      	b.n	8008aa4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	da11      	bge.n	80089fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
 80089d8:	f003 020f 	and.w	r2, r3, #15
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	3318      	adds	r3, #24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d117      	bne.n	8008a20 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fb78 	bl	80090e8 <USBD_CtlError>
                  break;
 80089f8:	e054      	b.n	8008aa4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	f003 020f 	and.w	r2, r3, #15
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	440b      	add	r3, r1
 8008a0c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fb65 	bl	80090e8 <USBD_CtlError>
                  break;
 8008a1e:	e041      	b.n	8008aa4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	da0b      	bge.n	8008a40 <USBD_StdEPReq+0x240>
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	3310      	adds	r3, #16
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	e00b      	b.n	8008a58 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
 8008a42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	4413      	add	r3, r2
 8008a56:	3304      	adds	r3, #4
 8008a58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <USBD_StdEPReq+0x266>
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b80      	cmp	r3, #128	@ 0x80
 8008a64:	d103      	bne.n	8008a6e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	e00e      	b.n	8008a8c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 ffb4 	bl	80099e0 <USBD_LL_IsStallEP>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2201      	movs	r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e002      	b.n	8008a8c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fb92 	bl	80091bc <USBD_CtlSendData>
              break;
 8008a98:	e004      	b.n	8008aa4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fb23 	bl	80090e8 <USBD_CtlError>
              break;
 8008aa2:	bf00      	nop
          }
          break;
 8008aa4:	e004      	b.n	8008ab0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fb1d 	bl	80090e8 <USBD_CtlError>
          break;
 8008aae:	bf00      	nop
      }
      break;
 8008ab0:	e004      	b.n	8008abc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fb17 	bl	80090e8 <USBD_CtlError>
      break;
 8008aba:	bf00      	nop
  }

  return ret;
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	0a1b      	lsrs	r3, r3, #8
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	f200 8128 	bhi.w	8008d3e <USBD_GetDescriptor+0x276>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <USBD_GetDescriptor+0x2c>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b29 	.word	0x08008b29
 8008afc:	08008b69 	.word	0x08008b69
 8008b00:	08008d3f 	.word	0x08008d3f
 8008b04:	08008d3f 	.word	0x08008d3f
 8008b08:	08008cdf 	.word	0x08008cdf
 8008b0c:	08008d0b 	.word	0x08008d0b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	7c12      	ldrb	r2, [r2, #16]
 8008b1c:	f107 0108 	add.w	r1, r7, #8
 8008b20:	4610      	mov	r0, r2
 8008b22:	4798      	blx	r3
 8008b24:	60f8      	str	r0, [r7, #12]
      break;
 8008b26:	e112      	b.n	8008d4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7c1b      	ldrb	r3, [r3, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10d      	bne.n	8008b4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b38:	f107 0208 	add.w	r2, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	2202      	movs	r2, #2
 8008b48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b4a:	e100      	b.n	8008d4e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b54:	f107 0208 	add.w	r2, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3301      	adds	r3, #1
 8008b62:	2202      	movs	r2, #2
 8008b64:	701a      	strb	r2, [r3, #0]
      break;
 8008b66:	e0f2      	b.n	8008d4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	885b      	ldrh	r3, [r3, #2]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b05      	cmp	r3, #5
 8008b70:	f200 80ac 	bhi.w	8008ccc <USBD_GetDescriptor+0x204>
 8008b74:	a201      	add	r2, pc, #4	@ (adr r2, 8008b7c <USBD_GetDescriptor+0xb4>)
 8008b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008b95 	.word	0x08008b95
 8008b80:	08008bc9 	.word	0x08008bc9
 8008b84:	08008bfd 	.word	0x08008bfd
 8008b88:	08008c31 	.word	0x08008c31
 8008b8c:	08008c65 	.word	0x08008c65
 8008b90:	08008c99 	.word	0x08008c99
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00b      	beq.n	8008bb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	7c12      	ldrb	r2, [r2, #16]
 8008bac:	f107 0108 	add.w	r1, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bb6:	e091      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fa94 	bl	80090e8 <USBD_CtlError>
            err++;
 8008bc0:	7afb      	ldrb	r3, [r7, #11]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bc6:	e089      	b.n	8008cdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00b      	beq.n	8008bec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	7c12      	ldrb	r2, [r2, #16]
 8008be0:	f107 0108 	add.w	r1, r7, #8
 8008be4:	4610      	mov	r0, r2
 8008be6:	4798      	blx	r3
 8008be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bea:	e077      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa7a 	bl	80090e8 <USBD_CtlError>
            err++;
 8008bf4:	7afb      	ldrb	r3, [r7, #11]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bfa:	e06f      	b.n	8008cdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d00b      	beq.n	8008c20 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	7c12      	ldrb	r2, [r2, #16]
 8008c14:	f107 0108 	add.w	r1, r7, #8
 8008c18:	4610      	mov	r0, r2
 8008c1a:	4798      	blx	r3
 8008c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c1e:	e05d      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa60 	bl	80090e8 <USBD_CtlError>
            err++;
 8008c28:	7afb      	ldrb	r3, [r7, #11]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c2e:	e055      	b.n	8008cdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00b      	beq.n	8008c54 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	7c12      	ldrb	r2, [r2, #16]
 8008c48:	f107 0108 	add.w	r1, r7, #8
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c52:	e043      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa46 	bl	80090e8 <USBD_CtlError>
            err++;
 8008c5c:	7afb      	ldrb	r3, [r7, #11]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	72fb      	strb	r3, [r7, #11]
          break;
 8008c62:	e03b      	b.n	8008cdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	7c12      	ldrb	r2, [r2, #16]
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c86:	e029      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fa2c 	bl	80090e8 <USBD_CtlError>
            err++;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
 8008c92:	3301      	adds	r3, #1
 8008c94:	72fb      	strb	r3, [r7, #11]
          break;
 8008c96:	e021      	b.n	8008cdc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	7c12      	ldrb	r2, [r2, #16]
 8008cb0:	f107 0108 	add.w	r1, r7, #8
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4798      	blx	r3
 8008cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cba:	e00f      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa12 	bl	80090e8 <USBD_CtlError>
            err++;
 8008cc4:	7afb      	ldrb	r3, [r7, #11]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008cca:	e007      	b.n	8008cdc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fa0a 	bl	80090e8 <USBD_CtlError>
          err++;
 8008cd4:	7afb      	ldrb	r3, [r7, #11]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008cda:	e038      	b.n	8008d4e <USBD_GetDescriptor+0x286>
 8008cdc:	e037      	b.n	8008d4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	7c1b      	ldrb	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d109      	bne.n	8008cfa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cee:	f107 0208 	add.w	r2, r7, #8
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	4798      	blx	r3
 8008cf6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cf8:	e029      	b.n	8008d4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f9f3 	bl	80090e8 <USBD_CtlError>
        err++;
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	3301      	adds	r3, #1
 8008d06:	72fb      	strb	r3, [r7, #11]
      break;
 8008d08:	e021      	b.n	8008d4e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	7c1b      	ldrb	r3, [r3, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10d      	bne.n	8008d2e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d1a:	f107 0208 	add.w	r2, r7, #8
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4798      	blx	r3
 8008d22:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	2207      	movs	r2, #7
 8008d2a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d2c:	e00f      	b.n	8008d4e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9d9 	bl	80090e8 <USBD_CtlError>
        err++;
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d3c:	e007      	b.n	8008d4e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f9d1 	bl	80090e8 <USBD_CtlError>
      err++;
 8008d46:	7afb      	ldrb	r3, [r7, #11]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d4c:	bf00      	nop
  }

  if (err != 0U)
 8008d4e:	7afb      	ldrb	r3, [r7, #11]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d11c      	bne.n	8008d8e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008d54:	893b      	ldrh	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d011      	beq.n	8008d7e <USBD_GetDescriptor+0x2b6>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	88da      	ldrh	r2, [r3, #6]
 8008d66:	893b      	ldrh	r3, [r7, #8]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	bf28      	it	cs
 8008d6c:	4613      	movcs	r3, r2
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d72:	893b      	ldrh	r3, [r7, #8]
 8008d74:	461a      	mov	r2, r3
 8008d76:	68f9      	ldr	r1, [r7, #12]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa1f 	bl	80091bc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	88db      	ldrh	r3, [r3, #6]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d104      	bne.n	8008d90 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa76 	bl	8009278 <USBD_CtlSendStatus>
 8008d8c:	e000      	b.n	8008d90 <USBD_GetDescriptor+0x2c8>
    return;
 8008d8e:	bf00      	nop
    }
  }
}
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop

08008d98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	889b      	ldrh	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d130      	bne.n	8008e0c <USBD_SetAddress+0x74>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	88db      	ldrh	r3, [r3, #6]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d12c      	bne.n	8008e0c <USBD_SetAddress+0x74>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	885b      	ldrh	r3, [r3, #2]
 8008db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008db8:	d828      	bhi.n	8008e0c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d104      	bne.n	8008dda <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f988 	bl	80090e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd8:	e01d      	b.n	8008e16 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7bfa      	ldrb	r2, [r7, #15]
 8008dde:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fe25 	bl	8009a36 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fa43 	bl	8009278 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008df2:	7bfb      	ldrb	r3, [r7, #15]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d004      	beq.n	8008e02 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e00:	e009      	b.n	8008e16 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0a:	e004      	b.n	8008e16 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f96a 	bl	80090e8 <USBD_CtlError>
  }
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	4b41      	ldr	r3, [pc, #260]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008e32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e34:	4b40      	ldr	r3, [pc, #256]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d904      	bls.n	8008e46 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f952 	bl	80090e8 <USBD_CtlError>
 8008e44:	e075      	b.n	8008f32 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d002      	beq.n	8008e56 <USBD_SetConfig+0x36>
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d023      	beq.n	8008e9c <USBD_SetConfig+0x7c>
 8008e54:	e062      	b.n	8008f1c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008e56:	4b38      	ldr	r3, [pc, #224]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01a      	beq.n	8008e94 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008e5e:	4b36      	ldr	r3, [pc, #216]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e70:	4b31      	ldr	r3, [pc, #196]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff f9e8 	bl	800824c <USBD_SetClassConfig>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d104      	bne.n	8008e8c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f92f 	bl	80090e8 <USBD_CtlError>
            return;
 8008e8a:	e052      	b.n	8008f32 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f9f3 	bl	8009278 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e92:	e04e      	b.n	8008f32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f9ef 	bl	8009278 <USBD_CtlSendStatus>
        break;
 8008e9a:	e04a      	b.n	8008f32 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e9c:	4b26      	ldr	r3, [pc, #152]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d112      	bne.n	8008eca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008eac:	4b22      	ldr	r3, [pc, #136]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008eb6:	4b20      	ldr	r3, [pc, #128]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff f9e4 	bl	800828a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f9d8 	bl	8009278 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ec8:	e033      	b.n	8008f32 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008eca:	4b1b      	ldr	r3, [pc, #108]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d01d      	beq.n	8008f14 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff f9d2 	bl	800828a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ee6:	4b14      	ldr	r3, [pc, #80]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ef0:	4b11      	ldr	r3, [pc, #68]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff f9a8 	bl	800824c <USBD_SetClassConfig>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d104      	bne.n	8008f0c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f8ef 	bl	80090e8 <USBD_CtlError>
            return;
 8008f0a:	e012      	b.n	8008f32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 f9b3 	bl	8009278 <USBD_CtlSendStatus>
        break;
 8008f12:	e00e      	b.n	8008f32 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f9af 	bl	8009278 <USBD_CtlSendStatus>
        break;
 8008f1a:	e00a      	b.n	8008f32 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f8e2 	bl	80090e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f24:	4b04      	ldr	r3, [pc, #16]	@ (8008f38 <USBD_SetConfig+0x118>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7ff f9ad 	bl	800828a <USBD_ClrClassConfig>
        break;
 8008f30:	bf00      	nop
    }
  }
}
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	200002ec 	.word	0x200002ec

08008f3c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	88db      	ldrh	r3, [r3, #6]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d004      	beq.n	8008f58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f8c9 	bl	80090e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f56:	e022      	b.n	8008f9e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	dc02      	bgt.n	8008f68 <USBD_GetConfig+0x2c>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dc03      	bgt.n	8008f6e <USBD_GetConfig+0x32>
 8008f66:	e015      	b.n	8008f94 <USBD_GetConfig+0x58>
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d00b      	beq.n	8008f84 <USBD_GetConfig+0x48>
 8008f6c:	e012      	b.n	8008f94 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	3308      	adds	r3, #8
 8008f78:	2201      	movs	r2, #1
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 f91d 	bl	80091bc <USBD_CtlSendData>
        break;
 8008f82:	e00c      	b.n	8008f9e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3304      	adds	r3, #4
 8008f88:	2201      	movs	r2, #1
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f915 	bl	80091bc <USBD_CtlSendData>
        break;
 8008f92:	e004      	b.n	8008f9e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f8a6 	bl	80090e8 <USBD_CtlError>
        break;
 8008f9c:	bf00      	nop
}
 8008f9e:	bf00      	nop
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d81e      	bhi.n	8008ffa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	88db      	ldrh	r3, [r3, #6]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d004      	beq.n	8008fce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f88e 	bl	80090e8 <USBD_CtlError>
        break;
 8008fcc:	e01a      	b.n	8009004 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d005      	beq.n	8008fea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f043 0202 	orr.w	r2, r3, #2
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	330c      	adds	r3, #12
 8008fee:	2202      	movs	r2, #2
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f8e2 	bl	80091bc <USBD_CtlSendData>
      break;
 8008ff8:	e004      	b.n	8009004 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f873 	bl	80090e8 <USBD_CtlError>
      break;
 8009002:	bf00      	nop
  }
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	885b      	ldrh	r3, [r3, #2]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d106      	bne.n	800902c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f926 	bl	8009278 <USBD_CtlSendStatus>
  }
}
 800902c:	bf00      	nop
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009044:	3b01      	subs	r3, #1
 8009046:	2b02      	cmp	r3, #2
 8009048:	d80b      	bhi.n	8009062 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d10c      	bne.n	800906c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f90c 	bl	8009278 <USBD_CtlSendStatus>
      }
      break;
 8009060:	e004      	b.n	800906c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f83f 	bl	80090e8 <USBD_CtlError>
      break;
 800906a:	e000      	b.n	800906e <USBD_ClrFeature+0x3a>
      break;
 800906c:	bf00      	nop
  }
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009076:	b480      	push	{r7}
 8009078:	b083      	sub	sp, #12
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781a      	ldrb	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	785a      	ldrb	r2, [r3, #1]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	3302      	adds	r3, #2
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	461a      	mov	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	3303      	adds	r3, #3
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	4413      	add	r3, r2
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	3304      	adds	r3, #4
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	3305      	adds	r3, #5
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	4413      	add	r3, r2
 80090be:	b29a      	uxth	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	3306      	adds	r3, #6
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	3307      	adds	r3, #7
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	021b      	lsls	r3, r3, #8
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	4413      	add	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	80da      	strh	r2, [r3, #6]

}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr

080090e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80090f2:	2180      	movs	r1, #128	@ 0x80
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fc35 	bl	8009964 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80090fa:	2100      	movs	r1, #0
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fc31 	bl	8009964 <USBD_LL_StallEP>
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d032      	beq.n	8009186 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 f834 	bl	800918e <USBD_GetLen>
 8009126:	4603      	mov	r3, r0
 8009128:	3301      	adds	r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	75fa      	strb	r2, [r7, #23]
 800913a:	461a      	mov	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4413      	add	r3, r2
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	75fa      	strb	r2, [r7, #23]
 800914c:	461a      	mov	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	2203      	movs	r2, #3
 8009154:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009156:	e012      	b.n	800917e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	60fa      	str	r2, [r7, #12]
 800915e:	7dfa      	ldrb	r2, [r7, #23]
 8009160:	1c51      	adds	r1, r2, #1
 8009162:	75f9      	strb	r1, [r7, #23]
 8009164:	4611      	mov	r1, r2
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	440a      	add	r2, r1
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	1c5a      	adds	r2, r3, #1
 8009172:	75fa      	strb	r2, [r7, #23]
 8009174:	461a      	mov	r2, r3
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	4413      	add	r3, r2
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1e8      	bne.n	8009158 <USBD_GetString+0x4e>
    }
  }
}
 8009186:	bf00      	nop
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800919a:	e005      	b.n	80091a8 <USBD_GetLen+0x1a>
  {
    len++;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	3301      	adds	r3, #1
 80091a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3301      	adds	r3, #1
 80091a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1f5      	bne.n	800919c <USBD_GetLen+0xe>
  }

  return len;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bc80      	pop	{r7}
 80091ba:	4770      	bx	lr

080091bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	4613      	mov	r3, r2
 80091c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2202      	movs	r2, #2
 80091ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80091d8:	88fa      	ldrh	r2, [r7, #6]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	2100      	movs	r1, #0
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 fc45 	bl	8009a74 <USBD_LL_Transmit>

  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	4613      	mov	r3, r2
 8009200:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	68ba      	ldr	r2, [r7, #8]
 8009206:	2100      	movs	r1, #0
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fc33 	bl	8009a74 <USBD_LL_Transmit>

  return USBD_OK;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2203      	movs	r2, #3
 800922a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800922e:	88fa      	ldrh	r2, [r7, #6]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009236:	88fa      	ldrh	r2, [r7, #6]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fc38 	bl	8009aba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	2100      	movs	r1, #0
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f000 fc26 	bl	8009aba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2204      	movs	r2, #4
 8009284:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009288:	2300      	movs	r3, #0
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fbf0 	bl	8009a74 <USBD_LL_Transmit>

  return USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2205      	movs	r2, #5
 80092aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092ae:	2300      	movs	r3, #0
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fc00 	bl	8009aba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80092c8:	2200      	movs	r2, #0
 80092ca:	4912      	ldr	r1, [pc, #72]	@ (8009314 <MX_USB_DEVICE_Init+0x50>)
 80092cc:	4812      	ldr	r0, [pc, #72]	@ (8009318 <MX_USB_DEVICE_Init+0x54>)
 80092ce:	f7fe ff63 	bl	8008198 <USBD_Init>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80092d8:	f7f7 fea8 	bl	800102c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092dc:	490f      	ldr	r1, [pc, #60]	@ (800931c <MX_USB_DEVICE_Init+0x58>)
 80092de:	480e      	ldr	r0, [pc, #56]	@ (8009318 <MX_USB_DEVICE_Init+0x54>)
 80092e0:	f7fe ff85 	bl	80081ee <USBD_RegisterClass>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092ea:	f7f7 fe9f 	bl	800102c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092ee:	490c      	ldr	r1, [pc, #48]	@ (8009320 <MX_USB_DEVICE_Init+0x5c>)
 80092f0:	4809      	ldr	r0, [pc, #36]	@ (8009318 <MX_USB_DEVICE_Init+0x54>)
 80092f2:	f7fe fee5 	bl	80080c0 <USBD_CDC_RegisterInterface>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092fc:	f7f7 fe96 	bl	800102c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009300:	4805      	ldr	r0, [pc, #20]	@ (8009318 <MX_USB_DEVICE_Init+0x54>)
 8009302:	f7fe ff8d 	bl	8008220 <USBD_Start>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800930c:	f7f7 fe8e 	bl	800102c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009310:	bf00      	nop
 8009312:	bd80      	pop	{r7, pc}
 8009314:	2000012c 	.word	0x2000012c
 8009318:	200002f0 	.word	0x200002f0
 800931c:	20000018 	.word	0x20000018
 8009320:	2000011c 	.word	0x2000011c

08009324 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009328:	2200      	movs	r2, #0
 800932a:	4905      	ldr	r1, [pc, #20]	@ (8009340 <CDC_Init_FS+0x1c>)
 800932c:	4805      	ldr	r0, [pc, #20]	@ (8009344 <CDC_Init_FS+0x20>)
 800932e:	f7fe fedd 	bl	80080ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009332:	4905      	ldr	r1, [pc, #20]	@ (8009348 <CDC_Init_FS+0x24>)
 8009334:	4803      	ldr	r0, [pc, #12]	@ (8009344 <CDC_Init_FS+0x20>)
 8009336:	f7fe fef2 	bl	800811e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800933a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800933c:	4618      	mov	r0, r3
 800933e:	bd80      	pop	{r7, pc}
 8009340:	200009b4 	.word	0x200009b4
 8009344:	200002f0 	.word	0x200002f0
 8009348:	200005b4 	.word	0x200005b4

0800934c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009352:	4618      	mov	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	bc80      	pop	{r7}
 8009358:	4770      	bx	lr
	...

0800935c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
 8009368:	4613      	mov	r3, r2
 800936a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	2b23      	cmp	r3, #35	@ 0x23
 8009370:	d84a      	bhi.n	8009408 <CDC_Control_FS+0xac>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <CDC_Control_FS+0x1c>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	08009409 	.word	0x08009409
 800937c:	08009409 	.word	0x08009409
 8009380:	08009409 	.word	0x08009409
 8009384:	08009409 	.word	0x08009409
 8009388:	08009409 	.word	0x08009409
 800938c:	08009409 	.word	0x08009409
 8009390:	08009409 	.word	0x08009409
 8009394:	08009409 	.word	0x08009409
 8009398:	08009409 	.word	0x08009409
 800939c:	08009409 	.word	0x08009409
 80093a0:	08009409 	.word	0x08009409
 80093a4:	08009409 	.word	0x08009409
 80093a8:	08009409 	.word	0x08009409
 80093ac:	08009409 	.word	0x08009409
 80093b0:	08009409 	.word	0x08009409
 80093b4:	08009409 	.word	0x08009409
 80093b8:	08009409 	.word	0x08009409
 80093bc:	08009409 	.word	0x08009409
 80093c0:	08009409 	.word	0x08009409
 80093c4:	08009409 	.word	0x08009409
 80093c8:	08009409 	.word	0x08009409
 80093cc:	08009409 	.word	0x08009409
 80093d0:	08009409 	.word	0x08009409
 80093d4:	08009409 	.word	0x08009409
 80093d8:	08009409 	.word	0x08009409
 80093dc:	08009409 	.word	0x08009409
 80093e0:	08009409 	.word	0x08009409
 80093e4:	08009409 	.word	0x08009409
 80093e8:	08009409 	.word	0x08009409
 80093ec:	08009409 	.word	0x08009409
 80093f0:	08009409 	.word	0x08009409
 80093f4:	08009409 	.word	0x08009409
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009409 	.word	0x08009409
 8009400:	08009409 	.word	0x08009409
 8009404:	08009409 	.word	0x08009409
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009408:	bf00      	nop
  }

  return (USBD_OK);
 800940a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	bc80      	pop	{r7}
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop

08009418 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	4805      	ldr	r0, [pc, #20]	@ (800943c <CDC_Receive_FS+0x24>)
 8009426:	f7fe fe7a 	bl	800811e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800942a:	4804      	ldr	r0, [pc, #16]	@ (800943c <CDC_Receive_FS+0x24>)
 800942c:	f7fe fe8a 	bl	8008144 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009430:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	200002f0 	.word	0x200002f0

08009440 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2212      	movs	r2, #18
 8009450:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009452:	4b03      	ldr	r3, [pc, #12]	@ (8009460 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	bc80      	pop	{r7}
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20000148 	.word	0x20000148

08009464 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2204      	movs	r2, #4
 8009474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009476:	4b03      	ldr	r3, [pc, #12]	@ (8009484 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	bc80      	pop	{r7}
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	2000015c 	.word	0x2000015c

08009488 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	6039      	str	r1, [r7, #0]
 8009492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d105      	bne.n	80094a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	4907      	ldr	r1, [pc, #28]	@ (80094bc <USBD_FS_ProductStrDescriptor+0x34>)
 800949e:	4808      	ldr	r0, [pc, #32]	@ (80094c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80094a0:	f7ff fe33 	bl	800910a <USBD_GetString>
 80094a4:	e004      	b.n	80094b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	4904      	ldr	r1, [pc, #16]	@ (80094bc <USBD_FS_ProductStrDescriptor+0x34>)
 80094aa:	4805      	ldr	r0, [pc, #20]	@ (80094c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80094ac:	f7ff fe2d 	bl	800910a <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b0:	4b02      	ldr	r3, [pc, #8]	@ (80094bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000db4 	.word	0x20000db4
 80094c0:	0800b25c 	.word	0x0800b25c

080094c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	4904      	ldr	r1, [pc, #16]	@ (80094e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094d4:	4804      	ldr	r0, [pc, #16]	@ (80094e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094d6:	f7ff fe18 	bl	800910a <USBD_GetString>
  return USBD_StrDesc;
 80094da:	4b02      	ldr	r3, [pc, #8]	@ (80094e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20000db4 	.word	0x20000db4
 80094e8:	0800b274 	.word	0x0800b274

080094ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	221a      	movs	r2, #26
 80094fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80094fe:	f000 f843 	bl	8009588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009502:	4b02      	ldr	r3, [pc, #8]	@ (800950c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000160 	.word	0x20000160

08009510 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	4603      	mov	r3, r0
 8009518:	6039      	str	r1, [r7, #0]
 800951a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	4907      	ldr	r1, [pc, #28]	@ (8009544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009526:	4808      	ldr	r0, [pc, #32]	@ (8009548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009528:	f7ff fdef 	bl	800910a <USBD_GetString>
 800952c:	e004      	b.n	8009538 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4904      	ldr	r1, [pc, #16]	@ (8009544 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009532:	4805      	ldr	r0, [pc, #20]	@ (8009548 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009534:	f7ff fde9 	bl	800910a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009538:	4b02      	ldr	r3, [pc, #8]	@ (8009544 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	20000db4 	.word	0x20000db4
 8009548:	0800b288 	.word	0x0800b288

0800954c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4907      	ldr	r1, [pc, #28]	@ (8009580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009562:	4808      	ldr	r0, [pc, #32]	@ (8009584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009564:	f7ff fdd1 	bl	800910a <USBD_GetString>
 8009568:	e004      	b.n	8009574 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4904      	ldr	r1, [pc, #16]	@ (8009580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800956e:	4805      	ldr	r0, [pc, #20]	@ (8009584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009570:	f7ff fdcb 	bl	800910a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009574:	4b02      	ldr	r3, [pc, #8]	@ (8009580 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20000db4 	.word	0x20000db4
 8009584:	0800b294 	.word	0x0800b294

08009588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800958e:	4b0f      	ldr	r3, [pc, #60]	@ (80095cc <Get_SerialNum+0x44>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009594:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <Get_SerialNum+0x48>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800959a:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <Get_SerialNum+0x4c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4413      	add	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d009      	beq.n	80095c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ae:	2208      	movs	r2, #8
 80095b0:	4909      	ldr	r1, [pc, #36]	@ (80095d8 <Get_SerialNum+0x50>)
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f814 	bl	80095e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095b8:	2204      	movs	r2, #4
 80095ba:	4908      	ldr	r1, [pc, #32]	@ (80095dc <Get_SerialNum+0x54>)
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f000 f80f 	bl	80095e0 <IntToUnicode>
  }
}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	1ffff7e8 	.word	0x1ffff7e8
 80095d0:	1ffff7ec 	.word	0x1ffff7ec
 80095d4:	1ffff7f0 	.word	0x1ffff7f0
 80095d8:	20000162 	.word	0x20000162
 80095dc:	20000172 	.word	0x20000172

080095e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
 80095f6:	e027      	b.n	8009648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	0f1b      	lsrs	r3, r3, #28
 80095fc:	2b09      	cmp	r3, #9
 80095fe:	d80b      	bhi.n	8009618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	0f1b      	lsrs	r3, r3, #28
 8009604:	b2da      	uxtb	r2, r3
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	4619      	mov	r1, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	440b      	add	r3, r1
 8009610:	3230      	adds	r2, #48	@ 0x30
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	e00a      	b.n	800962e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	0f1b      	lsrs	r3, r3, #28
 800961c:	b2da      	uxtb	r2, r3
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4619      	mov	r1, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	440b      	add	r3, r1
 8009628:	3237      	adds	r2, #55	@ 0x37
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	3301      	adds	r3, #1
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	3301      	adds	r3, #1
 8009646:	75fb      	strb	r3, [r7, #23]
 8009648:	7dfa      	ldrb	r2, [r7, #23]
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	429a      	cmp	r2, r3
 800964e:	d3d3      	bcc.n	80095f8 <IntToUnicode+0x18>
  }
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr

0800965c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a11      	ldr	r2, [pc, #68]	@ (80096b0 <HAL_PCD_MspInit+0x54>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d11b      	bne.n	80096a6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800966e:	4b11      	ldr	r3, [pc, #68]	@ (80096b4 <HAL_PCD_MspInit+0x58>)
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	4a10      	ldr	r2, [pc, #64]	@ (80096b4 <HAL_PCD_MspInit+0x58>)
 8009674:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009678:	61d3      	str	r3, [r2, #28]
 800967a:	4b0e      	ldr	r3, [pc, #56]	@ (80096b4 <HAL_PCD_MspInit+0x58>)
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8009686:	2200      	movs	r2, #0
 8009688:	2100      	movs	r1, #0
 800968a:	2013      	movs	r0, #19
 800968c:	f7f8 f8f3 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8009690:	2013      	movs	r0, #19
 8009692:	f7f8 f90c 	bl	80018ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	2014      	movs	r0, #20
 800969c:	f7f8 f8eb 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80096a0:	2014      	movs	r0, #20
 80096a2:	f7f8 f904 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40005c00 	.word	0x40005c00
 80096b4:	40021000 	.word	0x40021000

080096b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7fe fdee 	bl	80082b0 <USBD_LL_SetupStage>
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80096ee:	78fa      	ldrb	r2, [r7, #3]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4613      	mov	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	440b      	add	r3, r1
 80096fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	4619      	mov	r1, r3
 8009706:	f7fe fe20 	bl	800834a <USBD_LL_DataOutStage>
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	440b      	add	r3, r1
 8009732:	3324      	adds	r3, #36	@ 0x24
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	78fb      	ldrb	r3, [r7, #3]
 8009738:	4619      	mov	r1, r3
 800973a:	f7fe fe77 	bl	800842c <USBD_LL_DataInStage>
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe ff87 	bl	8008668 <USBD_LL_SOF>
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800976a:	2301      	movs	r3, #1
 800976c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	799b      	ldrb	r3, [r3, #6]
 8009772:	2b02      	cmp	r3, #2
 8009774:	d001      	beq.n	800977a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009776:	f7f7 fc59 	bl	800102c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009780:	7bfa      	ldrb	r2, [r7, #15]
 8009782:	4611      	mov	r1, r2
 8009784:	4618      	mov	r0, r3
 8009786:	f7fe ff37 	bl	80085f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009790:	4618      	mov	r0, r3
 8009792:	f7fe fef0 	bl	8008576 <USBD_LL_Reset>
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe ff31 	bl	8008616 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7a9b      	ldrb	r3, [r3, #10]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80097bc:	4b04      	ldr	r3, [pc, #16]	@ (80097d0 <HAL_PCD_SuspendCallback+0x30>)
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	4a03      	ldr	r2, [pc, #12]	@ (80097d0 <HAL_PCD_SuspendCallback+0x30>)
 80097c2:	f043 0306 	orr.w	r3, r3, #6
 80097c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80097c8:	bf00      	nop
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	e000ed00 	.word	0xe000ed00

080097d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe ff2b 	bl	800863e <USBD_LL_Resume>
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80097f8:	4a28      	ldr	r2, [pc, #160]	@ (800989c <USBD_LL_Init+0xac>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a26      	ldr	r2, [pc, #152]	@ (800989c <USBD_LL_Init+0xac>)
 8009804:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009808:	4b24      	ldr	r3, [pc, #144]	@ (800989c <USBD_LL_Init+0xac>)
 800980a:	4a25      	ldr	r2, [pc, #148]	@ (80098a0 <USBD_LL_Init+0xb0>)
 800980c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800980e:	4b23      	ldr	r3, [pc, #140]	@ (800989c <USBD_LL_Init+0xac>)
 8009810:	2208      	movs	r2, #8
 8009812:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009814:	4b21      	ldr	r3, [pc, #132]	@ (800989c <USBD_LL_Init+0xac>)
 8009816:	2202      	movs	r2, #2
 8009818:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800981a:	4b20      	ldr	r3, [pc, #128]	@ (800989c <USBD_LL_Init+0xac>)
 800981c:	2200      	movs	r2, #0
 800981e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009820:	4b1e      	ldr	r3, [pc, #120]	@ (800989c <USBD_LL_Init+0xac>)
 8009822:	2200      	movs	r2, #0
 8009824:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009826:	4b1d      	ldr	r3, [pc, #116]	@ (800989c <USBD_LL_Init+0xac>)
 8009828:	2200      	movs	r2, #0
 800982a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800982c:	481b      	ldr	r0, [pc, #108]	@ (800989c <USBD_LL_Init+0xac>)
 800982e:	f7f8 fabf 	bl	8001db0 <HAL_PCD_Init>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009838:	f7f7 fbf8 	bl	800102c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009842:	2318      	movs	r3, #24
 8009844:	2200      	movs	r2, #0
 8009846:	2100      	movs	r1, #0
 8009848:	f7f9 ffd0 	bl	80037ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009852:	2358      	movs	r3, #88	@ 0x58
 8009854:	2200      	movs	r2, #0
 8009856:	2180      	movs	r1, #128	@ 0x80
 8009858:	f7f9 ffc8 	bl	80037ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009862:	23c0      	movs	r3, #192	@ 0xc0
 8009864:	2200      	movs	r2, #0
 8009866:	2181      	movs	r1, #129	@ 0x81
 8009868:	f7f9 ffc0 	bl	80037ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009872:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009876:	2200      	movs	r2, #0
 8009878:	2101      	movs	r1, #1
 800987a:	f7f9 ffb7 	bl	80037ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009888:	2200      	movs	r2, #0
 800988a:	2182      	movs	r1, #130	@ 0x82
 800988c:	f7f9 ffae 	bl	80037ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000fb4 	.word	0x20000fb4
 80098a0:	40005c00 	.word	0x40005c00

080098a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7f8 fb6e 	bl	8001f9c <HAL_PCD_Start>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f94e 	bl	8009b68 <USBD_Get_USB_Status>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	4608      	mov	r0, r1
 80098e4:	4611      	mov	r1, r2
 80098e6:	461a      	mov	r2, r3
 80098e8:	4603      	mov	r3, r0
 80098ea:	70fb      	strb	r3, [r7, #3]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70bb      	strb	r3, [r7, #2]
 80098f0:	4613      	mov	r3, r2
 80098f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009902:	78bb      	ldrb	r3, [r7, #2]
 8009904:	883a      	ldrh	r2, [r7, #0]
 8009906:	78f9      	ldrb	r1, [r7, #3]
 8009908:	f7f8 fcc2 	bl	8002290 <HAL_PCD_EP_Open>
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f928 	bl	8009b68 <USBD_Get_USB_Status>
 8009918:	4603      	mov	r3, r0
 800991a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991c:	7bbb      	ldrb	r3, [r7, #14]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009940:	78fa      	ldrb	r2, [r7, #3]
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f7f8 fd00 	bl	800234a <HAL_PCD_EP_Close>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f909 	bl	8009b68 <USBD_Get_USB_Status>
 8009956:	4603      	mov	r3, r0
 8009958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800995a:	7bbb      	ldrb	r3, [r7, #14]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7f8 fda8 	bl	80024d8 <HAL_PCD_EP_SetStall>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	4618      	mov	r0, r3
 8009990:	f000 f8ea 	bl	8009b68 <USBD_Get_USB_Status>
 8009994:	4603      	mov	r3, r0
 8009996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009998:	7bbb      	ldrb	r3, [r7, #14]
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	460b      	mov	r3, r1
 80099ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099bc:	78fa      	ldrb	r2, [r7, #3]
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f8 fde9 	bl	8002598 <HAL_PCD_EP_ClrStall>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 f8cb 	bl	8009b68 <USBD_Get_USB_Status>
 80099d2:	4603      	mov	r3, r0
 80099d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	da0b      	bge.n	8009a14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	4613      	mov	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	440b      	add	r3, r1
 8009a0e:	3312      	adds	r3, #18
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	e00b      	b.n	8009a2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	440b      	add	r3, r1
 8009a26:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009a2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr

08009a36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7f8 fbf7 	bl	8002248 <HAL_PCD_SetAddress>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f881 	bl	8009b68 <USBD_Get_USB_Status>
 8009a66:	4603      	mov	r3, r0
 8009a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	460b      	mov	r3, r1
 8009a82:	72fb      	strb	r3, [r7, #11]
 8009a84:	4613      	mov	r3, r2
 8009a86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009a96:	893b      	ldrh	r3, [r7, #8]
 8009a98:	7af9      	ldrb	r1, [r7, #11]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	f7f8 fce5 	bl	800246a <HAL_PCD_EP_Transmit>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 f85e 	bl	8009b68 <USBD_Get_USB_Status>
 8009aac:	4603      	mov	r3, r0
 8009aae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ab0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b086      	sub	sp, #24
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	72fb      	strb	r3, [r7, #11]
 8009aca:	4613      	mov	r3, r2
 8009acc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009adc:	893b      	ldrh	r3, [r7, #8]
 8009ade:	7af9      	ldrb	r1, [r7, #11]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	f7f8 fc7a 	bl	80023da <HAL_PCD_EP_Receive>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f83b 	bl	8009b68 <USBD_Get_USB_Status>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009af6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	460b      	mov	r3, r1
 8009b0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b12:	78fa      	ldrb	r2, [r7, #3]
 8009b14:	4611      	mov	r1, r2
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7f8 fc90 	bl	800243c <HAL_PCD_EP_GetRxCount>
 8009b1c:	4603      	mov	r3, r0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b30:	4b02      	ldr	r3, [pc, #8]	@ (8009b3c <USBD_static_malloc+0x14>)
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr
 8009b3c:	2000128c 	.word	0x2000128c

08009b40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bc80      	pop	{r7}
 8009b50:	4770      	bx	lr

08009b52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bc80      	pop	{r7}
 8009b66:	4770      	bx	lr

08009b68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d817      	bhi.n	8009bac <USBD_Get_USB_Status+0x44>
 8009b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b84 <USBD_Get_USB_Status+0x1c>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009b95 	.word	0x08009b95
 8009b88:	08009b9b 	.word	0x08009b9b
 8009b8c:	08009ba1 	.word	0x08009ba1
 8009b90:	08009ba7 	.word	0x08009ba7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
    break;
 8009b98:	e00b      	b.n	8009bb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b9e:	e008      	b.n	8009bb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ba4:	e005      	b.n	8009bb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8009baa:	e002      	b.n	8009bb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009bac:	2302      	movs	r3, #2
 8009bae:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb0:	bf00      	nop
  }
  return usb_status;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bc80      	pop	{r7}
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <std>:
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	b510      	push	{r4, lr}
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bce:	6083      	str	r3, [r0, #8]
 8009bd0:	8181      	strh	r1, [r0, #12]
 8009bd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009bd4:	81c2      	strh	r2, [r0, #14]
 8009bd6:	6183      	str	r3, [r0, #24]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	2208      	movs	r2, #8
 8009bdc:	305c      	adds	r0, #92	@ 0x5c
 8009bde:	f000 fa2d 	bl	800a03c <memset>
 8009be2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c18 <std+0x58>)
 8009be4:	6224      	str	r4, [r4, #32]
 8009be6:	6263      	str	r3, [r4, #36]	@ 0x24
 8009be8:	4b0c      	ldr	r3, [pc, #48]	@ (8009c1c <std+0x5c>)
 8009bea:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009bec:	4b0c      	ldr	r3, [pc, #48]	@ (8009c20 <std+0x60>)
 8009bee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c24 <std+0x64>)
 8009bf2:	6323      	str	r3, [r4, #48]	@ 0x30
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c28 <std+0x68>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d006      	beq.n	8009c08 <std+0x48>
 8009bfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009bfe:	4294      	cmp	r4, r2
 8009c00:	d002      	beq.n	8009c08 <std+0x48>
 8009c02:	33d0      	adds	r3, #208	@ 0xd0
 8009c04:	429c      	cmp	r4, r3
 8009c06:	d105      	bne.n	8009c14 <std+0x54>
 8009c08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c10:	f000 ba8c 	b.w	800a12c <__retarget_lock_init_recursive>
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	bf00      	nop
 8009c18:	08009e8d 	.word	0x08009e8d
 8009c1c:	08009eaf 	.word	0x08009eaf
 8009c20:	08009ee7 	.word	0x08009ee7
 8009c24:	08009f0b 	.word	0x08009f0b
 8009c28:	200014ac 	.word	0x200014ac

08009c2c <stdio_exit_handler>:
 8009c2c:	4a02      	ldr	r2, [pc, #8]	@ (8009c38 <stdio_exit_handler+0xc>)
 8009c2e:	4903      	ldr	r1, [pc, #12]	@ (8009c3c <stdio_exit_handler+0x10>)
 8009c30:	4803      	ldr	r0, [pc, #12]	@ (8009c40 <stdio_exit_handler+0x14>)
 8009c32:	f000 b869 	b.w	8009d08 <_fwalk_sglue>
 8009c36:	bf00      	nop
 8009c38:	2000017c 	.word	0x2000017c
 8009c3c:	0800ac91 	.word	0x0800ac91
 8009c40:	2000018c 	.word	0x2000018c

08009c44 <cleanup_stdio>:
 8009c44:	6841      	ldr	r1, [r0, #4]
 8009c46:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <cleanup_stdio+0x34>)
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4299      	cmp	r1, r3
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	d001      	beq.n	8009c54 <cleanup_stdio+0x10>
 8009c50:	f001 f81e 	bl	800ac90 <_fflush_r>
 8009c54:	68a1      	ldr	r1, [r4, #8]
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <cleanup_stdio+0x38>)
 8009c58:	4299      	cmp	r1, r3
 8009c5a:	d002      	beq.n	8009c62 <cleanup_stdio+0x1e>
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f001 f817 	bl	800ac90 <_fflush_r>
 8009c62:	68e1      	ldr	r1, [r4, #12]
 8009c64:	4b06      	ldr	r3, [pc, #24]	@ (8009c80 <cleanup_stdio+0x3c>)
 8009c66:	4299      	cmp	r1, r3
 8009c68:	d004      	beq.n	8009c74 <cleanup_stdio+0x30>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c70:	f001 b80e 	b.w	800ac90 <_fflush_r>
 8009c74:	bd10      	pop	{r4, pc}
 8009c76:	bf00      	nop
 8009c78:	200014ac 	.word	0x200014ac
 8009c7c:	20001514 	.word	0x20001514
 8009c80:	2000157c 	.word	0x2000157c

08009c84 <global_stdio_init.part.0>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb4 <global_stdio_init.part.0+0x30>)
 8009c88:	4c0b      	ldr	r4, [pc, #44]	@ (8009cb8 <global_stdio_init.part.0+0x34>)
 8009c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009cbc <global_stdio_init.part.0+0x38>)
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	2104      	movs	r1, #4
 8009c92:	2200      	movs	r2, #0
 8009c94:	f7ff ff94 	bl	8009bc0 <std>
 8009c98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	2109      	movs	r1, #9
 8009ca0:	f7ff ff8e 	bl	8009bc0 <std>
 8009ca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ca8:	2202      	movs	r2, #2
 8009caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cae:	2112      	movs	r1, #18
 8009cb0:	f7ff bf86 	b.w	8009bc0 <std>
 8009cb4:	200015e4 	.word	0x200015e4
 8009cb8:	200014ac 	.word	0x200014ac
 8009cbc:	08009c2d 	.word	0x08009c2d

08009cc0 <__sfp_lock_acquire>:
 8009cc0:	4801      	ldr	r0, [pc, #4]	@ (8009cc8 <__sfp_lock_acquire+0x8>)
 8009cc2:	f000 ba34 	b.w	800a12e <__retarget_lock_acquire_recursive>
 8009cc6:	bf00      	nop
 8009cc8:	200015ed 	.word	0x200015ed

08009ccc <__sfp_lock_release>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	@ (8009cd4 <__sfp_lock_release+0x8>)
 8009cce:	f000 ba2f 	b.w	800a130 <__retarget_lock_release_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	200015ed 	.word	0x200015ed

08009cd8 <__sinit>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4604      	mov	r4, r0
 8009cdc:	f7ff fff0 	bl	8009cc0 <__sfp_lock_acquire>
 8009ce0:	6a23      	ldr	r3, [r4, #32]
 8009ce2:	b11b      	cbz	r3, 8009cec <__sinit+0x14>
 8009ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce8:	f7ff bff0 	b.w	8009ccc <__sfp_lock_release>
 8009cec:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <__sinit+0x28>)
 8009cee:	6223      	str	r3, [r4, #32]
 8009cf0:	4b04      	ldr	r3, [pc, #16]	@ (8009d04 <__sinit+0x2c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1f5      	bne.n	8009ce4 <__sinit+0xc>
 8009cf8:	f7ff ffc4 	bl	8009c84 <global_stdio_init.part.0>
 8009cfc:	e7f2      	b.n	8009ce4 <__sinit+0xc>
 8009cfe:	bf00      	nop
 8009d00:	08009c45 	.word	0x08009c45
 8009d04:	200015e4 	.word	0x200015e4

08009d08 <_fwalk_sglue>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	4688      	mov	r8, r1
 8009d10:	4614      	mov	r4, r2
 8009d12:	2600      	movs	r6, #0
 8009d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d18:	f1b9 0901 	subs.w	r9, r9, #1
 8009d1c:	d505      	bpl.n	8009d2a <_fwalk_sglue+0x22>
 8009d1e:	6824      	ldr	r4, [r4, #0]
 8009d20:	2c00      	cmp	r4, #0
 8009d22:	d1f7      	bne.n	8009d14 <_fwalk_sglue+0xc>
 8009d24:	4630      	mov	r0, r6
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d907      	bls.n	8009d40 <_fwalk_sglue+0x38>
 8009d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d34:	3301      	adds	r3, #1
 8009d36:	d003      	beq.n	8009d40 <_fwalk_sglue+0x38>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	47c0      	blx	r8
 8009d3e:	4306      	orrs	r6, r0
 8009d40:	3568      	adds	r5, #104	@ 0x68
 8009d42:	e7e9      	b.n	8009d18 <_fwalk_sglue+0x10>

08009d44 <iprintf>:
 8009d44:	b40f      	push	{r0, r1, r2, r3}
 8009d46:	b507      	push	{r0, r1, r2, lr}
 8009d48:	4906      	ldr	r1, [pc, #24]	@ (8009d64 <iprintf+0x20>)
 8009d4a:	ab04      	add	r3, sp, #16
 8009d4c:	6808      	ldr	r0, [r1, #0]
 8009d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d52:	6881      	ldr	r1, [r0, #8]
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	f000 fc71 	bl	800a63c <_vfiprintf_r>
 8009d5a:	b003      	add	sp, #12
 8009d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d60:	b004      	add	sp, #16
 8009d62:	4770      	bx	lr
 8009d64:	20000188 	.word	0x20000188

08009d68 <_puts_r>:
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	460e      	mov	r6, r1
 8009d70:	6884      	ldr	r4, [r0, #8]
 8009d72:	b90b      	cbnz	r3, 8009d78 <_puts_r+0x10>
 8009d74:	f7ff ffb0 	bl	8009cd8 <__sinit>
 8009d78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d7a:	07db      	lsls	r3, r3, #31
 8009d7c:	d405      	bmi.n	8009d8a <_puts_r+0x22>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	0598      	lsls	r0, r3, #22
 8009d82:	d402      	bmi.n	8009d8a <_puts_r+0x22>
 8009d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d86:	f000 f9d2 	bl	800a12e <__retarget_lock_acquire_recursive>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	0719      	lsls	r1, r3, #28
 8009d8e:	d502      	bpl.n	8009d96 <_puts_r+0x2e>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d135      	bne.n	8009e02 <_puts_r+0x9a>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f8f9 	bl	8009f90 <__swsetup_r>
 8009d9e:	b380      	cbz	r0, 8009e02 <_puts_r+0x9a>
 8009da0:	f04f 35ff 	mov.w	r5, #4294967295
 8009da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009da6:	07da      	lsls	r2, r3, #31
 8009da8:	d405      	bmi.n	8009db6 <_puts_r+0x4e>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	059b      	lsls	r3, r3, #22
 8009dae:	d402      	bmi.n	8009db6 <_puts_r+0x4e>
 8009db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db2:	f000 f9bd 	bl	800a130 <__retarget_lock_release_recursive>
 8009db6:	4628      	mov	r0, r5
 8009db8:	bd70      	pop	{r4, r5, r6, pc}
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da04      	bge.n	8009dc8 <_puts_r+0x60>
 8009dbe:	69a2      	ldr	r2, [r4, #24]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	dc17      	bgt.n	8009df4 <_puts_r+0x8c>
 8009dc4:	290a      	cmp	r1, #10
 8009dc6:	d015      	beq.n	8009df4 <_puts_r+0x8c>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	1c5a      	adds	r2, r3, #1
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	7019      	strb	r1, [r3, #0]
 8009dd0:	68a3      	ldr	r3, [r4, #8]
 8009dd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	2900      	cmp	r1, #0
 8009ddc:	d1ed      	bne.n	8009dba <_puts_r+0x52>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da11      	bge.n	8009e06 <_puts_r+0x9e>
 8009de2:	4622      	mov	r2, r4
 8009de4:	210a      	movs	r1, #10
 8009de6:	4628      	mov	r0, r5
 8009de8:	f000 f893 	bl	8009f12 <__swbuf_r>
 8009dec:	3001      	adds	r0, #1
 8009dee:	d0d7      	beq.n	8009da0 <_puts_r+0x38>
 8009df0:	250a      	movs	r5, #10
 8009df2:	e7d7      	b.n	8009da4 <_puts_r+0x3c>
 8009df4:	4622      	mov	r2, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f88b 	bl	8009f12 <__swbuf_r>
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d1e7      	bne.n	8009dd0 <_puts_r+0x68>
 8009e00:	e7ce      	b.n	8009da0 <_puts_r+0x38>
 8009e02:	3e01      	subs	r6, #1
 8009e04:	e7e4      	b.n	8009dd0 <_puts_r+0x68>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	220a      	movs	r2, #10
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	e7ee      	b.n	8009df0 <_puts_r+0x88>
	...

08009e14 <puts>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	@ (8009e20 <puts+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f7ff bfa5 	b.w	8009d68 <_puts_r>
 8009e1e:	bf00      	nop
 8009e20:	20000188 	.word	0x20000188

08009e24 <sniprintf>:
 8009e24:	b40c      	push	{r2, r3}
 8009e26:	b530      	push	{r4, r5, lr}
 8009e28:	4b17      	ldr	r3, [pc, #92]	@ (8009e88 <sniprintf+0x64>)
 8009e2a:	1e0c      	subs	r4, r1, #0
 8009e2c:	681d      	ldr	r5, [r3, #0]
 8009e2e:	b09d      	sub	sp, #116	@ 0x74
 8009e30:	da08      	bge.n	8009e44 <sniprintf+0x20>
 8009e32:	238b      	movs	r3, #139	@ 0x8b
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	b01d      	add	sp, #116	@ 0x74
 8009e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e40:	b002      	add	sp, #8
 8009e42:	4770      	bx	lr
 8009e44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009e48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e4c:	bf0c      	ite	eq
 8009e4e:	4623      	moveq	r3, r4
 8009e50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	9307      	str	r3, [sp, #28]
 8009e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e5c:	9002      	str	r0, [sp, #8]
 8009e5e:	9006      	str	r0, [sp, #24]
 8009e60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e64:	4628      	mov	r0, r5
 8009e66:	ab21      	add	r3, sp, #132	@ 0x84
 8009e68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009e6a:	a902      	add	r1, sp, #8
 8009e6c:	9301      	str	r3, [sp, #4]
 8009e6e:	f000 fac1 	bl	800a3f4 <_svfiprintf_r>
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	bfbc      	itt	lt
 8009e76:	238b      	movlt	r3, #139	@ 0x8b
 8009e78:	602b      	strlt	r3, [r5, #0]
 8009e7a:	2c00      	cmp	r4, #0
 8009e7c:	d0dd      	beq.n	8009e3a <sniprintf+0x16>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	9b02      	ldr	r3, [sp, #8]
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e7d9      	b.n	8009e3a <sniprintf+0x16>
 8009e86:	bf00      	nop
 8009e88:	20000188 	.word	0x20000188

08009e8c <__sread>:
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e94:	f000 f8fc 	bl	800a090 <_read_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	bfab      	itete	ge
 8009e9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009ea0:	181b      	addge	r3, r3, r0
 8009ea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ea6:	bfac      	ite	ge
 8009ea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009eaa:	81a3      	strhlt	r3, [r4, #12]
 8009eac:	bd10      	pop	{r4, pc}

08009eae <__swrite>:
 8009eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb2:	461f      	mov	r7, r3
 8009eb4:	898b      	ldrh	r3, [r1, #12]
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	05db      	lsls	r3, r3, #23
 8009eba:	460c      	mov	r4, r1
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	d505      	bpl.n	8009ecc <__swrite+0x1e>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec8:	f000 f8d0 	bl	800a06c <_lseek_r>
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	4632      	mov	r2, r6
 8009ed0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	463b      	mov	r3, r7
 8009eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	f000 b8e7 	b.w	800a0b4 <_write_r>

08009ee6 <__sseek>:
 8009ee6:	b510      	push	{r4, lr}
 8009ee8:	460c      	mov	r4, r1
 8009eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eee:	f000 f8bd 	bl	800a06c <_lseek_r>
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	bf15      	itete	ne
 8009ef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009efa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009efe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f02:	81a3      	strheq	r3, [r4, #12]
 8009f04:	bf18      	it	ne
 8009f06:	81a3      	strhne	r3, [r4, #12]
 8009f08:	bd10      	pop	{r4, pc}

08009f0a <__sclose>:
 8009f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0e:	f000 b89d 	b.w	800a04c <_close_r>

08009f12 <__swbuf_r>:
 8009f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f14:	460e      	mov	r6, r1
 8009f16:	4614      	mov	r4, r2
 8009f18:	4605      	mov	r5, r0
 8009f1a:	b118      	cbz	r0, 8009f24 <__swbuf_r+0x12>
 8009f1c:	6a03      	ldr	r3, [r0, #32]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <__swbuf_r+0x12>
 8009f20:	f7ff feda 	bl	8009cd8 <__sinit>
 8009f24:	69a3      	ldr	r3, [r4, #24]
 8009f26:	60a3      	str	r3, [r4, #8]
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	071a      	lsls	r2, r3, #28
 8009f2c:	d501      	bpl.n	8009f32 <__swbuf_r+0x20>
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	b943      	cbnz	r3, 8009f44 <__swbuf_r+0x32>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 f82b 	bl	8009f90 <__swsetup_r>
 8009f3a:	b118      	cbz	r0, 8009f44 <__swbuf_r+0x32>
 8009f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8009f40:	4638      	mov	r0, r7
 8009f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	6922      	ldr	r2, [r4, #16]
 8009f48:	b2f6      	uxtb	r6, r6
 8009f4a:	1a98      	subs	r0, r3, r2
 8009f4c:	6963      	ldr	r3, [r4, #20]
 8009f4e:	4637      	mov	r7, r6
 8009f50:	4283      	cmp	r3, r0
 8009f52:	dc05      	bgt.n	8009f60 <__swbuf_r+0x4e>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fe9a 	bl	800ac90 <_fflush_r>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	d1ed      	bne.n	8009f3c <__swbuf_r+0x2a>
 8009f60:	68a3      	ldr	r3, [r4, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	701e      	strb	r6, [r3, #0]
 8009f6e:	6962      	ldr	r2, [r4, #20]
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d004      	beq.n	8009f80 <__swbuf_r+0x6e>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	07db      	lsls	r3, r3, #31
 8009f7a:	d5e1      	bpl.n	8009f40 <__swbuf_r+0x2e>
 8009f7c:	2e0a      	cmp	r6, #10
 8009f7e:	d1df      	bne.n	8009f40 <__swbuf_r+0x2e>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 fe84 	bl	800ac90 <_fflush_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d0d9      	beq.n	8009f40 <__swbuf_r+0x2e>
 8009f8c:	e7d6      	b.n	8009f3c <__swbuf_r+0x2a>
	...

08009f90 <__swsetup_r>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	4b29      	ldr	r3, [pc, #164]	@ (800a038 <__swsetup_r+0xa8>)
 8009f94:	4605      	mov	r5, r0
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	460c      	mov	r4, r1
 8009f9a:	b118      	cbz	r0, 8009fa4 <__swsetup_r+0x14>
 8009f9c:	6a03      	ldr	r3, [r0, #32]
 8009f9e:	b90b      	cbnz	r3, 8009fa4 <__swsetup_r+0x14>
 8009fa0:	f7ff fe9a 	bl	8009cd8 <__sinit>
 8009fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa8:	0719      	lsls	r1, r3, #28
 8009faa:	d422      	bmi.n	8009ff2 <__swsetup_r+0x62>
 8009fac:	06da      	lsls	r2, r3, #27
 8009fae:	d407      	bmi.n	8009fc0 <__swsetup_r+0x30>
 8009fb0:	2209      	movs	r2, #9
 8009fb2:	602a      	str	r2, [r5, #0]
 8009fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fbc:	81a3      	strh	r3, [r4, #12]
 8009fbe:	e033      	b.n	800a028 <__swsetup_r+0x98>
 8009fc0:	0758      	lsls	r0, r3, #29
 8009fc2:	d512      	bpl.n	8009fea <__swsetup_r+0x5a>
 8009fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fc6:	b141      	cbz	r1, 8009fda <__swsetup_r+0x4a>
 8009fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	d002      	beq.n	8009fd6 <__swsetup_r+0x46>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 f8bd 	bl	800a150 <_free_r>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fe0:	81a3      	strh	r3, [r4, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	6063      	str	r3, [r4, #4]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	f043 0308 	orr.w	r3, r3, #8
 8009ff0:	81a3      	strh	r3, [r4, #12]
 8009ff2:	6923      	ldr	r3, [r4, #16]
 8009ff4:	b94b      	cbnz	r3, 800a00a <__swsetup_r+0x7a>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a000:	d003      	beq.n	800a00a <__swsetup_r+0x7a>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f000 fe90 	bl	800ad2a <__smakebuf_r>
 800a00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00e:	f013 0201 	ands.w	r2, r3, #1
 800a012:	d00a      	beq.n	800a02a <__swsetup_r+0x9a>
 800a014:	2200      	movs	r2, #0
 800a016:	60a2      	str	r2, [r4, #8]
 800a018:	6962      	ldr	r2, [r4, #20]
 800a01a:	4252      	negs	r2, r2
 800a01c:	61a2      	str	r2, [r4, #24]
 800a01e:	6922      	ldr	r2, [r4, #16]
 800a020:	b942      	cbnz	r2, 800a034 <__swsetup_r+0xa4>
 800a022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a026:	d1c5      	bne.n	8009fb4 <__swsetup_r+0x24>
 800a028:	bd38      	pop	{r3, r4, r5, pc}
 800a02a:	0799      	lsls	r1, r3, #30
 800a02c:	bf58      	it	pl
 800a02e:	6962      	ldrpl	r2, [r4, #20]
 800a030:	60a2      	str	r2, [r4, #8]
 800a032:	e7f4      	b.n	800a01e <__swsetup_r+0x8e>
 800a034:	2000      	movs	r0, #0
 800a036:	e7f7      	b.n	800a028 <__swsetup_r+0x98>
 800a038:	20000188 	.word	0x20000188

0800a03c <memset>:
 800a03c:	4603      	mov	r3, r0
 800a03e:	4402      	add	r2, r0
 800a040:	4293      	cmp	r3, r2
 800a042:	d100      	bne.n	800a046 <memset+0xa>
 800a044:	4770      	bx	lr
 800a046:	f803 1b01 	strb.w	r1, [r3], #1
 800a04a:	e7f9      	b.n	800a040 <memset+0x4>

0800a04c <_close_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	2300      	movs	r3, #0
 800a050:	4d05      	ldr	r5, [pc, #20]	@ (800a068 <_close_r+0x1c>)
 800a052:	4604      	mov	r4, r0
 800a054:	4608      	mov	r0, r1
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	f7f7 f939 	bl	80012ce <_close>
 800a05c:	1c43      	adds	r3, r0, #1
 800a05e:	d102      	bne.n	800a066 <_close_r+0x1a>
 800a060:	682b      	ldr	r3, [r5, #0]
 800a062:	b103      	cbz	r3, 800a066 <_close_r+0x1a>
 800a064:	6023      	str	r3, [r4, #0]
 800a066:	bd38      	pop	{r3, r4, r5, pc}
 800a068:	200015e8 	.word	0x200015e8

0800a06c <_lseek_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	4611      	mov	r1, r2
 800a074:	2200      	movs	r2, #0
 800a076:	4d05      	ldr	r5, [pc, #20]	@ (800a08c <_lseek_r+0x20>)
 800a078:	602a      	str	r2, [r5, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	f7f7 f94b 	bl	8001316 <_lseek>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d102      	bne.n	800a08a <_lseek_r+0x1e>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	b103      	cbz	r3, 800a08a <_lseek_r+0x1e>
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	200015e8 	.word	0x200015e8

0800a090 <_read_r>:
 800a090:	b538      	push	{r3, r4, r5, lr}
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	4611      	mov	r1, r2
 800a098:	2200      	movs	r2, #0
 800a09a:	4d05      	ldr	r5, [pc, #20]	@ (800a0b0 <_read_r+0x20>)
 800a09c:	602a      	str	r2, [r5, #0]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	f7f7 f8dc 	bl	800125c <_read>
 800a0a4:	1c43      	adds	r3, r0, #1
 800a0a6:	d102      	bne.n	800a0ae <_read_r+0x1e>
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	b103      	cbz	r3, 800a0ae <_read_r+0x1e>
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	bd38      	pop	{r3, r4, r5, pc}
 800a0b0:	200015e8 	.word	0x200015e8

0800a0b4 <_write_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	2200      	movs	r2, #0
 800a0be:	4d05      	ldr	r5, [pc, #20]	@ (800a0d4 <_write_r+0x20>)
 800a0c0:	602a      	str	r2, [r5, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f7f7 f8e7 	bl	8001296 <_write>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_write_r+0x1e>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_write_r+0x1e>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	200015e8 	.word	0x200015e8

0800a0d8 <__errno>:
 800a0d8:	4b01      	ldr	r3, [pc, #4]	@ (800a0e0 <__errno+0x8>)
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	20000188 	.word	0x20000188

0800a0e4 <__libc_init_array>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	2600      	movs	r6, #0
 800a0e8:	4d0c      	ldr	r5, [pc, #48]	@ (800a11c <__libc_init_array+0x38>)
 800a0ea:	4c0d      	ldr	r4, [pc, #52]	@ (800a120 <__libc_init_array+0x3c>)
 800a0ec:	1b64      	subs	r4, r4, r5
 800a0ee:	10a4      	asrs	r4, r4, #2
 800a0f0:	42a6      	cmp	r6, r4
 800a0f2:	d109      	bne.n	800a108 <__libc_init_array+0x24>
 800a0f4:	f000 fee6 	bl	800aec4 <_init>
 800a0f8:	2600      	movs	r6, #0
 800a0fa:	4d0a      	ldr	r5, [pc, #40]	@ (800a124 <__libc_init_array+0x40>)
 800a0fc:	4c0a      	ldr	r4, [pc, #40]	@ (800a128 <__libc_init_array+0x44>)
 800a0fe:	1b64      	subs	r4, r4, r5
 800a100:	10a4      	asrs	r4, r4, #2
 800a102:	42a6      	cmp	r6, r4
 800a104:	d105      	bne.n	800a112 <__libc_init_array+0x2e>
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	f855 3b04 	ldr.w	r3, [r5], #4
 800a10c:	4798      	blx	r3
 800a10e:	3601      	adds	r6, #1
 800a110:	e7ee      	b.n	800a0f0 <__libc_init_array+0xc>
 800a112:	f855 3b04 	ldr.w	r3, [r5], #4
 800a116:	4798      	blx	r3
 800a118:	3601      	adds	r6, #1
 800a11a:	e7f2      	b.n	800a102 <__libc_init_array+0x1e>
 800a11c:	0800b30c 	.word	0x0800b30c
 800a120:	0800b30c 	.word	0x0800b30c
 800a124:	0800b30c 	.word	0x0800b30c
 800a128:	0800b310 	.word	0x0800b310

0800a12c <__retarget_lock_init_recursive>:
 800a12c:	4770      	bx	lr

0800a12e <__retarget_lock_acquire_recursive>:
 800a12e:	4770      	bx	lr

0800a130 <__retarget_lock_release_recursive>:
 800a130:	4770      	bx	lr

0800a132 <memcpy>:
 800a132:	440a      	add	r2, r1
 800a134:	4291      	cmp	r1, r2
 800a136:	f100 33ff 	add.w	r3, r0, #4294967295
 800a13a:	d100      	bne.n	800a13e <memcpy+0xc>
 800a13c:	4770      	bx	lr
 800a13e:	b510      	push	{r4, lr}
 800a140:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a144:	4291      	cmp	r1, r2
 800a146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a14a:	d1f9      	bne.n	800a140 <memcpy+0xe>
 800a14c:	bd10      	pop	{r4, pc}
	...

0800a150 <_free_r>:
 800a150:	b538      	push	{r3, r4, r5, lr}
 800a152:	4605      	mov	r5, r0
 800a154:	2900      	cmp	r1, #0
 800a156:	d040      	beq.n	800a1da <_free_r+0x8a>
 800a158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15c:	1f0c      	subs	r4, r1, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfb8      	it	lt
 800a162:	18e4      	addlt	r4, r4, r3
 800a164:	f000 f8de 	bl	800a324 <__malloc_lock>
 800a168:	4a1c      	ldr	r2, [pc, #112]	@ (800a1dc <_free_r+0x8c>)
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	b933      	cbnz	r3, 800a17c <_free_r+0x2c>
 800a16e:	6063      	str	r3, [r4, #4]
 800a170:	6014      	str	r4, [r2, #0]
 800a172:	4628      	mov	r0, r5
 800a174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a178:	f000 b8da 	b.w	800a330 <__malloc_unlock>
 800a17c:	42a3      	cmp	r3, r4
 800a17e:	d908      	bls.n	800a192 <_free_r+0x42>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	1821      	adds	r1, r4, r0
 800a184:	428b      	cmp	r3, r1
 800a186:	bf01      	itttt	eq
 800a188:	6819      	ldreq	r1, [r3, #0]
 800a18a:	685b      	ldreq	r3, [r3, #4]
 800a18c:	1809      	addeq	r1, r1, r0
 800a18e:	6021      	streq	r1, [r4, #0]
 800a190:	e7ed      	b.n	800a16e <_free_r+0x1e>
 800a192:	461a      	mov	r2, r3
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	b10b      	cbz	r3, 800a19c <_free_r+0x4c>
 800a198:	42a3      	cmp	r3, r4
 800a19a:	d9fa      	bls.n	800a192 <_free_r+0x42>
 800a19c:	6811      	ldr	r1, [r2, #0]
 800a19e:	1850      	adds	r0, r2, r1
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d10b      	bne.n	800a1bc <_free_r+0x6c>
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	4401      	add	r1, r0
 800a1a8:	1850      	adds	r0, r2, r1
 800a1aa:	4283      	cmp	r3, r0
 800a1ac:	6011      	str	r1, [r2, #0]
 800a1ae:	d1e0      	bne.n	800a172 <_free_r+0x22>
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	4408      	add	r0, r1
 800a1b6:	6010      	str	r0, [r2, #0]
 800a1b8:	6053      	str	r3, [r2, #4]
 800a1ba:	e7da      	b.n	800a172 <_free_r+0x22>
 800a1bc:	d902      	bls.n	800a1c4 <_free_r+0x74>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	602b      	str	r3, [r5, #0]
 800a1c2:	e7d6      	b.n	800a172 <_free_r+0x22>
 800a1c4:	6820      	ldr	r0, [r4, #0]
 800a1c6:	1821      	adds	r1, r4, r0
 800a1c8:	428b      	cmp	r3, r1
 800a1ca:	bf01      	itttt	eq
 800a1cc:	6819      	ldreq	r1, [r3, #0]
 800a1ce:	685b      	ldreq	r3, [r3, #4]
 800a1d0:	1809      	addeq	r1, r1, r0
 800a1d2:	6021      	streq	r1, [r4, #0]
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	6054      	str	r4, [r2, #4]
 800a1d8:	e7cb      	b.n	800a172 <_free_r+0x22>
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	200015f4 	.word	0x200015f4

0800a1e0 <sbrk_aligned>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4e0f      	ldr	r6, [pc, #60]	@ (800a220 <sbrk_aligned+0x40>)
 800a1e4:	460c      	mov	r4, r1
 800a1e6:	6831      	ldr	r1, [r6, #0]
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	b911      	cbnz	r1, 800a1f2 <sbrk_aligned+0x12>
 800a1ec:	f000 fe16 	bl	800ae1c <_sbrk_r>
 800a1f0:	6030      	str	r0, [r6, #0]
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	f000 fe11 	bl	800ae1c <_sbrk_r>
 800a1fa:	1c43      	adds	r3, r0, #1
 800a1fc:	d103      	bne.n	800a206 <sbrk_aligned+0x26>
 800a1fe:	f04f 34ff 	mov.w	r4, #4294967295
 800a202:	4620      	mov	r0, r4
 800a204:	bd70      	pop	{r4, r5, r6, pc}
 800a206:	1cc4      	adds	r4, r0, #3
 800a208:	f024 0403 	bic.w	r4, r4, #3
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d0f8      	beq.n	800a202 <sbrk_aligned+0x22>
 800a210:	1a21      	subs	r1, r4, r0
 800a212:	4628      	mov	r0, r5
 800a214:	f000 fe02 	bl	800ae1c <_sbrk_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	d1f2      	bne.n	800a202 <sbrk_aligned+0x22>
 800a21c:	e7ef      	b.n	800a1fe <sbrk_aligned+0x1e>
 800a21e:	bf00      	nop
 800a220:	200015f0 	.word	0x200015f0

0800a224 <_malloc_r>:
 800a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a228:	1ccd      	adds	r5, r1, #3
 800a22a:	f025 0503 	bic.w	r5, r5, #3
 800a22e:	3508      	adds	r5, #8
 800a230:	2d0c      	cmp	r5, #12
 800a232:	bf38      	it	cc
 800a234:	250c      	movcc	r5, #12
 800a236:	2d00      	cmp	r5, #0
 800a238:	4606      	mov	r6, r0
 800a23a:	db01      	blt.n	800a240 <_malloc_r+0x1c>
 800a23c:	42a9      	cmp	r1, r5
 800a23e:	d904      	bls.n	800a24a <_malloc_r+0x26>
 800a240:	230c      	movs	r3, #12
 800a242:	6033      	str	r3, [r6, #0]
 800a244:	2000      	movs	r0, #0
 800a246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a24a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a320 <_malloc_r+0xfc>
 800a24e:	f000 f869 	bl	800a324 <__malloc_lock>
 800a252:	f8d8 3000 	ldr.w	r3, [r8]
 800a256:	461c      	mov	r4, r3
 800a258:	bb44      	cbnz	r4, 800a2ac <_malloc_r+0x88>
 800a25a:	4629      	mov	r1, r5
 800a25c:	4630      	mov	r0, r6
 800a25e:	f7ff ffbf 	bl	800a1e0 <sbrk_aligned>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	4604      	mov	r4, r0
 800a266:	d158      	bne.n	800a31a <_malloc_r+0xf6>
 800a268:	f8d8 4000 	ldr.w	r4, [r8]
 800a26c:	4627      	mov	r7, r4
 800a26e:	2f00      	cmp	r7, #0
 800a270:	d143      	bne.n	800a2fa <_malloc_r+0xd6>
 800a272:	2c00      	cmp	r4, #0
 800a274:	d04b      	beq.n	800a30e <_malloc_r+0xea>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	4639      	mov	r1, r7
 800a27a:	4630      	mov	r0, r6
 800a27c:	eb04 0903 	add.w	r9, r4, r3
 800a280:	f000 fdcc 	bl	800ae1c <_sbrk_r>
 800a284:	4581      	cmp	r9, r0
 800a286:	d142      	bne.n	800a30e <_malloc_r+0xea>
 800a288:	6821      	ldr	r1, [r4, #0]
 800a28a:	4630      	mov	r0, r6
 800a28c:	1a6d      	subs	r5, r5, r1
 800a28e:	4629      	mov	r1, r5
 800a290:	f7ff ffa6 	bl	800a1e0 <sbrk_aligned>
 800a294:	3001      	adds	r0, #1
 800a296:	d03a      	beq.n	800a30e <_malloc_r+0xea>
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	442b      	add	r3, r5
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	bb62      	cbnz	r2, 800a300 <_malloc_r+0xdc>
 800a2a6:	f8c8 7000 	str.w	r7, [r8]
 800a2aa:	e00f      	b.n	800a2cc <_malloc_r+0xa8>
 800a2ac:	6822      	ldr	r2, [r4, #0]
 800a2ae:	1b52      	subs	r2, r2, r5
 800a2b0:	d420      	bmi.n	800a2f4 <_malloc_r+0xd0>
 800a2b2:	2a0b      	cmp	r2, #11
 800a2b4:	d917      	bls.n	800a2e6 <_malloc_r+0xc2>
 800a2b6:	1961      	adds	r1, r4, r5
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	6025      	str	r5, [r4, #0]
 800a2bc:	bf18      	it	ne
 800a2be:	6059      	strne	r1, [r3, #4]
 800a2c0:	6863      	ldr	r3, [r4, #4]
 800a2c2:	bf08      	it	eq
 800a2c4:	f8c8 1000 	streq.w	r1, [r8]
 800a2c8:	5162      	str	r2, [r4, r5]
 800a2ca:	604b      	str	r3, [r1, #4]
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f000 f82f 	bl	800a330 <__malloc_unlock>
 800a2d2:	f104 000b 	add.w	r0, r4, #11
 800a2d6:	1d23      	adds	r3, r4, #4
 800a2d8:	f020 0007 	bic.w	r0, r0, #7
 800a2dc:	1ac2      	subs	r2, r0, r3
 800a2de:	bf1c      	itt	ne
 800a2e0:	1a1b      	subne	r3, r3, r0
 800a2e2:	50a3      	strne	r3, [r4, r2]
 800a2e4:	e7af      	b.n	800a246 <_malloc_r+0x22>
 800a2e6:	6862      	ldr	r2, [r4, #4]
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	bf0c      	ite	eq
 800a2ec:	f8c8 2000 	streq.w	r2, [r8]
 800a2f0:	605a      	strne	r2, [r3, #4]
 800a2f2:	e7eb      	b.n	800a2cc <_malloc_r+0xa8>
 800a2f4:	4623      	mov	r3, r4
 800a2f6:	6864      	ldr	r4, [r4, #4]
 800a2f8:	e7ae      	b.n	800a258 <_malloc_r+0x34>
 800a2fa:	463c      	mov	r4, r7
 800a2fc:	687f      	ldr	r7, [r7, #4]
 800a2fe:	e7b6      	b.n	800a26e <_malloc_r+0x4a>
 800a300:	461a      	mov	r2, r3
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	42a3      	cmp	r3, r4
 800a306:	d1fb      	bne.n	800a300 <_malloc_r+0xdc>
 800a308:	2300      	movs	r3, #0
 800a30a:	6053      	str	r3, [r2, #4]
 800a30c:	e7de      	b.n	800a2cc <_malloc_r+0xa8>
 800a30e:	230c      	movs	r3, #12
 800a310:	4630      	mov	r0, r6
 800a312:	6033      	str	r3, [r6, #0]
 800a314:	f000 f80c 	bl	800a330 <__malloc_unlock>
 800a318:	e794      	b.n	800a244 <_malloc_r+0x20>
 800a31a:	6005      	str	r5, [r0, #0]
 800a31c:	e7d6      	b.n	800a2cc <_malloc_r+0xa8>
 800a31e:	bf00      	nop
 800a320:	200015f4 	.word	0x200015f4

0800a324 <__malloc_lock>:
 800a324:	4801      	ldr	r0, [pc, #4]	@ (800a32c <__malloc_lock+0x8>)
 800a326:	f7ff bf02 	b.w	800a12e <__retarget_lock_acquire_recursive>
 800a32a:	bf00      	nop
 800a32c:	200015ec 	.word	0x200015ec

0800a330 <__malloc_unlock>:
 800a330:	4801      	ldr	r0, [pc, #4]	@ (800a338 <__malloc_unlock+0x8>)
 800a332:	f7ff befd 	b.w	800a130 <__retarget_lock_release_recursive>
 800a336:	bf00      	nop
 800a338:	200015ec 	.word	0x200015ec

0800a33c <__ssputs_r>:
 800a33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	461f      	mov	r7, r3
 800a342:	688e      	ldr	r6, [r1, #8]
 800a344:	4682      	mov	sl, r0
 800a346:	42be      	cmp	r6, r7
 800a348:	460c      	mov	r4, r1
 800a34a:	4690      	mov	r8, r2
 800a34c:	680b      	ldr	r3, [r1, #0]
 800a34e:	d82d      	bhi.n	800a3ac <__ssputs_r+0x70>
 800a350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a354:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a358:	d026      	beq.n	800a3a8 <__ssputs_r+0x6c>
 800a35a:	6965      	ldr	r5, [r4, #20]
 800a35c:	6909      	ldr	r1, [r1, #16]
 800a35e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a362:	eba3 0901 	sub.w	r9, r3, r1
 800a366:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a36a:	1c7b      	adds	r3, r7, #1
 800a36c:	444b      	add	r3, r9
 800a36e:	106d      	asrs	r5, r5, #1
 800a370:	429d      	cmp	r5, r3
 800a372:	bf38      	it	cc
 800a374:	461d      	movcc	r5, r3
 800a376:	0553      	lsls	r3, r2, #21
 800a378:	d527      	bpl.n	800a3ca <__ssputs_r+0x8e>
 800a37a:	4629      	mov	r1, r5
 800a37c:	f7ff ff52 	bl	800a224 <_malloc_r>
 800a380:	4606      	mov	r6, r0
 800a382:	b360      	cbz	r0, 800a3de <__ssputs_r+0xa2>
 800a384:	464a      	mov	r2, r9
 800a386:	6921      	ldr	r1, [r4, #16]
 800a388:	f7ff fed3 	bl	800a132 <memcpy>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	6126      	str	r6, [r4, #16]
 800a39a:	444e      	add	r6, r9
 800a39c:	6026      	str	r6, [r4, #0]
 800a39e:	463e      	mov	r6, r7
 800a3a0:	6165      	str	r5, [r4, #20]
 800a3a2:	eba5 0509 	sub.w	r5, r5, r9
 800a3a6:	60a5      	str	r5, [r4, #8]
 800a3a8:	42be      	cmp	r6, r7
 800a3aa:	d900      	bls.n	800a3ae <__ssputs_r+0x72>
 800a3ac:	463e      	mov	r6, r7
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	4641      	mov	r1, r8
 800a3b2:	6820      	ldr	r0, [r4, #0]
 800a3b4:	f000 fcf5 	bl	800ada2 <memmove>
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	1b9b      	subs	r3, r3, r6
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	4433      	add	r3, r6
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	f000 fd44 	bl	800ae58 <_realloc_r>
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	d1e0      	bne.n	800a398 <__ssputs_r+0x5c>
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	6921      	ldr	r1, [r4, #16]
 800a3da:	f7ff feb9 	bl	800a150 <_free_r>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	f8ca 3000 	str.w	r3, [sl]
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	e7e9      	b.n	800a3c6 <__ssputs_r+0x8a>
	...

0800a3f4 <_svfiprintf_r>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	4698      	mov	r8, r3
 800a3fa:	898b      	ldrh	r3, [r1, #12]
 800a3fc:	4607      	mov	r7, r0
 800a3fe:	061b      	lsls	r3, r3, #24
 800a400:	460d      	mov	r5, r1
 800a402:	4614      	mov	r4, r2
 800a404:	b09d      	sub	sp, #116	@ 0x74
 800a406:	d510      	bpl.n	800a42a <_svfiprintf_r+0x36>
 800a408:	690b      	ldr	r3, [r1, #16]
 800a40a:	b973      	cbnz	r3, 800a42a <_svfiprintf_r+0x36>
 800a40c:	2140      	movs	r1, #64	@ 0x40
 800a40e:	f7ff ff09 	bl	800a224 <_malloc_r>
 800a412:	6028      	str	r0, [r5, #0]
 800a414:	6128      	str	r0, [r5, #16]
 800a416:	b930      	cbnz	r0, 800a426 <_svfiprintf_r+0x32>
 800a418:	230c      	movs	r3, #12
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	b01d      	add	sp, #116	@ 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	2340      	movs	r3, #64	@ 0x40
 800a428:	616b      	str	r3, [r5, #20]
 800a42a:	2300      	movs	r3, #0
 800a42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a42e:	2320      	movs	r3, #32
 800a430:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a434:	2330      	movs	r3, #48	@ 0x30
 800a436:	f04f 0901 	mov.w	r9, #1
 800a43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a43e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a5d8 <_svfiprintf_r+0x1e4>
 800a442:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a446:	4623      	mov	r3, r4
 800a448:	469a      	mov	sl, r3
 800a44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a44e:	b10a      	cbz	r2, 800a454 <_svfiprintf_r+0x60>
 800a450:	2a25      	cmp	r2, #37	@ 0x25
 800a452:	d1f9      	bne.n	800a448 <_svfiprintf_r+0x54>
 800a454:	ebba 0b04 	subs.w	fp, sl, r4
 800a458:	d00b      	beq.n	800a472 <_svfiprintf_r+0x7e>
 800a45a:	465b      	mov	r3, fp
 800a45c:	4622      	mov	r2, r4
 800a45e:	4629      	mov	r1, r5
 800a460:	4638      	mov	r0, r7
 800a462:	f7ff ff6b 	bl	800a33c <__ssputs_r>
 800a466:	3001      	adds	r0, #1
 800a468:	f000 80a7 	beq.w	800a5ba <_svfiprintf_r+0x1c6>
 800a46c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a46e:	445a      	add	r2, fp
 800a470:	9209      	str	r2, [sp, #36]	@ 0x24
 800a472:	f89a 3000 	ldrb.w	r3, [sl]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 809f 	beq.w	800a5ba <_svfiprintf_r+0x1c6>
 800a47c:	2300      	movs	r3, #0
 800a47e:	f04f 32ff 	mov.w	r2, #4294967295
 800a482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a486:	f10a 0a01 	add.w	sl, sl, #1
 800a48a:	9304      	str	r3, [sp, #16]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a492:	931a      	str	r3, [sp, #104]	@ 0x68
 800a494:	4654      	mov	r4, sl
 800a496:	2205      	movs	r2, #5
 800a498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a49c:	484e      	ldr	r0, [pc, #312]	@ (800a5d8 <_svfiprintf_r+0x1e4>)
 800a49e:	f000 fccd 	bl	800ae3c <memchr>
 800a4a2:	9a04      	ldr	r2, [sp, #16]
 800a4a4:	b9d8      	cbnz	r0, 800a4de <_svfiprintf_r+0xea>
 800a4a6:	06d0      	lsls	r0, r2, #27
 800a4a8:	bf44      	itt	mi
 800a4aa:	2320      	movmi	r3, #32
 800a4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4b0:	0711      	lsls	r1, r2, #28
 800a4b2:	bf44      	itt	mi
 800a4b4:	232b      	movmi	r3, #43	@ 0x2b
 800a4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a4be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4c0:	d015      	beq.n	800a4ee <_svfiprintf_r+0xfa>
 800a4c2:	4654      	mov	r4, sl
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	f04f 0c0a 	mov.w	ip, #10
 800a4ca:	9a07      	ldr	r2, [sp, #28]
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4d2:	3b30      	subs	r3, #48	@ 0x30
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d94b      	bls.n	800a570 <_svfiprintf_r+0x17c>
 800a4d8:	b1b0      	cbz	r0, 800a508 <_svfiprintf_r+0x114>
 800a4da:	9207      	str	r2, [sp, #28]
 800a4dc:	e014      	b.n	800a508 <_svfiprintf_r+0x114>
 800a4de:	eba0 0308 	sub.w	r3, r0, r8
 800a4e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	46a2      	mov	sl, r4
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	e7d2      	b.n	800a494 <_svfiprintf_r+0xa0>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	1d19      	adds	r1, r3, #4
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	9103      	str	r1, [sp, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfbb      	ittet	lt
 800a4fa:	425b      	neglt	r3, r3
 800a4fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a500:	9307      	strge	r3, [sp, #28]
 800a502:	9307      	strlt	r3, [sp, #28]
 800a504:	bfb8      	it	lt
 800a506:	9204      	strlt	r2, [sp, #16]
 800a508:	7823      	ldrb	r3, [r4, #0]
 800a50a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a50c:	d10a      	bne.n	800a524 <_svfiprintf_r+0x130>
 800a50e:	7863      	ldrb	r3, [r4, #1]
 800a510:	2b2a      	cmp	r3, #42	@ 0x2a
 800a512:	d132      	bne.n	800a57a <_svfiprintf_r+0x186>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	3402      	adds	r4, #2
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	9203      	str	r2, [sp, #12]
 800a51e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a5dc <_svfiprintf_r+0x1e8>
 800a528:	2203      	movs	r2, #3
 800a52a:	4650      	mov	r0, sl
 800a52c:	7821      	ldrb	r1, [r4, #0]
 800a52e:	f000 fc85 	bl	800ae3c <memchr>
 800a532:	b138      	cbz	r0, 800a544 <_svfiprintf_r+0x150>
 800a534:	2240      	movs	r2, #64	@ 0x40
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	eba0 000a 	sub.w	r0, r0, sl
 800a53c:	4082      	lsls	r2, r0
 800a53e:	4313      	orrs	r3, r2
 800a540:	3401      	adds	r4, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a548:	2206      	movs	r2, #6
 800a54a:	4825      	ldr	r0, [pc, #148]	@ (800a5e0 <_svfiprintf_r+0x1ec>)
 800a54c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a550:	f000 fc74 	bl	800ae3c <memchr>
 800a554:	2800      	cmp	r0, #0
 800a556:	d036      	beq.n	800a5c6 <_svfiprintf_r+0x1d2>
 800a558:	4b22      	ldr	r3, [pc, #136]	@ (800a5e4 <_svfiprintf_r+0x1f0>)
 800a55a:	bb1b      	cbnz	r3, 800a5a4 <_svfiprintf_r+0x1b0>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	3307      	adds	r3, #7
 800a560:	f023 0307 	bic.w	r3, r3, #7
 800a564:	3308      	adds	r3, #8
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56a:	4433      	add	r3, r6
 800a56c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a56e:	e76a      	b.n	800a446 <_svfiprintf_r+0x52>
 800a570:	460c      	mov	r4, r1
 800a572:	2001      	movs	r0, #1
 800a574:	fb0c 3202 	mla	r2, ip, r2, r3
 800a578:	e7a8      	b.n	800a4cc <_svfiprintf_r+0xd8>
 800a57a:	2300      	movs	r3, #0
 800a57c:	f04f 0c0a 	mov.w	ip, #10
 800a580:	4619      	mov	r1, r3
 800a582:	3401      	adds	r4, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	4620      	mov	r0, r4
 800a588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58c:	3a30      	subs	r2, #48	@ 0x30
 800a58e:	2a09      	cmp	r2, #9
 800a590:	d903      	bls.n	800a59a <_svfiprintf_r+0x1a6>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0c6      	beq.n	800a524 <_svfiprintf_r+0x130>
 800a596:	9105      	str	r1, [sp, #20]
 800a598:	e7c4      	b.n	800a524 <_svfiprintf_r+0x130>
 800a59a:	4604      	mov	r4, r0
 800a59c:	2301      	movs	r3, #1
 800a59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5a2:	e7f0      	b.n	800a586 <_svfiprintf_r+0x192>
 800a5a4:	ab03      	add	r3, sp, #12
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4638      	mov	r0, r7
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e8 <_svfiprintf_r+0x1f4>)
 800a5ae:	a904      	add	r1, sp, #16
 800a5b0:	f3af 8000 	nop.w
 800a5b4:	1c42      	adds	r2, r0, #1
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	d1d6      	bne.n	800a568 <_svfiprintf_r+0x174>
 800a5ba:	89ab      	ldrh	r3, [r5, #12]
 800a5bc:	065b      	lsls	r3, r3, #25
 800a5be:	f53f af2d 	bmi.w	800a41c <_svfiprintf_r+0x28>
 800a5c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5c4:	e72c      	b.n	800a420 <_svfiprintf_r+0x2c>
 800a5c6:	ab03      	add	r3, sp, #12
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <_svfiprintf_r+0x1f4>)
 800a5d0:	a904      	add	r1, sp, #16
 800a5d2:	f000 f9bd 	bl	800a950 <_printf_i>
 800a5d6:	e7ed      	b.n	800a5b4 <_svfiprintf_r+0x1c0>
 800a5d8:	0800b2ce 	.word	0x0800b2ce
 800a5dc:	0800b2d4 	.word	0x0800b2d4
 800a5e0:	0800b2d8 	.word	0x0800b2d8
 800a5e4:	00000000 	.word	0x00000000
 800a5e8:	0800a33d 	.word	0x0800a33d

0800a5ec <__sfputc_r>:
 800a5ec:	6893      	ldr	r3, [r2, #8]
 800a5ee:	b410      	push	{r4}
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	6093      	str	r3, [r2, #8]
 800a5f6:	da07      	bge.n	800a608 <__sfputc_r+0x1c>
 800a5f8:	6994      	ldr	r4, [r2, #24]
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	db01      	blt.n	800a602 <__sfputc_r+0x16>
 800a5fe:	290a      	cmp	r1, #10
 800a600:	d102      	bne.n	800a608 <__sfputc_r+0x1c>
 800a602:	bc10      	pop	{r4}
 800a604:	f7ff bc85 	b.w	8009f12 <__swbuf_r>
 800a608:	6813      	ldr	r3, [r2, #0]
 800a60a:	1c58      	adds	r0, r3, #1
 800a60c:	6010      	str	r0, [r2, #0]
 800a60e:	7019      	strb	r1, [r3, #0]
 800a610:	4608      	mov	r0, r1
 800a612:	bc10      	pop	{r4}
 800a614:	4770      	bx	lr

0800a616 <__sfputs_r>:
 800a616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a618:	4606      	mov	r6, r0
 800a61a:	460f      	mov	r7, r1
 800a61c:	4614      	mov	r4, r2
 800a61e:	18d5      	adds	r5, r2, r3
 800a620:	42ac      	cmp	r4, r5
 800a622:	d101      	bne.n	800a628 <__sfputs_r+0x12>
 800a624:	2000      	movs	r0, #0
 800a626:	e007      	b.n	800a638 <__sfputs_r+0x22>
 800a628:	463a      	mov	r2, r7
 800a62a:	4630      	mov	r0, r6
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	f7ff ffdc 	bl	800a5ec <__sfputc_r>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d1f3      	bne.n	800a620 <__sfputs_r+0xa>
 800a638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a63c <_vfiprintf_r>:
 800a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a640:	460d      	mov	r5, r1
 800a642:	4614      	mov	r4, r2
 800a644:	4698      	mov	r8, r3
 800a646:	4606      	mov	r6, r0
 800a648:	b09d      	sub	sp, #116	@ 0x74
 800a64a:	b118      	cbz	r0, 800a654 <_vfiprintf_r+0x18>
 800a64c:	6a03      	ldr	r3, [r0, #32]
 800a64e:	b90b      	cbnz	r3, 800a654 <_vfiprintf_r+0x18>
 800a650:	f7ff fb42 	bl	8009cd8 <__sinit>
 800a654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a656:	07d9      	lsls	r1, r3, #31
 800a658:	d405      	bmi.n	800a666 <_vfiprintf_r+0x2a>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	059a      	lsls	r2, r3, #22
 800a65e:	d402      	bmi.n	800a666 <_vfiprintf_r+0x2a>
 800a660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a662:	f7ff fd64 	bl	800a12e <__retarget_lock_acquire_recursive>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	071b      	lsls	r3, r3, #28
 800a66a:	d501      	bpl.n	800a670 <_vfiprintf_r+0x34>
 800a66c:	692b      	ldr	r3, [r5, #16]
 800a66e:	b99b      	cbnz	r3, 800a698 <_vfiprintf_r+0x5c>
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff fc8c 	bl	8009f90 <__swsetup_r>
 800a678:	b170      	cbz	r0, 800a698 <_vfiprintf_r+0x5c>
 800a67a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a67c:	07dc      	lsls	r4, r3, #31
 800a67e:	d504      	bpl.n	800a68a <_vfiprintf_r+0x4e>
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	b01d      	add	sp, #116	@ 0x74
 800a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68a:	89ab      	ldrh	r3, [r5, #12]
 800a68c:	0598      	lsls	r0, r3, #22
 800a68e:	d4f7      	bmi.n	800a680 <_vfiprintf_r+0x44>
 800a690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a692:	f7ff fd4d 	bl	800a130 <__retarget_lock_release_recursive>
 800a696:	e7f3      	b.n	800a680 <_vfiprintf_r+0x44>
 800a698:	2300      	movs	r3, #0
 800a69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a69c:	2320      	movs	r3, #32
 800a69e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6a2:	2330      	movs	r3, #48	@ 0x30
 800a6a4:	f04f 0901 	mov.w	r9, #1
 800a6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a858 <_vfiprintf_r+0x21c>
 800a6b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6b4:	4623      	mov	r3, r4
 800a6b6:	469a      	mov	sl, r3
 800a6b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6bc:	b10a      	cbz	r2, 800a6c2 <_vfiprintf_r+0x86>
 800a6be:	2a25      	cmp	r2, #37	@ 0x25
 800a6c0:	d1f9      	bne.n	800a6b6 <_vfiprintf_r+0x7a>
 800a6c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a6c6:	d00b      	beq.n	800a6e0 <_vfiprintf_r+0xa4>
 800a6c8:	465b      	mov	r3, fp
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f7ff ffa1 	bl	800a616 <__sfputs_r>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	f000 80a7 	beq.w	800a828 <_vfiprintf_r+0x1ec>
 800a6da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6dc:	445a      	add	r2, fp
 800a6de:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 809f 	beq.w	800a828 <_vfiprintf_r+0x1ec>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f4:	f10a 0a01 	add.w	sl, sl, #1
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a700:	931a      	str	r3, [sp, #104]	@ 0x68
 800a702:	4654      	mov	r4, sl
 800a704:	2205      	movs	r2, #5
 800a706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70a:	4853      	ldr	r0, [pc, #332]	@ (800a858 <_vfiprintf_r+0x21c>)
 800a70c:	f000 fb96 	bl	800ae3c <memchr>
 800a710:	9a04      	ldr	r2, [sp, #16]
 800a712:	b9d8      	cbnz	r0, 800a74c <_vfiprintf_r+0x110>
 800a714:	06d1      	lsls	r1, r2, #27
 800a716:	bf44      	itt	mi
 800a718:	2320      	movmi	r3, #32
 800a71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a71e:	0713      	lsls	r3, r2, #28
 800a720:	bf44      	itt	mi
 800a722:	232b      	movmi	r3, #43	@ 0x2b
 800a724:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a728:	f89a 3000 	ldrb.w	r3, [sl]
 800a72c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a72e:	d015      	beq.n	800a75c <_vfiprintf_r+0x120>
 800a730:	4654      	mov	r4, sl
 800a732:	2000      	movs	r0, #0
 800a734:	f04f 0c0a 	mov.w	ip, #10
 800a738:	9a07      	ldr	r2, [sp, #28]
 800a73a:	4621      	mov	r1, r4
 800a73c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a740:	3b30      	subs	r3, #48	@ 0x30
 800a742:	2b09      	cmp	r3, #9
 800a744:	d94b      	bls.n	800a7de <_vfiprintf_r+0x1a2>
 800a746:	b1b0      	cbz	r0, 800a776 <_vfiprintf_r+0x13a>
 800a748:	9207      	str	r2, [sp, #28]
 800a74a:	e014      	b.n	800a776 <_vfiprintf_r+0x13a>
 800a74c:	eba0 0308 	sub.w	r3, r0, r8
 800a750:	fa09 f303 	lsl.w	r3, r9, r3
 800a754:	4313      	orrs	r3, r2
 800a756:	46a2      	mov	sl, r4
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	e7d2      	b.n	800a702 <_vfiprintf_r+0xc6>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	1d19      	adds	r1, r3, #4
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	9103      	str	r1, [sp, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	bfbb      	ittet	lt
 800a768:	425b      	neglt	r3, r3
 800a76a:	f042 0202 	orrlt.w	r2, r2, #2
 800a76e:	9307      	strge	r3, [sp, #28]
 800a770:	9307      	strlt	r3, [sp, #28]
 800a772:	bfb8      	it	lt
 800a774:	9204      	strlt	r2, [sp, #16]
 800a776:	7823      	ldrb	r3, [r4, #0]
 800a778:	2b2e      	cmp	r3, #46	@ 0x2e
 800a77a:	d10a      	bne.n	800a792 <_vfiprintf_r+0x156>
 800a77c:	7863      	ldrb	r3, [r4, #1]
 800a77e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a780:	d132      	bne.n	800a7e8 <_vfiprintf_r+0x1ac>
 800a782:	9b03      	ldr	r3, [sp, #12]
 800a784:	3402      	adds	r4, #2
 800a786:	1d1a      	adds	r2, r3, #4
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	9203      	str	r2, [sp, #12]
 800a78c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a790:	9305      	str	r3, [sp, #20]
 800a792:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a85c <_vfiprintf_r+0x220>
 800a796:	2203      	movs	r2, #3
 800a798:	4650      	mov	r0, sl
 800a79a:	7821      	ldrb	r1, [r4, #0]
 800a79c:	f000 fb4e 	bl	800ae3c <memchr>
 800a7a0:	b138      	cbz	r0, 800a7b2 <_vfiprintf_r+0x176>
 800a7a2:	2240      	movs	r2, #64	@ 0x40
 800a7a4:	9b04      	ldr	r3, [sp, #16]
 800a7a6:	eba0 000a 	sub.w	r0, r0, sl
 800a7aa:	4082      	lsls	r2, r0
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	3401      	adds	r4, #1
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b6:	2206      	movs	r2, #6
 800a7b8:	4829      	ldr	r0, [pc, #164]	@ (800a860 <_vfiprintf_r+0x224>)
 800a7ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7be:	f000 fb3d 	bl	800ae3c <memchr>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d03f      	beq.n	800a846 <_vfiprintf_r+0x20a>
 800a7c6:	4b27      	ldr	r3, [pc, #156]	@ (800a864 <_vfiprintf_r+0x228>)
 800a7c8:	bb1b      	cbnz	r3, 800a812 <_vfiprintf_r+0x1d6>
 800a7ca:	9b03      	ldr	r3, [sp, #12]
 800a7cc:	3307      	adds	r3, #7
 800a7ce:	f023 0307 	bic.w	r3, r3, #7
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d8:	443b      	add	r3, r7
 800a7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7dc:	e76a      	b.n	800a6b4 <_vfiprintf_r+0x78>
 800a7de:	460c      	mov	r4, r1
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7e6:	e7a8      	b.n	800a73a <_vfiprintf_r+0xfe>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f04f 0c0a 	mov.w	ip, #10
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	3401      	adds	r4, #1
 800a7f2:	9305      	str	r3, [sp, #20]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7fa:	3a30      	subs	r2, #48	@ 0x30
 800a7fc:	2a09      	cmp	r2, #9
 800a7fe:	d903      	bls.n	800a808 <_vfiprintf_r+0x1cc>
 800a800:	2b00      	cmp	r3, #0
 800a802:	d0c6      	beq.n	800a792 <_vfiprintf_r+0x156>
 800a804:	9105      	str	r1, [sp, #20]
 800a806:	e7c4      	b.n	800a792 <_vfiprintf_r+0x156>
 800a808:	4604      	mov	r4, r0
 800a80a:	2301      	movs	r3, #1
 800a80c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a810:	e7f0      	b.n	800a7f4 <_vfiprintf_r+0x1b8>
 800a812:	ab03      	add	r3, sp, #12
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	462a      	mov	r2, r5
 800a818:	4630      	mov	r0, r6
 800a81a:	4b13      	ldr	r3, [pc, #76]	@ (800a868 <_vfiprintf_r+0x22c>)
 800a81c:	a904      	add	r1, sp, #16
 800a81e:	f3af 8000 	nop.w
 800a822:	4607      	mov	r7, r0
 800a824:	1c78      	adds	r0, r7, #1
 800a826:	d1d6      	bne.n	800a7d6 <_vfiprintf_r+0x19a>
 800a828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a82a:	07d9      	lsls	r1, r3, #31
 800a82c:	d405      	bmi.n	800a83a <_vfiprintf_r+0x1fe>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	059a      	lsls	r2, r3, #22
 800a832:	d402      	bmi.n	800a83a <_vfiprintf_r+0x1fe>
 800a834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a836:	f7ff fc7b 	bl	800a130 <__retarget_lock_release_recursive>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	065b      	lsls	r3, r3, #25
 800a83e:	f53f af1f 	bmi.w	800a680 <_vfiprintf_r+0x44>
 800a842:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a844:	e71e      	b.n	800a684 <_vfiprintf_r+0x48>
 800a846:	ab03      	add	r3, sp, #12
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	462a      	mov	r2, r5
 800a84c:	4630      	mov	r0, r6
 800a84e:	4b06      	ldr	r3, [pc, #24]	@ (800a868 <_vfiprintf_r+0x22c>)
 800a850:	a904      	add	r1, sp, #16
 800a852:	f000 f87d 	bl	800a950 <_printf_i>
 800a856:	e7e4      	b.n	800a822 <_vfiprintf_r+0x1e6>
 800a858:	0800b2ce 	.word	0x0800b2ce
 800a85c:	0800b2d4 	.word	0x0800b2d4
 800a860:	0800b2d8 	.word	0x0800b2d8
 800a864:	00000000 	.word	0x00000000
 800a868:	0800a617 	.word	0x0800a617

0800a86c <_printf_common>:
 800a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	4616      	mov	r6, r2
 800a872:	4698      	mov	r8, r3
 800a874:	688a      	ldr	r2, [r1, #8]
 800a876:	690b      	ldr	r3, [r1, #16]
 800a878:	4607      	mov	r7, r0
 800a87a:	4293      	cmp	r3, r2
 800a87c:	bfb8      	it	lt
 800a87e:	4613      	movlt	r3, r2
 800a880:	6033      	str	r3, [r6, #0]
 800a882:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a886:	460c      	mov	r4, r1
 800a888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a88c:	b10a      	cbz	r2, 800a892 <_printf_common+0x26>
 800a88e:	3301      	adds	r3, #1
 800a890:	6033      	str	r3, [r6, #0]
 800a892:	6823      	ldr	r3, [r4, #0]
 800a894:	0699      	lsls	r1, r3, #26
 800a896:	bf42      	ittt	mi
 800a898:	6833      	ldrmi	r3, [r6, #0]
 800a89a:	3302      	addmi	r3, #2
 800a89c:	6033      	strmi	r3, [r6, #0]
 800a89e:	6825      	ldr	r5, [r4, #0]
 800a8a0:	f015 0506 	ands.w	r5, r5, #6
 800a8a4:	d106      	bne.n	800a8b4 <_printf_common+0x48>
 800a8a6:	f104 0a19 	add.w	sl, r4, #25
 800a8aa:	68e3      	ldr	r3, [r4, #12]
 800a8ac:	6832      	ldr	r2, [r6, #0]
 800a8ae:	1a9b      	subs	r3, r3, r2
 800a8b0:	42ab      	cmp	r3, r5
 800a8b2:	dc2b      	bgt.n	800a90c <_printf_common+0xa0>
 800a8b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	3b00      	subs	r3, #0
 800a8bc:	bf18      	it	ne
 800a8be:	2301      	movne	r3, #1
 800a8c0:	0692      	lsls	r2, r2, #26
 800a8c2:	d430      	bmi.n	800a926 <_printf_common+0xba>
 800a8c4:	4641      	mov	r1, r8
 800a8c6:	4638      	mov	r0, r7
 800a8c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8cc:	47c8      	blx	r9
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	d023      	beq.n	800a91a <_printf_common+0xae>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	6922      	ldr	r2, [r4, #16]
 800a8d6:	f003 0306 	and.w	r3, r3, #6
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	bf14      	ite	ne
 800a8de:	2500      	movne	r5, #0
 800a8e0:	6833      	ldreq	r3, [r6, #0]
 800a8e2:	f04f 0600 	mov.w	r6, #0
 800a8e6:	bf08      	it	eq
 800a8e8:	68e5      	ldreq	r5, [r4, #12]
 800a8ea:	f104 041a 	add.w	r4, r4, #26
 800a8ee:	bf08      	it	eq
 800a8f0:	1aed      	subeq	r5, r5, r3
 800a8f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a8f6:	bf08      	it	eq
 800a8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	bfc4      	itt	gt
 800a900:	1a9b      	subgt	r3, r3, r2
 800a902:	18ed      	addgt	r5, r5, r3
 800a904:	42b5      	cmp	r5, r6
 800a906:	d11a      	bne.n	800a93e <_printf_common+0xd2>
 800a908:	2000      	movs	r0, #0
 800a90a:	e008      	b.n	800a91e <_printf_common+0xb2>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4652      	mov	r2, sl
 800a910:	4641      	mov	r1, r8
 800a912:	4638      	mov	r0, r7
 800a914:	47c8      	blx	r9
 800a916:	3001      	adds	r0, #1
 800a918:	d103      	bne.n	800a922 <_printf_common+0xb6>
 800a91a:	f04f 30ff 	mov.w	r0, #4294967295
 800a91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a922:	3501      	adds	r5, #1
 800a924:	e7c1      	b.n	800a8aa <_printf_common+0x3e>
 800a926:	2030      	movs	r0, #48	@ 0x30
 800a928:	18e1      	adds	r1, r4, r3
 800a92a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a934:	4422      	add	r2, r4
 800a936:	3302      	adds	r3, #2
 800a938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a93c:	e7c2      	b.n	800a8c4 <_printf_common+0x58>
 800a93e:	2301      	movs	r3, #1
 800a940:	4622      	mov	r2, r4
 800a942:	4641      	mov	r1, r8
 800a944:	4638      	mov	r0, r7
 800a946:	47c8      	blx	r9
 800a948:	3001      	adds	r0, #1
 800a94a:	d0e6      	beq.n	800a91a <_printf_common+0xae>
 800a94c:	3601      	adds	r6, #1
 800a94e:	e7d9      	b.n	800a904 <_printf_common+0x98>

0800a950 <_printf_i>:
 800a950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a954:	7e0f      	ldrb	r7, [r1, #24]
 800a956:	4691      	mov	r9, r2
 800a958:	2f78      	cmp	r7, #120	@ 0x78
 800a95a:	4680      	mov	r8, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	469a      	mov	sl, r3
 800a960:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a966:	d807      	bhi.n	800a978 <_printf_i+0x28>
 800a968:	2f62      	cmp	r7, #98	@ 0x62
 800a96a:	d80a      	bhi.n	800a982 <_printf_i+0x32>
 800a96c:	2f00      	cmp	r7, #0
 800a96e:	f000 80d3 	beq.w	800ab18 <_printf_i+0x1c8>
 800a972:	2f58      	cmp	r7, #88	@ 0x58
 800a974:	f000 80ba 	beq.w	800aaec <_printf_i+0x19c>
 800a978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a97c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a980:	e03a      	b.n	800a9f8 <_printf_i+0xa8>
 800a982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a986:	2b15      	cmp	r3, #21
 800a988:	d8f6      	bhi.n	800a978 <_printf_i+0x28>
 800a98a:	a101      	add	r1, pc, #4	@ (adr r1, 800a990 <_printf_i+0x40>)
 800a98c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a990:	0800a9e9 	.word	0x0800a9e9
 800a994:	0800a9fd 	.word	0x0800a9fd
 800a998:	0800a979 	.word	0x0800a979
 800a99c:	0800a979 	.word	0x0800a979
 800a9a0:	0800a979 	.word	0x0800a979
 800a9a4:	0800a979 	.word	0x0800a979
 800a9a8:	0800a9fd 	.word	0x0800a9fd
 800a9ac:	0800a979 	.word	0x0800a979
 800a9b0:	0800a979 	.word	0x0800a979
 800a9b4:	0800a979 	.word	0x0800a979
 800a9b8:	0800a979 	.word	0x0800a979
 800a9bc:	0800aaff 	.word	0x0800aaff
 800a9c0:	0800aa27 	.word	0x0800aa27
 800a9c4:	0800aab9 	.word	0x0800aab9
 800a9c8:	0800a979 	.word	0x0800a979
 800a9cc:	0800a979 	.word	0x0800a979
 800a9d0:	0800ab21 	.word	0x0800ab21
 800a9d4:	0800a979 	.word	0x0800a979
 800a9d8:	0800aa27 	.word	0x0800aa27
 800a9dc:	0800a979 	.word	0x0800a979
 800a9e0:	0800a979 	.word	0x0800a979
 800a9e4:	0800aac1 	.word	0x0800aac1
 800a9e8:	6833      	ldr	r3, [r6, #0]
 800a9ea:	1d1a      	adds	r2, r3, #4
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6032      	str	r2, [r6, #0]
 800a9f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e09e      	b.n	800ab3a <_printf_i+0x1ea>
 800a9fc:	6833      	ldr	r3, [r6, #0]
 800a9fe:	6820      	ldr	r0, [r4, #0]
 800aa00:	1d19      	adds	r1, r3, #4
 800aa02:	6031      	str	r1, [r6, #0]
 800aa04:	0606      	lsls	r6, r0, #24
 800aa06:	d501      	bpl.n	800aa0c <_printf_i+0xbc>
 800aa08:	681d      	ldr	r5, [r3, #0]
 800aa0a:	e003      	b.n	800aa14 <_printf_i+0xc4>
 800aa0c:	0645      	lsls	r5, r0, #25
 800aa0e:	d5fb      	bpl.n	800aa08 <_printf_i+0xb8>
 800aa10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	da03      	bge.n	800aa20 <_printf_i+0xd0>
 800aa18:	232d      	movs	r3, #45	@ 0x2d
 800aa1a:	426d      	negs	r5, r5
 800aa1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa20:	230a      	movs	r3, #10
 800aa22:	4859      	ldr	r0, [pc, #356]	@ (800ab88 <_printf_i+0x238>)
 800aa24:	e011      	b.n	800aa4a <_printf_i+0xfa>
 800aa26:	6821      	ldr	r1, [r4, #0]
 800aa28:	6833      	ldr	r3, [r6, #0]
 800aa2a:	0608      	lsls	r0, r1, #24
 800aa2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa30:	d402      	bmi.n	800aa38 <_printf_i+0xe8>
 800aa32:	0649      	lsls	r1, r1, #25
 800aa34:	bf48      	it	mi
 800aa36:	b2ad      	uxthmi	r5, r5
 800aa38:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa3a:	6033      	str	r3, [r6, #0]
 800aa3c:	bf14      	ite	ne
 800aa3e:	230a      	movne	r3, #10
 800aa40:	2308      	moveq	r3, #8
 800aa42:	4851      	ldr	r0, [pc, #324]	@ (800ab88 <_printf_i+0x238>)
 800aa44:	2100      	movs	r1, #0
 800aa46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa4a:	6866      	ldr	r6, [r4, #4]
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	bfa8      	it	ge
 800aa50:	6821      	ldrge	r1, [r4, #0]
 800aa52:	60a6      	str	r6, [r4, #8]
 800aa54:	bfa4      	itt	ge
 800aa56:	f021 0104 	bicge.w	r1, r1, #4
 800aa5a:	6021      	strge	r1, [r4, #0]
 800aa5c:	b90d      	cbnz	r5, 800aa62 <_printf_i+0x112>
 800aa5e:	2e00      	cmp	r6, #0
 800aa60:	d04b      	beq.n	800aafa <_printf_i+0x1aa>
 800aa62:	4616      	mov	r6, r2
 800aa64:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa68:	fb03 5711 	mls	r7, r3, r1, r5
 800aa6c:	5dc7      	ldrb	r7, [r0, r7]
 800aa6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa72:	462f      	mov	r7, r5
 800aa74:	42bb      	cmp	r3, r7
 800aa76:	460d      	mov	r5, r1
 800aa78:	d9f4      	bls.n	800aa64 <_printf_i+0x114>
 800aa7a:	2b08      	cmp	r3, #8
 800aa7c:	d10b      	bne.n	800aa96 <_printf_i+0x146>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	07df      	lsls	r7, r3, #31
 800aa82:	d508      	bpl.n	800aa96 <_printf_i+0x146>
 800aa84:	6923      	ldr	r3, [r4, #16]
 800aa86:	6861      	ldr	r1, [r4, #4]
 800aa88:	4299      	cmp	r1, r3
 800aa8a:	bfde      	ittt	le
 800aa8c:	2330      	movle	r3, #48	@ 0x30
 800aa8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa96:	1b92      	subs	r2, r2, r6
 800aa98:	6122      	str	r2, [r4, #16]
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4640      	mov	r0, r8
 800aaa0:	f8cd a000 	str.w	sl, [sp]
 800aaa4:	aa03      	add	r2, sp, #12
 800aaa6:	f7ff fee1 	bl	800a86c <_printf_common>
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d14a      	bne.n	800ab44 <_printf_i+0x1f4>
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	b004      	add	sp, #16
 800aab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	f043 0320 	orr.w	r3, r3, #32
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	2778      	movs	r7, #120	@ 0x78
 800aac2:	4832      	ldr	r0, [pc, #200]	@ (800ab8c <_printf_i+0x23c>)
 800aac4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aac8:	6823      	ldr	r3, [r4, #0]
 800aaca:	6831      	ldr	r1, [r6, #0]
 800aacc:	061f      	lsls	r7, r3, #24
 800aace:	f851 5b04 	ldr.w	r5, [r1], #4
 800aad2:	d402      	bmi.n	800aada <_printf_i+0x18a>
 800aad4:	065f      	lsls	r7, r3, #25
 800aad6:	bf48      	it	mi
 800aad8:	b2ad      	uxthmi	r5, r5
 800aada:	6031      	str	r1, [r6, #0]
 800aadc:	07d9      	lsls	r1, r3, #31
 800aade:	bf44      	itt	mi
 800aae0:	f043 0320 	orrmi.w	r3, r3, #32
 800aae4:	6023      	strmi	r3, [r4, #0]
 800aae6:	b11d      	cbz	r5, 800aaf0 <_printf_i+0x1a0>
 800aae8:	2310      	movs	r3, #16
 800aaea:	e7ab      	b.n	800aa44 <_printf_i+0xf4>
 800aaec:	4826      	ldr	r0, [pc, #152]	@ (800ab88 <_printf_i+0x238>)
 800aaee:	e7e9      	b.n	800aac4 <_printf_i+0x174>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	f023 0320 	bic.w	r3, r3, #32
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	e7f6      	b.n	800aae8 <_printf_i+0x198>
 800aafa:	4616      	mov	r6, r2
 800aafc:	e7bd      	b.n	800aa7a <_printf_i+0x12a>
 800aafe:	6833      	ldr	r3, [r6, #0]
 800ab00:	6825      	ldr	r5, [r4, #0]
 800ab02:	1d18      	adds	r0, r3, #4
 800ab04:	6961      	ldr	r1, [r4, #20]
 800ab06:	6030      	str	r0, [r6, #0]
 800ab08:	062e      	lsls	r6, r5, #24
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	d501      	bpl.n	800ab12 <_printf_i+0x1c2>
 800ab0e:	6019      	str	r1, [r3, #0]
 800ab10:	e002      	b.n	800ab18 <_printf_i+0x1c8>
 800ab12:	0668      	lsls	r0, r5, #25
 800ab14:	d5fb      	bpl.n	800ab0e <_printf_i+0x1be>
 800ab16:	8019      	strh	r1, [r3, #0]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4616      	mov	r6, r2
 800ab1c:	6123      	str	r3, [r4, #16]
 800ab1e:	e7bc      	b.n	800aa9a <_printf_i+0x14a>
 800ab20:	6833      	ldr	r3, [r6, #0]
 800ab22:	2100      	movs	r1, #0
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	6032      	str	r2, [r6, #0]
 800ab28:	681e      	ldr	r6, [r3, #0]
 800ab2a:	6862      	ldr	r2, [r4, #4]
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f000 f985 	bl	800ae3c <memchr>
 800ab32:	b108      	cbz	r0, 800ab38 <_printf_i+0x1e8>
 800ab34:	1b80      	subs	r0, r0, r6
 800ab36:	6060      	str	r0, [r4, #4]
 800ab38:	6863      	ldr	r3, [r4, #4]
 800ab3a:	6123      	str	r3, [r4, #16]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab42:	e7aa      	b.n	800aa9a <_printf_i+0x14a>
 800ab44:	4632      	mov	r2, r6
 800ab46:	4649      	mov	r1, r9
 800ab48:	4640      	mov	r0, r8
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	47d0      	blx	sl
 800ab4e:	3001      	adds	r0, #1
 800ab50:	d0ad      	beq.n	800aaae <_printf_i+0x15e>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	079b      	lsls	r3, r3, #30
 800ab56:	d413      	bmi.n	800ab80 <_printf_i+0x230>
 800ab58:	68e0      	ldr	r0, [r4, #12]
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	4298      	cmp	r0, r3
 800ab5e:	bfb8      	it	lt
 800ab60:	4618      	movlt	r0, r3
 800ab62:	e7a6      	b.n	800aab2 <_printf_i+0x162>
 800ab64:	2301      	movs	r3, #1
 800ab66:	4632      	mov	r2, r6
 800ab68:	4649      	mov	r1, r9
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	47d0      	blx	sl
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d09d      	beq.n	800aaae <_printf_i+0x15e>
 800ab72:	3501      	adds	r5, #1
 800ab74:	68e3      	ldr	r3, [r4, #12]
 800ab76:	9903      	ldr	r1, [sp, #12]
 800ab78:	1a5b      	subs	r3, r3, r1
 800ab7a:	42ab      	cmp	r3, r5
 800ab7c:	dcf2      	bgt.n	800ab64 <_printf_i+0x214>
 800ab7e:	e7eb      	b.n	800ab58 <_printf_i+0x208>
 800ab80:	2500      	movs	r5, #0
 800ab82:	f104 0619 	add.w	r6, r4, #25
 800ab86:	e7f5      	b.n	800ab74 <_printf_i+0x224>
 800ab88:	0800b2df 	.word	0x0800b2df
 800ab8c:	0800b2f0 	.word	0x0800b2f0

0800ab90 <__sflush_r>:
 800ab90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	0716      	lsls	r6, r2, #28
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	d454      	bmi.n	800ac48 <__sflush_r+0xb8>
 800ab9e:	684b      	ldr	r3, [r1, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	dc02      	bgt.n	800abaa <__sflush_r+0x1a>
 800aba4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	dd48      	ble.n	800ac3c <__sflush_r+0xac>
 800abaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abac:	2e00      	cmp	r6, #0
 800abae:	d045      	beq.n	800ac3c <__sflush_r+0xac>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800abb6:	682f      	ldr	r7, [r5, #0]
 800abb8:	6a21      	ldr	r1, [r4, #32]
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	d030      	beq.n	800ac20 <__sflush_r+0x90>
 800abbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	0759      	lsls	r1, r3, #29
 800abc4:	d505      	bpl.n	800abd2 <__sflush_r+0x42>
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	1ad2      	subs	r2, r2, r3
 800abca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abcc:	b10b      	cbz	r3, 800abd2 <__sflush_r+0x42>
 800abce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abd0:	1ad2      	subs	r2, r2, r3
 800abd2:	2300      	movs	r3, #0
 800abd4:	4628      	mov	r0, r5
 800abd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abd8:	6a21      	ldr	r1, [r4, #32]
 800abda:	47b0      	blx	r6
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	d106      	bne.n	800abf0 <__sflush_r+0x60>
 800abe2:	6829      	ldr	r1, [r5, #0]
 800abe4:	291d      	cmp	r1, #29
 800abe6:	d82b      	bhi.n	800ac40 <__sflush_r+0xb0>
 800abe8:	4a28      	ldr	r2, [pc, #160]	@ (800ac8c <__sflush_r+0xfc>)
 800abea:	410a      	asrs	r2, r1
 800abec:	07d6      	lsls	r6, r2, #31
 800abee:	d427      	bmi.n	800ac40 <__sflush_r+0xb0>
 800abf0:	2200      	movs	r2, #0
 800abf2:	6062      	str	r2, [r4, #4]
 800abf4:	6922      	ldr	r2, [r4, #16]
 800abf6:	04d9      	lsls	r1, r3, #19
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	d504      	bpl.n	800ac06 <__sflush_r+0x76>
 800abfc:	1c42      	adds	r2, r0, #1
 800abfe:	d101      	bne.n	800ac04 <__sflush_r+0x74>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b903      	cbnz	r3, 800ac06 <__sflush_r+0x76>
 800ac04:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac08:	602f      	str	r7, [r5, #0]
 800ac0a:	b1b9      	cbz	r1, 800ac3c <__sflush_r+0xac>
 800ac0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac10:	4299      	cmp	r1, r3
 800ac12:	d002      	beq.n	800ac1a <__sflush_r+0x8a>
 800ac14:	4628      	mov	r0, r5
 800ac16:	f7ff fa9b 	bl	800a150 <_free_r>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac1e:	e00d      	b.n	800ac3c <__sflush_r+0xac>
 800ac20:	2301      	movs	r3, #1
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b0      	blx	r6
 800ac26:	4602      	mov	r2, r0
 800ac28:	1c50      	adds	r0, r2, #1
 800ac2a:	d1c9      	bne.n	800abc0 <__sflush_r+0x30>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0c6      	beq.n	800abc0 <__sflush_r+0x30>
 800ac32:	2b1d      	cmp	r3, #29
 800ac34:	d001      	beq.n	800ac3a <__sflush_r+0xaa>
 800ac36:	2b16      	cmp	r3, #22
 800ac38:	d11d      	bne.n	800ac76 <__sflush_r+0xe6>
 800ac3a:	602f      	str	r7, [r5, #0]
 800ac3c:	2000      	movs	r0, #0
 800ac3e:	e021      	b.n	800ac84 <__sflush_r+0xf4>
 800ac40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac44:	b21b      	sxth	r3, r3
 800ac46:	e01a      	b.n	800ac7e <__sflush_r+0xee>
 800ac48:	690f      	ldr	r7, [r1, #16]
 800ac4a:	2f00      	cmp	r7, #0
 800ac4c:	d0f6      	beq.n	800ac3c <__sflush_r+0xac>
 800ac4e:	0793      	lsls	r3, r2, #30
 800ac50:	bf18      	it	ne
 800ac52:	2300      	movne	r3, #0
 800ac54:	680e      	ldr	r6, [r1, #0]
 800ac56:	bf08      	it	eq
 800ac58:	694b      	ldreq	r3, [r1, #20]
 800ac5a:	1bf6      	subs	r6, r6, r7
 800ac5c:	600f      	str	r7, [r1, #0]
 800ac5e:	608b      	str	r3, [r1, #8]
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	ddeb      	ble.n	800ac3c <__sflush_r+0xac>
 800ac64:	4633      	mov	r3, r6
 800ac66:	463a      	mov	r2, r7
 800ac68:	4628      	mov	r0, r5
 800ac6a:	6a21      	ldr	r1, [r4, #32]
 800ac6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ac70:	47e0      	blx	ip
 800ac72:	2800      	cmp	r0, #0
 800ac74:	dc07      	bgt.n	800ac86 <__sflush_r+0xf6>
 800ac76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac86:	4407      	add	r7, r0
 800ac88:	1a36      	subs	r6, r6, r0
 800ac8a:	e7e9      	b.n	800ac60 <__sflush_r+0xd0>
 800ac8c:	dfbffffe 	.word	0xdfbffffe

0800ac90 <_fflush_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	690b      	ldr	r3, [r1, #16]
 800ac94:	4605      	mov	r5, r0
 800ac96:	460c      	mov	r4, r1
 800ac98:	b913      	cbnz	r3, 800aca0 <_fflush_r+0x10>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	b118      	cbz	r0, 800acaa <_fflush_r+0x1a>
 800aca2:	6a03      	ldr	r3, [r0, #32]
 800aca4:	b90b      	cbnz	r3, 800acaa <_fflush_r+0x1a>
 800aca6:	f7ff f817 	bl	8009cd8 <__sinit>
 800acaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0f3      	beq.n	800ac9a <_fflush_r+0xa>
 800acb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acb4:	07d0      	lsls	r0, r2, #31
 800acb6:	d404      	bmi.n	800acc2 <_fflush_r+0x32>
 800acb8:	0599      	lsls	r1, r3, #22
 800acba:	d402      	bmi.n	800acc2 <_fflush_r+0x32>
 800acbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acbe:	f7ff fa36 	bl	800a12e <__retarget_lock_acquire_recursive>
 800acc2:	4628      	mov	r0, r5
 800acc4:	4621      	mov	r1, r4
 800acc6:	f7ff ff63 	bl	800ab90 <__sflush_r>
 800acca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800accc:	4605      	mov	r5, r0
 800acce:	07da      	lsls	r2, r3, #31
 800acd0:	d4e4      	bmi.n	800ac9c <_fflush_r+0xc>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	059b      	lsls	r3, r3, #22
 800acd6:	d4e1      	bmi.n	800ac9c <_fflush_r+0xc>
 800acd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acda:	f7ff fa29 	bl	800a130 <__retarget_lock_release_recursive>
 800acde:	e7dd      	b.n	800ac9c <_fflush_r+0xc>

0800ace0 <__swhatbuf_r>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	460c      	mov	r4, r1
 800ace4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace8:	4615      	mov	r5, r2
 800acea:	2900      	cmp	r1, #0
 800acec:	461e      	mov	r6, r3
 800acee:	b096      	sub	sp, #88	@ 0x58
 800acf0:	da0c      	bge.n	800ad0c <__swhatbuf_r+0x2c>
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	2100      	movs	r1, #0
 800acf6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acfa:	bf14      	ite	ne
 800acfc:	2340      	movne	r3, #64	@ 0x40
 800acfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad02:	2000      	movs	r0, #0
 800ad04:	6031      	str	r1, [r6, #0]
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	b016      	add	sp, #88	@ 0x58
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	466a      	mov	r2, sp
 800ad0e:	f000 f863 	bl	800add8 <_fstat_r>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	dbed      	blt.n	800acf2 <__swhatbuf_r+0x12>
 800ad16:	9901      	ldr	r1, [sp, #4]
 800ad18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad20:	4259      	negs	r1, r3
 800ad22:	4159      	adcs	r1, r3
 800ad24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad28:	e7eb      	b.n	800ad02 <__swhatbuf_r+0x22>

0800ad2a <__smakebuf_r>:
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad2e:	079d      	lsls	r5, r3, #30
 800ad30:	4606      	mov	r6, r0
 800ad32:	460c      	mov	r4, r1
 800ad34:	d507      	bpl.n	800ad46 <__smakebuf_r+0x1c>
 800ad36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	6123      	str	r3, [r4, #16]
 800ad3e:	2301      	movs	r3, #1
 800ad40:	6163      	str	r3, [r4, #20]
 800ad42:	b003      	add	sp, #12
 800ad44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad46:	466a      	mov	r2, sp
 800ad48:	ab01      	add	r3, sp, #4
 800ad4a:	f7ff ffc9 	bl	800ace0 <__swhatbuf_r>
 800ad4e:	9f00      	ldr	r7, [sp, #0]
 800ad50:	4605      	mov	r5, r0
 800ad52:	4639      	mov	r1, r7
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff fa65 	bl	800a224 <_malloc_r>
 800ad5a:	b948      	cbnz	r0, 800ad70 <__smakebuf_r+0x46>
 800ad5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad60:	059a      	lsls	r2, r3, #22
 800ad62:	d4ee      	bmi.n	800ad42 <__smakebuf_r+0x18>
 800ad64:	f023 0303 	bic.w	r3, r3, #3
 800ad68:	f043 0302 	orr.w	r3, r3, #2
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	e7e2      	b.n	800ad36 <__smakebuf_r+0xc>
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad7a:	81a3      	strh	r3, [r4, #12]
 800ad7c:	9b01      	ldr	r3, [sp, #4]
 800ad7e:	6020      	str	r0, [r4, #0]
 800ad80:	b15b      	cbz	r3, 800ad9a <__smakebuf_r+0x70>
 800ad82:	4630      	mov	r0, r6
 800ad84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad88:	f000 f838 	bl	800adfc <_isatty_r>
 800ad8c:	b128      	cbz	r0, 800ad9a <__smakebuf_r+0x70>
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f023 0303 	bic.w	r3, r3, #3
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	81a3      	strh	r3, [r4, #12]
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	431d      	orrs	r5, r3
 800ad9e:	81a5      	strh	r5, [r4, #12]
 800ada0:	e7cf      	b.n	800ad42 <__smakebuf_r+0x18>

0800ada2 <memmove>:
 800ada2:	4288      	cmp	r0, r1
 800ada4:	b510      	push	{r4, lr}
 800ada6:	eb01 0402 	add.w	r4, r1, r2
 800adaa:	d902      	bls.n	800adb2 <memmove+0x10>
 800adac:	4284      	cmp	r4, r0
 800adae:	4623      	mov	r3, r4
 800adb0:	d807      	bhi.n	800adc2 <memmove+0x20>
 800adb2:	1e43      	subs	r3, r0, #1
 800adb4:	42a1      	cmp	r1, r4
 800adb6:	d008      	beq.n	800adca <memmove+0x28>
 800adb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adc0:	e7f8      	b.n	800adb4 <memmove+0x12>
 800adc2:	4601      	mov	r1, r0
 800adc4:	4402      	add	r2, r0
 800adc6:	428a      	cmp	r2, r1
 800adc8:	d100      	bne.n	800adcc <memmove+0x2a>
 800adca:	bd10      	pop	{r4, pc}
 800adcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800add0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800add4:	e7f7      	b.n	800adc6 <memmove+0x24>
	...

0800add8 <_fstat_r>:
 800add8:	b538      	push	{r3, r4, r5, lr}
 800adda:	2300      	movs	r3, #0
 800addc:	4d06      	ldr	r5, [pc, #24]	@ (800adf8 <_fstat_r+0x20>)
 800adde:	4604      	mov	r4, r0
 800ade0:	4608      	mov	r0, r1
 800ade2:	4611      	mov	r1, r2
 800ade4:	602b      	str	r3, [r5, #0]
 800ade6:	f7f6 fa7d 	bl	80012e4 <_fstat>
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	d102      	bne.n	800adf4 <_fstat_r+0x1c>
 800adee:	682b      	ldr	r3, [r5, #0]
 800adf0:	b103      	cbz	r3, 800adf4 <_fstat_r+0x1c>
 800adf2:	6023      	str	r3, [r4, #0]
 800adf4:	bd38      	pop	{r3, r4, r5, pc}
 800adf6:	bf00      	nop
 800adf8:	200015e8 	.word	0x200015e8

0800adfc <_isatty_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	2300      	movs	r3, #0
 800ae00:	4d05      	ldr	r5, [pc, #20]	@ (800ae18 <_isatty_r+0x1c>)
 800ae02:	4604      	mov	r4, r0
 800ae04:	4608      	mov	r0, r1
 800ae06:	602b      	str	r3, [r5, #0]
 800ae08:	f7f6 fa7b 	bl	8001302 <_isatty>
 800ae0c:	1c43      	adds	r3, r0, #1
 800ae0e:	d102      	bne.n	800ae16 <_isatty_r+0x1a>
 800ae10:	682b      	ldr	r3, [r5, #0]
 800ae12:	b103      	cbz	r3, 800ae16 <_isatty_r+0x1a>
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	bd38      	pop	{r3, r4, r5, pc}
 800ae18:	200015e8 	.word	0x200015e8

0800ae1c <_sbrk_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	2300      	movs	r3, #0
 800ae20:	4d05      	ldr	r5, [pc, #20]	@ (800ae38 <_sbrk_r+0x1c>)
 800ae22:	4604      	mov	r4, r0
 800ae24:	4608      	mov	r0, r1
 800ae26:	602b      	str	r3, [r5, #0]
 800ae28:	f7f6 fa82 	bl	8001330 <_sbrk>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_sbrk_r+0x1a>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_sbrk_r+0x1a>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	200015e8 	.word	0x200015e8

0800ae3c <memchr>:
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	b2c9      	uxtb	r1, r1
 800ae42:	4402      	add	r2, r0
 800ae44:	4293      	cmp	r3, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	d101      	bne.n	800ae4e <memchr+0x12>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e003      	b.n	800ae56 <memchr+0x1a>
 800ae4e:	7804      	ldrb	r4, [r0, #0]
 800ae50:	3301      	adds	r3, #1
 800ae52:	428c      	cmp	r4, r1
 800ae54:	d1f6      	bne.n	800ae44 <memchr+0x8>
 800ae56:	bd10      	pop	{r4, pc}

0800ae58 <_realloc_r>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4615      	mov	r5, r2
 800ae60:	460c      	mov	r4, r1
 800ae62:	b921      	cbnz	r1, 800ae6e <_realloc_r+0x16>
 800ae64:	4611      	mov	r1, r2
 800ae66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6a:	f7ff b9db 	b.w	800a224 <_malloc_r>
 800ae6e:	b92a      	cbnz	r2, 800ae7c <_realloc_r+0x24>
 800ae70:	f7ff f96e 	bl	800a150 <_free_r>
 800ae74:	2400      	movs	r4, #0
 800ae76:	4620      	mov	r0, r4
 800ae78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7c:	f000 f81a 	bl	800aeb4 <_malloc_usable_size_r>
 800ae80:	4285      	cmp	r5, r0
 800ae82:	4606      	mov	r6, r0
 800ae84:	d802      	bhi.n	800ae8c <_realloc_r+0x34>
 800ae86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae8a:	d8f4      	bhi.n	800ae76 <_realloc_r+0x1e>
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4640      	mov	r0, r8
 800ae90:	f7ff f9c8 	bl	800a224 <_malloc_r>
 800ae94:	4607      	mov	r7, r0
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0ec      	beq.n	800ae74 <_realloc_r+0x1c>
 800ae9a:	42b5      	cmp	r5, r6
 800ae9c:	462a      	mov	r2, r5
 800ae9e:	4621      	mov	r1, r4
 800aea0:	bf28      	it	cs
 800aea2:	4632      	movcs	r2, r6
 800aea4:	f7ff f945 	bl	800a132 <memcpy>
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff f950 	bl	800a150 <_free_r>
 800aeb0:	463c      	mov	r4, r7
 800aeb2:	e7e0      	b.n	800ae76 <_realloc_r+0x1e>

0800aeb4 <_malloc_usable_size_r>:
 800aeb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeb8:	1f18      	subs	r0, r3, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bfbc      	itt	lt
 800aebe:	580b      	ldrlt	r3, [r1, r0]
 800aec0:	18c0      	addlt	r0, r0, r3
 800aec2:	4770      	bx	lr

0800aec4 <_init>:
 800aec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec6:	bf00      	nop
 800aec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeca:	bc08      	pop	{r3}
 800aecc:	469e      	mov	lr, r3
 800aece:	4770      	bx	lr

0800aed0 <_fini>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr
